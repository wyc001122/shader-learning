const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CdC5JksG.js","assets/locaAnswer-L44IFyad.js","assets/createLucideIcon-Dt8yzaNy.js","assets/index-8L8Uv4mW.css","assets/index-BtmIMkLc.js","assets/NotFound-CYfZzxL0.js"])))=>i.map(i=>d[i]);
(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))o(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&o(a)}).observe(document,{childList:!0,subtree:!0});function t(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function o(i){if(i.ep)return;i.ep=!0;const r=t(i);fetch(i.href,r)}})();/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function Ni(e){const n=Object.create(null);for(const t of e.split(","))n[t]=1;return t=>t in n}const de={},nt=[],cn=()=>{},Kl=()=>!1,So=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),Ii=e=>e.startsWith("onUpdate:"),ke=Object.assign,Li=(e,n)=>{const t=e.indexOf(n);t>-1&&e.splice(t,1)},Zl=Object.prototype.hasOwnProperty,oe=(e,n)=>Zl.call(e,n),U=Array.isArray,tt=e=>_o(e)==="[object Map]",ns=e=>_o(e)==="[object Set]",H=e=>typeof e=="function",he=e=>typeof e=="string",xn=e=>typeof e=="symbol",me=e=>e!==null&&typeof e=="object",ts=e=>(me(e)||H(e))&&H(e.then)&&H(e.catch),os=Object.prototype.toString,_o=e=>os.call(e),Ql=e=>_o(e).slice(8,-1),is=e=>_o(e)==="[object Object]",Bi=e=>he(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Ct=Ni(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),zo=e=>{const n=Object.create(null);return t=>n[t]||(n[t]=e(t))},Jl=/-(\w)/g,Xe=zo(e=>e.replace(Jl,(n,t)=>t?t.toUpperCase():"")),ec=/\B([A-Z])/g,$n=zo(e=>e.replace(ec,"-$1").toLowerCase()),To=zo(e=>e.charAt(0).toUpperCase()+e.slice(1)),ro=zo(e=>e?`on${To(e)}`:""),_n=(e,n)=>!Object.is(e,n),Zo=(e,...n)=>{for(let t=0;t<e.length;t++)e[t](...n)},rs=(e,n,t,o=!1)=>{Object.defineProperty(e,n,{configurable:!0,enumerable:!1,writable:o,value:t})},nc=e=>{const n=parseFloat(e);return isNaN(n)?e:n},tc=e=>{const n=he(e)?Number(e):NaN;return isNaN(n)?e:n};let fr;const Ro=()=>fr||(fr=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Mo(e){if(U(e)){const n={};for(let t=0;t<e.length;t++){const o=e[t],i=he(o)?ac(o):Mo(o);if(i)for(const r in i)n[r]=i[r]}return n}else if(he(e)||me(e))return e}const oc=/;(?![^(]*\))/g,ic=/:([^]+)/,rc=/\/\*[^]*?\*\//g;function ac(e){const n={};return e.replace(rc,"").split(oc).forEach(t=>{if(t){const o=t.split(ic);o.length>1&&(n[o[0].trim()]=o[1].trim())}}),n}function Do(e){let n="";if(he(e))n=e;else if(U(e))for(let t=0;t<e.length;t++){const o=Do(e[t]);o&&(n+=o+" ")}else if(me(e))for(const t in e)e[t]&&(n+=t+" ");return n.trim()}function Rh(e){if(!e)return null;let{class:n,style:t}=e;return n&&!he(n)&&(e.class=Do(n)),t&&(e.style=Mo(t)),e}const sc="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",lc=Ni(sc);function as(e){return!!e||e===""}const ss=e=>!!(e&&e.__v_isRef===!0),cc=e=>he(e)?e:e==null?"":U(e)||me(e)&&(e.toString===os||!H(e.toString))?ss(e)?cc(e.value):JSON.stringify(e,ls,2):String(e),ls=(e,n)=>ss(n)?ls(e,n.value):tt(n)?{[`Map(${n.size})`]:[...n.entries()].reduce((t,[o,i],r)=>(t[Qo(o,r)+" =>"]=i,t),{})}:ns(n)?{[`Set(${n.size})`]:[...n.values()].map(t=>Qo(t))}:xn(n)?Qo(n):me(n)&&!U(n)&&!is(n)?String(n):n,Qo=(e,n="")=>{var t;return xn(e)?`Symbol(${(t=e.description)!=null?t:n})`:e};/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Re;class cs{constructor(n=!1){this.detached=n,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=Re,!n&&Re&&(this.index=(Re.scopes||(Re.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let n,t;if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].pause();for(n=0,t=this.effects.length;n<t;n++)this.effects[n].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let n,t;if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].resume();for(n=0,t=this.effects.length;n<t;n++)this.effects[n].resume()}}run(n){if(this._active){const t=Re;try{return Re=this,n()}finally{Re=t}}}on(){Re=this}off(){Re=this.parent}stop(n){if(this._active){this._active=!1;let t,o;for(t=0,o=this.effects.length;t<o;t++)this.effects[t].stop();for(this.effects.length=0,t=0,o=this.cleanups.length;t<o;t++)this.cleanups[t]();if(this.cleanups.length=0,this.scopes){for(t=0,o=this.scopes.length;t<o;t++)this.scopes[t].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!n){const i=this.parent.scopes.pop();i&&i!==this&&(this.parent.scopes[this.index]=i,i.index=this.index)}this.parent=void 0}}}function Mh(e){return new cs(e)}function dc(){return Re}function Dh(e,n=!1){Re&&Re.cleanups.push(e)}let ve;const Jo=new WeakSet;class ds{constructor(n){this.fn=n,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,Re&&Re.active&&Re.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,Jo.has(this)&&(Jo.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||vs(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,vr(this),us(this);const n=ve,t=Ze;ve=this,Ze=!0;try{return this.fn()}finally{ms(this),ve=n,Ze=t,this.flags&=-3}}stop(){if(this.flags&1){for(let n=this.deps;n;n=n.nextDep)Ui(n);this.deps=this.depsTail=void 0,vr(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?Jo.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){mi(this)&&this.run()}get dirty(){return mi(this)}}let fs=0,Pt,Ft;function vs(e,n=!1){if(e.flags|=8,n){e.next=Ft,Ft=e;return}e.next=Pt,Pt=e}function Oi(){fs++}function Gi(){if(--fs>0)return;if(Ft){let n=Ft;for(Ft=void 0;n;){const t=n.next;n.next=void 0,n.flags&=-9,n=t}}let e;for(;Pt;){let n=Pt;for(Pt=void 0;n;){const t=n.next;if(n.next=void 0,n.flags&=-9,n.flags&1)try{n.trigger()}catch(o){e||(e=o)}n=t}}if(e)throw e}function us(e){for(let n=e.deps;n;n=n.nextDep)n.version=-1,n.prevActiveLink=n.dep.activeLink,n.dep.activeLink=n}function ms(e){let n,t=e.depsTail,o=t;for(;o;){const i=o.prevDep;o.version===-1?(o===t&&(t=i),Ui(o),fc(o)):n=o,o.dep.activeLink=o.prevActiveLink,o.prevActiveLink=void 0,o=i}e.deps=n,e.depsTail=t}function mi(e){for(let n=e.deps;n;n=n.nextDep)if(n.dep.version!==n.version||n.dep.computed&&(gs(n.dep.computed)||n.dep.version!==n.version))return!0;return!!e._dirty}function gs(e){if(e.flags&4&&!(e.flags&16)||(e.flags&=-17,e.globalVersion===Mt))return;e.globalVersion=Mt;const n=e.dep;if(e.flags|=2,n.version>0&&!e.isSSR&&e.deps&&!mi(e)){e.flags&=-3;return}const t=ve,o=Ze;ve=e,Ze=!0;try{us(e);const i=e.fn(e._value);(n.version===0||_n(i,e._value))&&(e._value=i,n.version++)}catch(i){throw n.version++,i}finally{ve=t,Ze=o,ms(e),e.flags&=-3}}function Ui(e,n=!1){const{dep:t,prevSub:o,nextSub:i}=e;if(o&&(o.nextSub=i,e.prevSub=void 0),i&&(i.prevSub=o,e.nextSub=void 0),t.subs===e&&(t.subs=o,!o&&t.computed)){t.computed.flags&=-5;for(let r=t.computed.deps;r;r=r.nextDep)Ui(r,!0)}!n&&!--t.sc&&t.map&&t.map.delete(t.key)}function fc(e){const{prevDep:n,nextDep:t}=e;n&&(n.nextDep=t,e.prevDep=void 0),t&&(t.prevDep=n,e.nextDep=void 0)}let Ze=!0;const hs=[];function Rn(){hs.push(Ze),Ze=!1}function Mn(){const e=hs.pop();Ze=e===void 0?!0:e}function vr(e){const{cleanup:n}=e;if(e.cleanup=void 0,n){const t=ve;ve=void 0;try{n()}finally{ve=t}}}let Mt=0;class vc{constructor(n,t){this.sub=n,this.dep=t,this.version=t.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Vo{constructor(n){this.computed=n,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(n){if(!ve||!Ze||ve===this.computed)return;let t=this.activeLink;if(t===void 0||t.sub!==ve)t=this.activeLink=new vc(ve,this),ve.deps?(t.prevDep=ve.depsTail,ve.depsTail.nextDep=t,ve.depsTail=t):ve.deps=ve.depsTail=t,ps(t);else if(t.version===-1&&(t.version=this.version,t.nextDep)){const o=t.nextDep;o.prevDep=t.prevDep,t.prevDep&&(t.prevDep.nextDep=o),t.prevDep=ve.depsTail,t.nextDep=void 0,ve.depsTail.nextDep=t,ve.depsTail=t,ve.deps===t&&(ve.deps=o)}return t}trigger(n){this.version++,Mt++,this.notify(n)}notify(n){Oi();try{for(let t=this.subs;t;t=t.prevSub)t.sub.notify()&&t.sub.dep.notify()}finally{Gi()}}}function ps(e){if(e.dep.sc++,e.sub.flags&4){const n=e.dep.computed;if(n&&!e.dep.subs){n.flags|=20;for(let o=n.deps;o;o=o.nextDep)ps(o)}const t=e.dep.subs;t!==e&&(e.prevSub=t,t&&(t.nextSub=e)),e.dep.subs=e}}const ho=new WeakMap,Ln=Symbol(""),gi=Symbol(""),Dt=Symbol("");function Se(e,n,t){if(Ze&&ve){let o=ho.get(e);o||ho.set(e,o=new Map);let i=o.get(t);i||(o.set(t,i=new Vo),i.map=o,i.key=t),i.track()}}function gn(e,n,t,o,i,r){const a=ho.get(e);if(!a){Mt++;return}const s=l=>{l&&l.trigger()};if(Oi(),n==="clear")a.forEach(s);else{const l=U(e),c=l&&Bi(t);if(l&&t==="length"){const f=Number(o);a.forEach((d,u)=>{(u==="length"||u===Dt||!xn(u)&&u>=f)&&s(d)})}else switch((t!==void 0||a.has(void 0))&&s(a.get(t)),c&&s(a.get(Dt)),n){case"add":l?c&&s(a.get("length")):(s(a.get(Ln)),tt(e)&&s(a.get(gi)));break;case"delete":l||(s(a.get(Ln)),tt(e)&&s(a.get(gi)));break;case"set":tt(e)&&s(a.get(Ln));break}}Gi()}function uc(e,n){const t=ho.get(e);return t&&t.get(n)}function Xn(e){const n=Q(e);return n===e?n:(Se(n,"iterate",Dt),qe(e)?n:n.map(_e))}function jo(e){return Se(e=Q(e),"iterate",Dt),e}const mc={__proto__:null,[Symbol.iterator](){return ei(this,Symbol.iterator,_e)},concat(...e){return Xn(this).concat(...e.map(n=>U(n)?Xn(n):n))},entries(){return ei(this,"entries",e=>(e[1]=_e(e[1]),e))},every(e,n){return fn(this,"every",e,n,void 0,arguments)},filter(e,n){return fn(this,"filter",e,n,t=>t.map(_e),arguments)},find(e,n){return fn(this,"find",e,n,_e,arguments)},findIndex(e,n){return fn(this,"findIndex",e,n,void 0,arguments)},findLast(e,n){return fn(this,"findLast",e,n,_e,arguments)},findLastIndex(e,n){return fn(this,"findLastIndex",e,n,void 0,arguments)},forEach(e,n){return fn(this,"forEach",e,n,void 0,arguments)},includes(...e){return ni(this,"includes",e)},indexOf(...e){return ni(this,"indexOf",e)},join(e){return Xn(this).join(e)},lastIndexOf(...e){return ni(this,"lastIndexOf",e)},map(e,n){return fn(this,"map",e,n,void 0,arguments)},pop(){return ht(this,"pop")},push(...e){return ht(this,"push",e)},reduce(e,...n){return ur(this,"reduce",e,n)},reduceRight(e,...n){return ur(this,"reduceRight",e,n)},shift(){return ht(this,"shift")},some(e,n){return fn(this,"some",e,n,void 0,arguments)},splice(...e){return ht(this,"splice",e)},toReversed(){return Xn(this).toReversed()},toSorted(e){return Xn(this).toSorted(e)},toSpliced(...e){return Xn(this).toSpliced(...e)},unshift(...e){return ht(this,"unshift",e)},values(){return ei(this,"values",_e)}};function ei(e,n,t){const o=jo(e),i=o[n]();return o!==e&&!qe(e)&&(i._next=i.next,i.next=()=>{const r=i._next();return r.value&&(r.value=t(r.value)),r}),i}const gc=Array.prototype;function fn(e,n,t,o,i,r){const a=jo(e),s=a!==e&&!qe(e),l=a[n];if(l!==gc[n]){const d=l.apply(e,r);return s?_e(d):d}let c=t;a!==e&&(s?c=function(d,u){return t.call(this,_e(d),u,e)}:t.length>2&&(c=function(d,u){return t.call(this,d,u,e)}));const f=l.call(a,c,o);return s&&i?i(f):f}function ur(e,n,t,o){const i=jo(e);let r=t;return i!==e&&(qe(e)?t.length>3&&(r=function(a,s,l){return t.call(this,a,s,l,e)}):r=function(a,s,l){return t.call(this,a,_e(s),l,e)}),i[n](r,...o)}function ni(e,n,t){const o=Q(e);Se(o,"iterate",Dt);const i=o[n](...t);return(i===-1||i===!1)&&$i(t[0])?(t[0]=Q(t[0]),o[n](...t)):i}function ht(e,n,t=[]){Rn(),Oi();const o=Q(e)[n].apply(e,t);return Gi(),Mn(),o}const hc=Ni("__proto__,__v_isRef,__isVue"),xs=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(xn));function pc(e){xn(e)||(e=String(e));const n=Q(this);return Se(n,"has",e),n.hasOwnProperty(e)}class ys{constructor(n=!1,t=!1){this._isReadonly=n,this._isShallow=t}get(n,t,o){if(t==="__v_skip")return n.__v_skip;const i=this._isReadonly,r=this._isShallow;if(t==="__v_isReactive")return!i;if(t==="__v_isReadonly")return i;if(t==="__v_isShallow")return r;if(t==="__v_raw")return o===(i?r?ks:Fs:r?Ps:Cs).get(n)||Object.getPrototypeOf(n)===Object.getPrototypeOf(o)?n:void 0;const a=U(n);if(!i){let l;if(a&&(l=mc[t]))return l;if(t==="hasOwnProperty")return pc}const s=Reflect.get(n,t,Fe(n)?n:o);return(xn(t)?xs.has(t):hc(t))||(i||Se(n,"get",t),r)?s:Fe(s)?a&&Bi(t)?s:s.value:me(s)?i?_s(s):Eo(s):s}}class bs extends ys{constructor(n=!1){super(!1,n)}set(n,t,o,i){let r=n[t];if(!this._isShallow){const l=Un(r);if(!qe(o)&&!Un(o)&&(r=Q(r),o=Q(o)),!U(n)&&Fe(r)&&!Fe(o))return l?!1:(r.value=o,!0)}const a=U(n)&&Bi(t)?Number(t)<n.length:oe(n,t),s=Reflect.set(n,t,o,Fe(n)?n:i);return n===Q(i)&&(a?_n(o,r)&&gn(n,"set",t,o):gn(n,"add",t,o)),s}deleteProperty(n,t){const o=oe(n,t);n[t];const i=Reflect.deleteProperty(n,t);return i&&o&&gn(n,"delete",t,void 0),i}has(n,t){const o=Reflect.has(n,t);return(!xn(t)||!xs.has(t))&&Se(n,"has",t),o}ownKeys(n){return Se(n,"iterate",U(n)?"length":Ln),Reflect.ownKeys(n)}}class ws extends ys{constructor(n=!1){super(!0,n)}set(n,t){return!0}deleteProperty(n,t){return!0}}const xc=new bs,yc=new ws,bc=new bs(!0),wc=new ws(!0),hi=e=>e,Wt=e=>Reflect.getPrototypeOf(e);function Cc(e,n,t){return function(...o){const i=this.__v_raw,r=Q(i),a=tt(r),s=e==="entries"||e===Symbol.iterator&&a,l=e==="keys"&&a,c=i[e](...o),f=t?hi:n?pi:_e;return!n&&Se(r,"iterate",l?gi:Ln),{next(){const{value:d,done:u}=c.next();return u?{value:d,done:u}:{value:s?[f(d[0]),f(d[1])]:f(d),done:u}},[Symbol.iterator](){return this}}}}function Kt(e){return function(...n){return e==="delete"?!1:e==="clear"?void 0:this}}function Pc(e,n){const t={get(i){const r=this.__v_raw,a=Q(r),s=Q(i);e||(_n(i,s)&&Se(a,"get",i),Se(a,"get",s));const{has:l}=Wt(a),c=n?hi:e?pi:_e;if(l.call(a,i))return c(r.get(i));if(l.call(a,s))return c(r.get(s));r!==a&&r.get(i)},get size(){const i=this.__v_raw;return!e&&Se(Q(i),"iterate",Ln),Reflect.get(i,"size",i)},has(i){const r=this.__v_raw,a=Q(r),s=Q(i);return e||(_n(i,s)&&Se(a,"has",i),Se(a,"has",s)),i===s?r.has(i):r.has(i)||r.has(s)},forEach(i,r){const a=this,s=a.__v_raw,l=Q(s),c=n?hi:e?pi:_e;return!e&&Se(l,"iterate",Ln),s.forEach((f,d)=>i.call(r,c(f),c(d),a))}};return ke(t,e?{add:Kt("add"),set:Kt("set"),delete:Kt("delete"),clear:Kt("clear")}:{add(i){!n&&!qe(i)&&!Un(i)&&(i=Q(i));const r=Q(this);return Wt(r).has.call(r,i)||(r.add(i),gn(r,"add",i,i)),this},set(i,r){!n&&!qe(r)&&!Un(r)&&(r=Q(r));const a=Q(this),{has:s,get:l}=Wt(a);let c=s.call(a,i);c||(i=Q(i),c=s.call(a,i));const f=l.call(a,i);return a.set(i,r),c?_n(r,f)&&gn(a,"set",i,r):gn(a,"add",i,r),this},delete(i){const r=Q(this),{has:a,get:s}=Wt(r);let l=a.call(r,i);l||(i=Q(i),l=a.call(r,i)),s&&s.call(r,i);const c=r.delete(i);return l&&gn(r,"delete",i,void 0),c},clear(){const i=Q(this),r=i.size!==0,a=i.clear();return r&&gn(i,"clear",void 0,void 0),a}}),["keys","values","entries",Symbol.iterator].forEach(i=>{t[i]=Cc(i,e,n)}),t}function Ao(e,n){const t=Pc(e,n);return(o,i,r)=>i==="__v_isReactive"?!e:i==="__v_isReadonly"?e:i==="__v_raw"?o:Reflect.get(oe(t,i)&&i in o?t:o,i,r)}const Fc={get:Ao(!1,!1)},kc={get:Ao(!1,!0)},Sc={get:Ao(!0,!1)},_c={get:Ao(!0,!0)},Cs=new WeakMap,Ps=new WeakMap,Fs=new WeakMap,ks=new WeakMap;function zc(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Tc(e){return e.__v_skip||!Object.isExtensible(e)?0:zc(Ql(e))}function Eo(e){return Un(e)?e:No(e,!1,xc,Fc,Cs)}function Ss(e){return No(e,!1,bc,kc,Ps)}function _s(e){return No(e,!0,yc,Sc,Fs)}function Vh(e){return No(e,!0,wc,_c,ks)}function No(e,n,t,o,i){if(!me(e)||e.__v_raw&&!(n&&e.__v_isReactive))return e;const r=i.get(e);if(r)return r;const a=Tc(e);if(a===0)return e;const s=new Proxy(e,a===2?o:t);return i.set(e,s),s}function ot(e){return Un(e)?ot(e.__v_raw):!!(e&&e.__v_isReactive)}function Un(e){return!!(e&&e.__v_isReadonly)}function qe(e){return!!(e&&e.__v_isShallow)}function $i(e){return e?!!e.__v_raw:!1}function Q(e){const n=e&&e.__v_raw;return n?Q(n):e}function Rc(e){return!oe(e,"__v_skip")&&Object.isExtensible(e)&&rs(e,"__v_skip",!0),e}const _e=e=>me(e)?Eo(e):e,pi=e=>me(e)?_s(e):e;function Fe(e){return e?e.__v_isRef===!0:!1}function Hi(e){return zs(e,!1)}function Mc(e){return zs(e,!0)}function zs(e,n){return Fe(e)?e:new Dc(e,n)}class Dc{constructor(n,t){this.dep=new Vo,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=t?n:Q(n),this._value=t?n:_e(n),this.__v_isShallow=t}get value(){return this.dep.track(),this._value}set value(n){const t=this._rawValue,o=this.__v_isShallow||qe(n)||Un(n);n=o?n:Q(n),_n(n,t)&&(this._rawValue=n,this._value=o?n:_e(n),this.dep.trigger())}}function Bn(e){return Fe(e)?e.value:e}function jh(e){return H(e)?e():Bn(e)}const Vc={get:(e,n,t)=>n==="__v_raw"?e:Bn(Reflect.get(e,n,t)),set:(e,n,t,o)=>{const i=e[n];return Fe(i)&&!Fe(t)?(i.value=t,!0):Reflect.set(e,n,t,o)}};function Ts(e){return ot(e)?e:new Proxy(e,Vc)}class jc{constructor(n){this.__v_isRef=!0,this._value=void 0;const t=this.dep=new Vo,{get:o,set:i}=n(t.track.bind(t),t.trigger.bind(t));this._get=o,this._set=i}get value(){return this._value=this._get()}set value(n){this._set(n)}}function Ah(e){return new jc(e)}function Eh(e){const n=U(e)?new Array(e.length):{};for(const t in e)n[t]=Rs(e,t);return n}class Ac{constructor(n,t,o){this._object=n,this._key=t,this._defaultValue=o,this.__v_isRef=!0,this._value=void 0}get value(){const n=this._object[this._key];return this._value=n===void 0?this._defaultValue:n}set value(n){this._object[this._key]=n}get dep(){return uc(Q(this._object),this._key)}}class Ec{constructor(n){this._getter=n,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function Nh(e,n,t){return Fe(e)?e:H(e)?new Ec(e):me(e)&&arguments.length>1?Rs(e,n,t):Hi(e)}function Rs(e,n,t){const o=e[n];return Fe(o)?o:new Ac(e,n,t)}class Nc{constructor(n,t,o){this.fn=n,this.setter=t,this._value=void 0,this.dep=new Vo(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=Mt-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!t,this.isSSR=o}notify(){if(this.flags|=16,!(this.flags&8)&&ve!==this)return vs(this,!0),!0}get value(){const n=this.dep.track();return gs(this),n&&(n.version=this.dep.version),this._value}set value(n){this.setter&&this.setter(n)}}function Ic(e,n,t=!1){let o,i;return H(e)?o=e:(o=e.get,i=e.set),new Nc(o,i,t)}const Zt={},po=new WeakMap;let En;function Lc(e,n=!1,t=En){if(t){let o=po.get(t);o||po.set(t,o=[]),o.push(e)}}function Bc(e,n,t=de){const{immediate:o,deep:i,once:r,scheduler:a,augmentJob:s,call:l}=t,c=T=>i?T:qe(T)||i===!1||i===0?hn(T,1):hn(T);let f,d,u,g,p=!1,x=!1;if(Fe(e)?(d=()=>e.value,p=qe(e)):ot(e)?(d=()=>c(e),p=!0):U(e)?(x=!0,p=e.some(T=>ot(T)||qe(T)),d=()=>e.map(T=>{if(Fe(T))return T.value;if(ot(T))return c(T);if(H(T))return l?l(T,2):T()})):H(e)?n?d=l?()=>l(e,2):e:d=()=>{if(u){Rn();try{u()}finally{Mn()}}const T=En;En=f;try{return l?l(e,3,[g]):e(g)}finally{En=T}}:d=cn,n&&i){const T=d,B=i===!0?1/0:i;d=()=>hn(T(),B)}const D=dc(),k=()=>{f.stop(),D&&D.active&&Li(D.effects,f)};if(r&&n){const T=n;n=(...B)=>{T(...B),k()}}let S=x?new Array(e.length).fill(Zt):Zt;const F=T=>{if(!(!(f.flags&1)||!f.dirty&&!T))if(n){const B=f.run();if(i||p||(x?B.some((j,O)=>_n(j,S[O])):_n(B,S))){u&&u();const j=En;En=f;try{const O=[B,S===Zt?void 0:x&&S[0]===Zt?[]:S,g];l?l(n,3,O):n(...O),S=B}finally{En=j}}}else f.run()};return s&&s(F),f=new ds(d),f.scheduler=a?()=>a(F,!1):F,g=T=>Lc(T,!1,f),u=f.onStop=()=>{const T=po.get(f);if(T){if(l)l(T,4);else for(const B of T)B();po.delete(f)}},n?o?F(!0):S=f.run():a?a(F.bind(null,!0),!0):f.run(),k.pause=f.pause.bind(f),k.resume=f.resume.bind(f),k.stop=k,k}function hn(e,n=1/0,t){if(n<=0||!me(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),n--,Fe(e))hn(e.value,n,t);else if(U(e))for(let o=0;o<e.length;o++)hn(e[o],n,t);else if(ns(e)||tt(e))e.forEach(o=>{hn(o,n,t)});else if(is(e)){for(const o in e)hn(e[o],n,t);for(const o of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,o)&&hn(e[o],n,t)}return e}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function qt(e,n,t,o){try{return o?e(...o):e()}catch(i){Io(i,n,t)}}function Je(e,n,t,o){if(H(e)){const i=qt(e,n,t,o);return i&&ts(i)&&i.catch(r=>{Io(r,n,t)}),i}if(U(e)){const i=[];for(let r=0;r<e.length;r++)i.push(Je(e[r],n,t,o));return i}}function Io(e,n,t,o=!0){const i=n?n.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:a}=n&&n.appContext.config||de;if(n){let s=n.parent;const l=n.proxy,c=`https://vuejs.org/error-reference/#runtime-${t}`;for(;s;){const f=s.ec;if(f){for(let d=0;d<f.length;d++)if(f[d](e,l,c)===!1)return}s=s.parent}if(r){Rn(),qt(r,null,10,[e,l,c]),Mn();return}}Oc(e,t,i,o,a)}function Oc(e,n,t,o=!0,i=!1){if(i)throw e;console.error(e)}const Me=[];let sn=-1;const it=[];let Pn=null,Wn=0;const Ms=Promise.resolve();let xo=null;function rt(e){const n=xo||Ms;return e?n.then(this?e.bind(this):e):n}function Gc(e){let n=sn+1,t=Me.length;for(;n<t;){const o=n+t>>>1,i=Me[o],r=Vt(i);r<e||r===e&&i.flags&2?n=o+1:t=o}return n}function qi(e){if(!(e.flags&1)){const n=Vt(e),t=Me[Me.length-1];!t||!(e.flags&2)&&n>=Vt(t)?Me.push(e):Me.splice(Gc(n),0,e),e.flags|=1,Ds()}}function Ds(){xo||(xo=Ms.then(js))}function Uc(e){U(e)?it.push(...e):Pn&&e.id===-1?Pn.splice(Wn+1,0,e):e.flags&1||(it.push(e),e.flags|=1),Ds()}function mr(e,n,t=sn+1){for(;t<Me.length;t++){const o=Me[t];if(o&&o.flags&2){if(e&&o.id!==e.uid)continue;Me.splice(t,1),t--,o.flags&4&&(o.flags&=-2),o(),o.flags&4||(o.flags&=-2)}}}function Vs(e){if(it.length){const n=[...new Set(it)].sort((t,o)=>Vt(t)-Vt(o));if(it.length=0,Pn){Pn.push(...n);return}for(Pn=n,Wn=0;Wn<Pn.length;Wn++){const t=Pn[Wn];t.flags&4&&(t.flags&=-2),t.flags&8||t(),t.flags&=-2}Pn=null,Wn=0}}const Vt=e=>e.id==null?e.flags&2?-1:1/0:e.id;function js(e){try{for(sn=0;sn<Me.length;sn++){const n=Me[sn];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),qt(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;sn<Me.length;sn++){const n=Me[sn];n&&(n.flags&=-2)}sn=-1,Me.length=0,Vs(),xo=null,(Me.length||it.length)&&js()}}let we=null,As=null;function yo(e){const n=we;return we=e,As=e&&e.type.__scopeId||null,n}function $c(e,n=we,t){if(!n||e._n)return e;const o=(...i)=>{o._d&&_r(-1);const r=yo(n);let a;try{a=e(...i)}finally{yo(r),o._d&&_r(1)}return a};return o._n=!0,o._c=!0,o._d=!0,o}function Ih(e,n){if(we===null)return e;const t=$o(we),o=e.dirs||(e.dirs=[]);for(let i=0;i<n.length;i++){let[r,a,s,l=de]=n[i];r&&(H(r)&&(r={mounted:r,updated:r}),r.deep&&hn(a),o.push({dir:r,instance:t,value:a,oldValue:void 0,arg:s,modifiers:l}))}return e}function Dn(e,n,t,o){const i=e.dirs,r=n&&n.dirs;for(let a=0;a<i.length;a++){const s=i[a];r&&(s.oldValue=r[a].value);let l=s.dir[o];l&&(Rn(),Je(l,t,8,[e.el,s,e,n]),Mn())}}const Es=Symbol("_vte"),Ns=e=>e.__isTeleport,kt=e=>e&&(e.disabled||e.disabled===""),gr=e=>e&&(e.defer||e.defer===""),hr=e=>typeof SVGElement<"u"&&e instanceof SVGElement,pr=e=>typeof MathMLElement=="function"&&e instanceof MathMLElement,xi=(e,n)=>{const t=e&&e.to;return he(t)?n?n(t):null:t},Is={name:"Teleport",__isTeleport:!0,process(e,n,t,o,i,r,a,s,l,c){const{mc:f,pc:d,pbc:u,o:{insert:g,querySelector:p,createText:x,createComment:D}}=c,k=kt(n.props);let{shapeFlag:S,children:F,dynamicChildren:T}=n;if(e==null){const B=n.el=x(""),j=n.anchor=x("");g(B,t,o),g(j,t,o);const O=(E,$)=>{S&16&&(i&&i.isCE&&(i.ce._teleportTarget=E),f(F,E,$,i,r,a,s,l))},K=()=>{const E=n.target=xi(n.props,p),$=Ls(E,n,x,g);E&&(a!=="svg"&&hr(E)?a="svg":a!=="mathml"&&pr(E)&&(a="mathml"),k||(O(E,$),ao(n,!1)))};k&&(O(t,j),ao(n,!0)),gr(n.props)?Te(()=>{K(),n.el.__isMounted=!0},r):K()}else{if(gr(n.props)&&!e.el.__isMounted){Te(()=>{Is.process(e,n,t,o,i,r,a,s,l,c),delete e.el.__isMounted},r);return}n.el=e.el,n.targetStart=e.targetStart;const B=n.anchor=e.anchor,j=n.target=e.target,O=n.targetAnchor=e.targetAnchor,K=kt(e.props),E=K?t:j,$=K?B:O;if(a==="svg"||hr(j)?a="svg":(a==="mathml"||pr(j))&&(a="mathml"),T?(u(e.dynamicChildren,T,E,i,r,a,s),Ji(e,n,!0)):l||d(e,n,E,$,i,r,a,s,!1),k)K?n.props&&e.props&&n.props.to!==e.props.to&&(n.props.to=e.props.to):Qt(n,t,B,c,1);else if((n.props&&n.props.to)!==(e.props&&e.props.to)){const ie=n.target=xi(n.props,p);ie&&Qt(n,ie,null,c,0)}else K&&Qt(n,j,O,c,1);ao(n,k)}},remove(e,n,t,{um:o,o:{remove:i}},r){const{shapeFlag:a,children:s,anchor:l,targetStart:c,targetAnchor:f,target:d,props:u}=e;if(d&&(i(c),i(f)),r&&i(l),a&16){const g=r||!kt(u);for(let p=0;p<s.length;p++){const x=s[p];o(x,n,t,g,!!x.dynamicChildren)}}},move:Qt,hydrate:Hc};function Qt(e,n,t,{o:{insert:o},m:i},r=2){r===0&&o(e.targetAnchor,n,t);const{el:a,anchor:s,shapeFlag:l,children:c,props:f}=e,d=r===2;if(d&&o(a,n,t),(!d||kt(f))&&l&16)for(let u=0;u<c.length;u++)i(c[u],n,t,2);d&&o(s,n,t)}function Hc(e,n,t,o,i,r,{o:{nextSibling:a,parentNode:s,querySelector:l,insert:c,createText:f}},d){const u=n.target=xi(n.props,l);if(u){const g=kt(n.props),p=u._lpa||u.firstChild;if(n.shapeFlag&16)if(g)n.anchor=d(a(e),n,s(e),t,o,i,r),n.targetStart=p,n.targetAnchor=p&&a(p);else{n.anchor=a(e);let x=p;for(;x;){if(x&&x.nodeType===8){if(x.data==="teleport start anchor")n.targetStart=x;else if(x.data==="teleport anchor"){n.targetAnchor=x,u._lpa=n.targetAnchor&&a(n.targetAnchor);break}}x=a(x)}n.targetAnchor||Ls(u,n,f,c),d(p&&a(p),n,u,t,o,i,r)}ao(n,g)}return n.anchor&&a(n.anchor)}const Lh=Is;function ao(e,n){const t=e.ctx;if(t&&t.ut){let o,i;for(n?(o=e.el,i=e.anchor):(o=e.targetStart,i=e.targetAnchor);o&&o!==i;)o.nodeType===1&&o.setAttribute("data-v-owner",t.uid),o=o.nextSibling;t.ut()}}function Ls(e,n,t,o){const i=n.targetStart=t(""),r=n.targetAnchor=t("");return i[Es]=r,e&&(o(i,e),o(r,e)),r}const Fn=Symbol("_leaveCb"),Jt=Symbol("_enterCb");function qc(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Yi(()=>{e.isMounted=!0}),Xs(()=>{e.isUnmounting=!0}),e}const Ue=[Function,Array],Bs={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ue,onEnter:Ue,onAfterEnter:Ue,onEnterCancelled:Ue,onBeforeLeave:Ue,onLeave:Ue,onAfterLeave:Ue,onLeaveCancelled:Ue,onBeforeAppear:Ue,onAppear:Ue,onAfterAppear:Ue,onAppearCancelled:Ue},Os=e=>{const n=e.subTree;return n.component?Os(n.component):n},Xc={name:"BaseTransition",props:Bs,setup(e,{slots:n}){const t=nr(),o=qc();return()=>{const i=n.default&&$s(n.default(),!0);if(!i||!i.length)return;const r=Gs(i),a=Q(e),{mode:s}=a;if(o.isLeaving)return ti(r);const l=xr(r);if(!l)return ti(r);let c=yi(l,a,o,t,d=>c=d);l.type!==De&&jt(l,c);let f=t.subTree&&xr(t.subTree);if(f&&f.type!==De&&!Nn(l,f)&&Os(t).type!==De){let d=yi(f,a,o,t);if(jt(f,d),s==="out-in"&&l.type!==De)return o.isLeaving=!0,d.afterLeave=()=>{o.isLeaving=!1,t.job.flags&8||t.update(),delete d.afterLeave,f=void 0},ti(r);s==="in-out"&&l.type!==De?d.delayLeave=(u,g,p)=>{const x=Us(o,f);x[String(f.key)]=f,u[Fn]=()=>{g(),u[Fn]=void 0,delete c.delayedLeave,f=void 0},c.delayedLeave=()=>{p(),delete c.delayedLeave,f=void 0}}:f=void 0}else f&&(f=void 0);return r}}};function Gs(e){let n=e[0];if(e.length>1){for(const t of e)if(t.type!==De){n=t;break}}return n}const Yc=Xc;function Us(e,n){const{leavingVNodes:t}=e;let o=t.get(n.type);return o||(o=Object.create(null),t.set(n.type,o)),o}function yi(e,n,t,o,i){const{appear:r,mode:a,persisted:s=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:f,onEnterCancelled:d,onBeforeLeave:u,onLeave:g,onAfterLeave:p,onLeaveCancelled:x,onBeforeAppear:D,onAppear:k,onAfterAppear:S,onAppearCancelled:F}=n,T=String(e.key),B=Us(t,e),j=(E,$)=>{E&&Je(E,o,9,$)},O=(E,$)=>{const ie=$[1];j(E,$),U(E)?E.every(N=>N.length<=1)&&ie():E.length<=1&&ie()},K={mode:a,persisted:s,beforeEnter(E){let $=l;if(!t.isMounted)if(r)$=D||l;else return;E[Fn]&&E[Fn](!0);const ie=B[T];ie&&Nn(e,ie)&&ie.el[Fn]&&ie.el[Fn](),j($,[E])},enter(E){let $=c,ie=f,N=d;if(!t.isMounted)if(r)$=k||c,ie=S||f,N=F||d;else return;let ee=!1;const Ce=E[Jt]=Ee=>{ee||(ee=!0,Ee?j(N,[E]):j(ie,[E]),K.delayedLeave&&K.delayedLeave(),E[Jt]=void 0)};$?O($,[E,Ce]):Ce()},leave(E,$){const ie=String(e.key);if(E[Jt]&&E[Jt](!0),t.isUnmounting)return $();j(u,[E]);let N=!1;const ee=E[Fn]=Ce=>{N||(N=!0,$(),Ce?j(x,[E]):j(p,[E]),E[Fn]=void 0,B[ie]===e&&delete B[ie])};B[ie]=e,g?O(g,[E,ee]):ee()},clone(E){const $=yi(E,n,t,o,i);return i&&i($),$}};return K}function ti(e){if(Lo(e))return e=Tn(e),e.children=null,e}function xr(e){if(!Lo(e))return Ns(e.type)&&e.children?Gs(e.children):e;const{shapeFlag:n,children:t}=e;if(t){if(n&16)return t[0];if(n&32&&H(t.default))return t.default()}}function jt(e,n){e.shapeFlag&6&&e.component?(e.transition=n,jt(e.component.subTree,n)):e.shapeFlag&128?(e.ssContent.transition=n.clone(e.ssContent),e.ssFallback.transition=n.clone(e.ssFallback)):e.transition=n}function $s(e,n=!1,t){let o=[],i=0;for(let r=0;r<e.length;r++){let a=e[r];const s=t==null?a.key:String(t)+String(a.key!=null?a.key:r);a.type===Le?(a.patchFlag&128&&i++,o=o.concat($s(a.children,n,s))):(n||a.type!==De)&&o.push(s!=null?Tn(a,{key:s}):a)}if(i>1)for(let r=0;r<o.length;r++)o[r].patchFlag=-2;return o}/*! #__NO_SIDE_EFFECTS__ */function Xi(e,n){return H(e)?ke({name:e.name},n,{setup:e}):e}function Bh(){const e=nr();return e?(e.appContext.config.idPrefix||"v")+"-"+e.ids[0]+e.ids[1]++:""}function Hs(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}function bo(e,n,t,o,i=!1){if(U(e)){e.forEach((p,x)=>bo(p,n&&(U(n)?n[x]:n),t,o,i));return}if(at(o)&&!i){o.shapeFlag&512&&o.type.__asyncResolved&&o.component.subTree.component&&bo(e,n,t,o.component.subTree);return}const r=o.shapeFlag&4?$o(o.component):o.el,a=i?null:r,{i:s,r:l}=e,c=n&&n.r,f=s.refs===de?s.refs={}:s.refs,d=s.setupState,u=Q(d),g=d===de?()=>!1:p=>oe(u,p);if(c!=null&&c!==l&&(he(c)?(f[c]=null,g(c)&&(d[c]=null)):Fe(c)&&(c.value=null)),H(l))qt(l,s,12,[a,f]);else{const p=he(l),x=Fe(l);if(p||x){const D=()=>{if(e.f){const k=p?g(l)?d[l]:f[l]:l.value;i?U(k)&&Li(k,r):U(k)?k.includes(r)||k.push(r):p?(f[l]=[r],g(l)&&(d[l]=f[l])):(l.value=[r],e.k&&(f[e.k]=l.value))}else p?(f[l]=a,g(l)&&(d[l]=a)):x&&(l.value=a,e.k&&(f[e.k]=a))};a?(D.id=-1,Te(D,t)):D()}}}Ro().requestIdleCallback;Ro().cancelIdleCallback;const at=e=>!!e.type.__asyncLoader,Lo=e=>e.type.__isKeepAlive;function Wc(e,n){qs(e,"a",n)}function Kc(e,n){qs(e,"da",n)}function qs(e,n,t=Pe){const o=e.__wdc||(e.__wdc=()=>{let i=t;for(;i;){if(i.isDeactivated)return;i=i.parent}return e()});if(Bo(n,o,t),t){let i=t.parent;for(;i&&i.parent;)Lo(i.parent.vnode)&&Zc(o,n,t,i),i=i.parent}}function Zc(e,n,t,o){const i=Bo(n,e,o,!0);Wi(()=>{Li(o[n],i)},t)}function Bo(e,n,t=Pe,o=!1){if(t){const i=t[e]||(t[e]=[]),r=n.__weh||(n.__weh=(...a)=>{Rn();const s=Xt(t),l=Je(n,t,e,a);return s(),Mn(),l});return o?i.unshift(r):i.push(r),r}}const yn=e=>(n,t=Pe)=>{(!It||e==="sp")&&Bo(e,(...o)=>n(...o),t)},Qc=yn("bm"),Yi=yn("m"),Jc=yn("bu"),ed=yn("u"),Xs=yn("bum"),Wi=yn("um"),nd=yn("sp"),td=yn("rtg"),od=yn("rtc");function id(e,n=Pe){Bo("ec",e,n)}const Ki="components",rd="directives";function ad(e,n){return Zi(Ki,e,!0,n)||e}const Ys=Symbol.for("v-ndc");function Oh(e){return he(e)?Zi(Ki,e,!1)||e:e||Ys}function Gh(e){return Zi(rd,e)}function Zi(e,n,t=!0,o=!1){const i=we||Pe;if(i){const r=i.type;if(e===Ki){const s=Wd(r,!1);if(s&&(s===n||s===Xe(n)||s===To(Xe(n))))return r}const a=yr(i[e]||r[e],n)||yr(i.appContext[e],n);return!a&&o?r:a}}function yr(e,n){return e&&(e[n]||e[Xe(n)]||e[To(Xe(n))])}function Uh(e,n,t,o){let i;const r=t,a=U(e);if(a||he(e)){const s=a&&ot(e);let l=!1;s&&(l=!qe(e),e=jo(e)),i=new Array(e.length);for(let c=0,f=e.length;c<f;c++)i[c]=n(l?_e(e[c]):e[c],c,void 0,r)}else if(typeof e=="number"){i=new Array(e);for(let s=0;s<e;s++)i[s]=n(s+1,s,void 0,r)}else if(me(e))if(e[Symbol.iterator])i=Array.from(e,(s,l)=>n(s,l,void 0,r));else{const s=Object.keys(e);i=new Array(s.length);for(let l=0,c=s.length;l<c;l++){const f=s[l];i[l]=n(e[f],f,l,r)}}else i=[];return i}function sd(e,n,t={},o,i){if(we.ce||we.parent&&at(we.parent)&&we.parent.ce)return At(),Co(Le,null,[Ve("slot",t,o&&o())],64);let r=e[n];r&&r._c&&(r._d=!1),At();const a=r&&Ws(r(t)),s=t.key||a&&a.key,l=Co(Le,{key:(s&&!xn(s)?s:`_${n}`)+(!a&&o?"_fb":"")},a||(o?o():[]),a&&e._===1?64:-2);return l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),r&&r._c&&(r._d=!0),l}function Ws(e){return e.some(n=>Nt(n)?!(n.type===De||n.type===Le&&!Ws(n.children)):!0)?e:null}function $h(e,n){const t={};for(const o in e)t[ro(o)]=e[o];return t}const bi=e=>e?gl(e)?$o(e):bi(e.parent):null,St=ke(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>bi(e.parent),$root:e=>bi(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>Zs(e),$forceUpdate:e=>e.f||(e.f=()=>{qi(e.update)}),$nextTick:e=>e.n||(e.n=rt.bind(e.proxy)),$watch:e=>Td.bind(e)}),oi=(e,n)=>e!==de&&!e.__isScriptSetup&&oe(e,n),ld={get({_:e},n){if(n==="__v_skip")return!0;const{ctx:t,setupState:o,data:i,props:r,accessCache:a,type:s,appContext:l}=e;let c;if(n[0]!=="$"){const g=a[n];if(g!==void 0)switch(g){case 1:return o[n];case 2:return i[n];case 4:return t[n];case 3:return r[n]}else{if(oi(o,n))return a[n]=1,o[n];if(i!==de&&oe(i,n))return a[n]=2,i[n];if((c=e.propsOptions[0])&&oe(c,n))return a[n]=3,r[n];if(t!==de&&oe(t,n))return a[n]=4,t[n];Ci&&(a[n]=0)}}const f=St[n];let d,u;if(f)return n==="$attrs"&&Se(e.attrs,"get",""),f(e);if((d=s.__cssModules)&&(d=d[n]))return d;if(t!==de&&oe(t,n))return a[n]=4,t[n];if(u=l.config.globalProperties,oe(u,n))return u[n]},set({_:e},n,t){const{data:o,setupState:i,ctx:r}=e;return oi(i,n)?(i[n]=t,!0):o!==de&&oe(o,n)?(o[n]=t,!0):oe(e.props,n)||n[0]==="$"&&n.slice(1)in e?!1:(r[n]=t,!0)},has({_:{data:e,setupState:n,accessCache:t,ctx:o,appContext:i,propsOptions:r}},a){let s;return!!t[a]||e!==de&&oe(e,a)||oi(n,a)||(s=r[0])&&oe(s,a)||oe(o,a)||oe(St,a)||oe(i.config.globalProperties,a)},defineProperty(e,n,t){return t.get!=null?e._.accessCache[n]=0:oe(t,"value")&&this.set(e,n,t.value,null),Reflect.defineProperty(e,n,t)}};function Hh(){return cd().slots}function cd(){const e=nr();return e.setupContext||(e.setupContext=pl(e))}function wi(e){return U(e)?e.reduce((n,t)=>(n[t]=null,n),{}):e}function qh(e,n){const t=wi(e);for(const o in n){if(o.startsWith("__skip"))continue;let i=t[o];i?U(i)||H(i)?i=t[o]={type:i,default:n[o]}:i.default=n[o]:i===null&&(i=t[o]={default:n[o]}),i&&n[`__skip_${o}`]&&(i.skipFactory=!0)}return t}let Ci=!0;function dd(e){const n=Zs(e),t=e.proxy,o=e.ctx;Ci=!1,n.beforeCreate&&br(n.beforeCreate,e,"bc");const{data:i,computed:r,methods:a,watch:s,provide:l,inject:c,created:f,beforeMount:d,mounted:u,beforeUpdate:g,updated:p,activated:x,deactivated:D,beforeDestroy:k,beforeUnmount:S,destroyed:F,unmounted:T,render:B,renderTracked:j,renderTriggered:O,errorCaptured:K,serverPrefetch:E,expose:$,inheritAttrs:ie,components:N,directives:ee,filters:Ce}=n;if(c&&fd(c,o,null),a)for(const ae in a){const ne=a[ae];H(ne)&&(o[ae]=ne.bind(t))}if(i){const ae=i.call(t,t);me(ae)&&(e.data=Eo(ae))}if(Ci=!0,r)for(const ae in r){const ne=r[ae],dn=H(ne)?ne.bind(t,t):H(ne.get)?ne.get.bind(t,t):cn,bn=!H(ne)&&H(ne.set)?ne.set.bind(t):cn,nn=We({get:dn,set:bn});Object.defineProperty(o,ae,{enumerable:!0,configurable:!0,get:()=>nn.value,set:je=>nn.value=je})}if(s)for(const ae in s)Ks(s[ae],o,t,ae);if(l){const ae=H(l)?l.call(t):l;Reflect.ownKeys(ae).forEach(ne=>{so(ne,ae[ne])})}f&&br(f,e,"c");function ye(ae,ne){U(ne)?ne.forEach(dn=>ae(dn.bind(t))):ne&&ae(ne.bind(t))}if(ye(Qc,d),ye(Yi,u),ye(Jc,g),ye(ed,p),ye(Wc,x),ye(Kc,D),ye(id,K),ye(od,j),ye(td,O),ye(Xs,S),ye(Wi,T),ye(nd,E),U($))if($.length){const ae=e.exposed||(e.exposed={});$.forEach(ne=>{Object.defineProperty(ae,ne,{get:()=>t[ne],set:dn=>t[ne]=dn})})}else e.exposed||(e.exposed={});B&&e.render===cn&&(e.render=B),ie!=null&&(e.inheritAttrs=ie),N&&(e.components=N),ee&&(e.directives=ee),E&&Hs(e)}function fd(e,n,t=cn){U(e)&&(e=Pi(e));for(const o in e){const i=e[o];let r;me(i)?"default"in i?r=Qe(i.from||o,i.default,!0):r=Qe(i.from||o):r=Qe(i),Fe(r)?Object.defineProperty(n,o,{enumerable:!0,configurable:!0,get:()=>r.value,set:a=>r.value=a}):n[o]=r}}function br(e,n,t){Je(U(e)?e.map(o=>o.bind(n.proxy)):e.bind(n.proxy),n,t)}function Ks(e,n,t,o){let i=o.includes(".")?cl(t,o):()=>t[o];if(he(e)){const r=n[e];H(r)&&zn(i,r)}else if(H(e))zn(i,e.bind(t));else if(me(e))if(U(e))e.forEach(r=>Ks(r,n,t,o));else{const r=H(e.handler)?e.handler.bind(t):n[e.handler];H(r)&&zn(i,r,e)}}function Zs(e){const n=e.type,{mixins:t,extends:o}=n,{mixins:i,optionsCache:r,config:{optionMergeStrategies:a}}=e.appContext,s=r.get(n);let l;return s?l=s:!i.length&&!t&&!o?l=n:(l={},i.length&&i.forEach(c=>wo(l,c,a,!0)),wo(l,n,a)),me(n)&&r.set(n,l),l}function wo(e,n,t,o=!1){const{mixins:i,extends:r}=n;r&&wo(e,r,t,!0),i&&i.forEach(a=>wo(e,a,t,!0));for(const a in n)if(!(o&&a==="expose")){const s=vd[a]||t&&t[a];e[a]=s?s(e[a],n[a]):n[a]}return e}const vd={data:wr,props:Cr,emits:Cr,methods:bt,computed:bt,beforeCreate:ze,created:ze,beforeMount:ze,mounted:ze,beforeUpdate:ze,updated:ze,beforeDestroy:ze,beforeUnmount:ze,destroyed:ze,unmounted:ze,activated:ze,deactivated:ze,errorCaptured:ze,serverPrefetch:ze,components:bt,directives:bt,watch:md,provide:wr,inject:ud};function wr(e,n){return n?e?function(){return ke(H(e)?e.call(this,this):e,H(n)?n.call(this,this):n)}:n:e}function ud(e,n){return bt(Pi(e),Pi(n))}function Pi(e){if(U(e)){const n={};for(let t=0;t<e.length;t++)n[e[t]]=e[t];return n}return e}function ze(e,n){return e?[...new Set([].concat(e,n))]:n}function bt(e,n){return e?ke(Object.create(null),e,n):n}function Cr(e,n){return e?U(e)&&U(n)?[...new Set([...e,...n])]:ke(Object.create(null),wi(e),wi(n??{})):n}function md(e,n){if(!e)return n;if(!n)return e;const t=ke(Object.create(null),e);for(const o in n)t[o]=ze(e[o],n[o]);return t}function Qs(){return{app:null,config:{isNativeTag:Kl,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let gd=0;function hd(e,n){return function(o,i=null){H(o)||(o=ke({},o)),i!=null&&!me(i)&&(i=null);const r=Qs(),a=new WeakSet,s=[];let l=!1;const c=r.app={_uid:gd++,_component:o,_props:i,_container:null,_context:r,_instance:null,version:Zd,get config(){return r.config},set config(f){},use(f,...d){return a.has(f)||(f&&H(f.install)?(a.add(f),f.install(c,...d)):H(f)&&(a.add(f),f(c,...d))),c},mixin(f){return r.mixins.includes(f)||r.mixins.push(f),c},component(f,d){return d?(r.components[f]=d,c):r.components[f]},directive(f,d){return d?(r.directives[f]=d,c):r.directives[f]},mount(f,d,u){if(!l){const g=c._ceVNode||Ve(o,i);return g.appContext=r,u===!0?u="svg":u===!1&&(u=void 0),e(g,f,u),l=!0,c._container=f,f.__vue_app__=c,$o(g.component)}},onUnmount(f){s.push(f)},unmount(){l&&(Je(s,c._instance,16),e(null,c._container),delete c._container.__vue_app__)},provide(f,d){return r.provides[f]=d,c},runWithContext(f){const d=On;On=c;try{return f()}finally{On=d}}};return c}}let On=null;function so(e,n){if(Pe){let t=Pe.provides;const o=Pe.parent&&Pe.parent.provides;o===t&&(t=Pe.provides=Object.create(o)),t[e]=n}}function Qe(e,n,t=!1){const o=Pe||we;if(o||On){const i=On?On._context.provides:o?o.parent==null?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides:void 0;if(i&&e in i)return i[e];if(arguments.length>1)return t&&H(n)?n.call(o&&o.proxy):n}}function Xh(){return!!(Pe||we||On)}const Js={},el=()=>Object.create(Js),nl=e=>Object.getPrototypeOf(e)===Js;function pd(e,n,t,o=!1){const i={},r=el();e.propsDefaults=Object.create(null),tl(e,n,i,r);for(const a in e.propsOptions[0])a in i||(i[a]=void 0);t?e.props=o?i:Ss(i):e.type.props?e.props=i:e.props=r,e.attrs=r}function xd(e,n,t,o){const{props:i,attrs:r,vnode:{patchFlag:a}}=e,s=Q(i),[l]=e.propsOptions;let c=!1;if((o||a>0)&&!(a&16)){if(a&8){const f=e.vnode.dynamicProps;for(let d=0;d<f.length;d++){let u=f[d];if(Go(e.emitsOptions,u))continue;const g=n[u];if(l)if(oe(r,u))g!==r[u]&&(r[u]=g,c=!0);else{const p=Xe(u);i[p]=Fi(l,s,p,g,e,!1)}else g!==r[u]&&(r[u]=g,c=!0)}}}else{tl(e,n,i,r)&&(c=!0);let f;for(const d in s)(!n||!oe(n,d)&&((f=$n(d))===d||!oe(n,f)))&&(l?t&&(t[d]!==void 0||t[f]!==void 0)&&(i[d]=Fi(l,s,d,void 0,e,!0)):delete i[d]);if(r!==s)for(const d in r)(!n||!oe(n,d))&&(delete r[d],c=!0)}c&&gn(e.attrs,"set","")}function tl(e,n,t,o){const[i,r]=e.propsOptions;let a=!1,s;if(n)for(let l in n){if(Ct(l))continue;const c=n[l];let f;i&&oe(i,f=Xe(l))?!r||!r.includes(f)?t[f]=c:(s||(s={}))[f]=c:Go(e.emitsOptions,l)||(!(l in o)||c!==o[l])&&(o[l]=c,a=!0)}if(r){const l=Q(t),c=s||de;for(let f=0;f<r.length;f++){const d=r[f];t[d]=Fi(i,l,d,c[d],e,!oe(c,d))}}return a}function Fi(e,n,t,o,i,r){const a=e[t];if(a!=null){const s=oe(a,"default");if(s&&o===void 0){const l=a.default;if(a.type!==Function&&!a.skipFactory&&H(l)){const{propsDefaults:c}=i;if(t in c)o=c[t];else{const f=Xt(i);o=c[t]=l.call(null,n),f()}}else o=l;i.ce&&i.ce._setProp(t,o)}a[0]&&(r&&!s?o=!1:a[1]&&(o===""||o===$n(t))&&(o=!0))}return o}const yd=new WeakMap;function ol(e,n,t=!1){const o=t?yd:n.propsCache,i=o.get(e);if(i)return i;const r=e.props,a={},s=[];let l=!1;if(!H(e)){const f=d=>{l=!0;const[u,g]=ol(d,n,!0);ke(a,u),g&&s.push(...g)};!t&&n.mixins.length&&n.mixins.forEach(f),e.extends&&f(e.extends),e.mixins&&e.mixins.forEach(f)}if(!r&&!l)return me(e)&&o.set(e,nt),nt;if(U(r))for(let f=0;f<r.length;f++){const d=Xe(r[f]);Pr(d)&&(a[d]=de)}else if(r)for(const f in r){const d=Xe(f);if(Pr(d)){const u=r[f],g=a[d]=U(u)||H(u)?{type:u}:ke({},u),p=g.type;let x=!1,D=!0;if(U(p))for(let k=0;k<p.length;++k){const S=p[k],F=H(S)&&S.name;if(F==="Boolean"){x=!0;break}else F==="String"&&(D=!1)}else x=H(p)&&p.name==="Boolean";g[0]=x,g[1]=D,(x||oe(g,"default"))&&s.push(d)}}const c=[a,s];return me(e)&&o.set(e,c),c}function Pr(e){return e[0]!=="$"&&!Ct(e)}const il=e=>e[0]==="_"||e==="$stable",Qi=e=>U(e)?e.map(ln):[ln(e)],bd=(e,n,t)=>{if(n._n)return n;const o=$c((...i)=>Qi(n(...i)),t);return o._c=!1,o},rl=(e,n,t)=>{const o=e._ctx;for(const i in e){if(il(i))continue;const r=e[i];if(H(r))n[i]=bd(i,r,o);else if(r!=null){const a=Qi(r);n[i]=()=>a}}},al=(e,n)=>{const t=Qi(n);e.slots.default=()=>t},sl=(e,n,t)=>{for(const o in n)(t||o!=="_")&&(e[o]=n[o])},wd=(e,n,t)=>{const o=e.slots=el();if(e.vnode.shapeFlag&32){const i=n._;i?(sl(o,n,t),t&&rs(o,"_",i,!0)):rl(n,o)}else n&&al(e,n)},Cd=(e,n,t)=>{const{vnode:o,slots:i}=e;let r=!0,a=de;if(o.shapeFlag&32){const s=n._;s?t&&s===1?r=!1:sl(i,n,t):(r=!n.$stable,rl(n,i)),a=n}else n&&(al(e,n),a={default:1});if(r)for(const s in i)!il(s)&&a[s]==null&&delete i[s]},Te=Ed;function Pd(e){return Fd(e)}function Fd(e,n){const t=Ro();t.__VUE__=!0;const{insert:o,remove:i,patchProp:r,createElement:a,createText:s,createComment:l,setText:c,setElementText:f,parentNode:d,nextSibling:u,setScopeId:g=cn,insertStaticContent:p}=e,x=(v,m,h,y=null,C=null,w=null,R=void 0,z=null,_=!!m.dynamicChildren)=>{if(v===m)return;v&&!Nn(v,m)&&(y=b(v),je(v,C,w,!0),v=null),m.patchFlag===-2&&(_=!1,m.dynamicChildren=null);const{type:P,ref:G,shapeFlag:V}=m;switch(P){case Uo:D(v,m,h,y);break;case De:k(v,m,h,y);break;case lo:v==null&&S(m,h,y,R);break;case Le:N(v,m,h,y,C,w,R,z,_);break;default:V&1?B(v,m,h,y,C,w,R,z,_):V&6?ee(v,m,h,y,C,w,R,z,_):(V&64||V&128)&&P.process(v,m,h,y,C,w,R,z,_,I)}G!=null&&C&&bo(G,v&&v.ref,w,m||v,!m)},D=(v,m,h,y)=>{if(v==null)o(m.el=s(m.children),h,y);else{const C=m.el=v.el;m.children!==v.children&&c(C,m.children)}},k=(v,m,h,y)=>{v==null?o(m.el=l(m.children||""),h,y):m.el=v.el},S=(v,m,h,y)=>{[v.el,v.anchor]=p(v.children,m,h,y,v.el,v.anchor)},F=({el:v,anchor:m},h,y)=>{let C;for(;v&&v!==m;)C=u(v),o(v,h,y),v=C;o(m,h,y)},T=({el:v,anchor:m})=>{let h;for(;v&&v!==m;)h=u(v),i(v),v=h;i(m)},B=(v,m,h,y,C,w,R,z,_)=>{m.type==="svg"?R="svg":m.type==="math"&&(R="mathml"),v==null?j(m,h,y,C,w,R,z,_):E(v,m,C,w,R,z,_)},j=(v,m,h,y,C,w,R,z)=>{let _,P;const{props:G,shapeFlag:V,transition:L,dirs:X}=v;if(_=v.el=a(v.type,w,G&&G.is,G),V&8?f(_,v.children):V&16&&K(v.children,_,null,y,C,ii(v,w),R,z),X&&Dn(v,null,y,"created"),O(_,v,v.scopeId,R,y),G){for(const fe in G)fe!=="value"&&!Ct(fe)&&r(_,fe,null,G[fe],w,y);"value"in G&&r(_,"value",null,G.value,w),(P=G.onVnodeBeforeMount)&&an(P,y,v)}X&&Dn(v,null,y,"beforeMount");const Z=kd(C,L);Z&&L.beforeEnter(_),o(_,m,h),((P=G&&G.onVnodeMounted)||Z||X)&&Te(()=>{P&&an(P,y,v),Z&&L.enter(_),X&&Dn(v,null,y,"mounted")},C)},O=(v,m,h,y,C)=>{if(h&&g(v,h),y)for(let w=0;w<y.length;w++)g(v,y[w]);if(C){let w=C.subTree;if(m===w||fl(w.type)&&(w.ssContent===m||w.ssFallback===m)){const R=C.vnode;O(v,R,R.scopeId,R.slotScopeIds,C.parent)}}},K=(v,m,h,y,C,w,R,z,_=0)=>{for(let P=_;P<v.length;P++){const G=v[P]=z?kn(v[P]):ln(v[P]);x(null,G,m,h,y,C,w,R,z)}},E=(v,m,h,y,C,w,R)=>{const z=m.el=v.el;let{patchFlag:_,dynamicChildren:P,dirs:G}=m;_|=v.patchFlag&16;const V=v.props||de,L=m.props||de;let X;if(h&&Vn(h,!1),(X=L.onVnodeBeforeUpdate)&&an(X,h,m,v),G&&Dn(m,v,h,"beforeUpdate"),h&&Vn(h,!0),(V.innerHTML&&L.innerHTML==null||V.textContent&&L.textContent==null)&&f(z,""),P?$(v.dynamicChildren,P,z,h,y,ii(m,C),w):R||ne(v,m,z,null,h,y,ii(m,C),w,!1),_>0){if(_&16)ie(z,V,L,h,C);else if(_&2&&V.class!==L.class&&r(z,"class",null,L.class,C),_&4&&r(z,"style",V.style,L.style,C),_&8){const Z=m.dynamicProps;for(let fe=0;fe<Z.length;fe++){const re=Z[fe],Ne=V[re],Ae=L[re];(Ae!==Ne||re==="value")&&r(z,re,Ne,Ae,C,h)}}_&1&&v.children!==m.children&&f(z,m.children)}else!R&&P==null&&ie(z,V,L,h,C);((X=L.onVnodeUpdated)||G)&&Te(()=>{X&&an(X,h,m,v),G&&Dn(m,v,h,"updated")},y)},$=(v,m,h,y,C,w,R)=>{for(let z=0;z<m.length;z++){const _=v[z],P=m[z],G=_.el&&(_.type===Le||!Nn(_,P)||_.shapeFlag&70)?d(_.el):h;x(_,P,G,null,y,C,w,R,!0)}},ie=(v,m,h,y,C)=>{if(m!==h){if(m!==de)for(const w in m)!Ct(w)&&!(w in h)&&r(v,w,m[w],null,C,y);for(const w in h){if(Ct(w))continue;const R=h[w],z=m[w];R!==z&&w!=="value"&&r(v,w,z,R,C,y)}"value"in h&&r(v,"value",m.value,h.value,C)}},N=(v,m,h,y,C,w,R,z,_)=>{const P=m.el=v?v.el:s(""),G=m.anchor=v?v.anchor:s("");let{patchFlag:V,dynamicChildren:L,slotScopeIds:X}=m;X&&(z=z?z.concat(X):X),v==null?(o(P,h,y),o(G,h,y),K(m.children||[],h,G,C,w,R,z,_)):V>0&&V&64&&L&&v.dynamicChildren?($(v.dynamicChildren,L,h,C,w,R,z),(m.key!=null||C&&m===C.subTree)&&Ji(v,m,!0)):ne(v,m,h,G,C,w,R,z,_)},ee=(v,m,h,y,C,w,R,z,_)=>{m.slotScopeIds=z,v==null?m.shapeFlag&512?C.ctx.activate(m,h,y,R,_):Ce(m,h,y,C,w,R,_):Ee(v,m,_)},Ce=(v,m,h,y,C,w,R)=>{const z=v.component=Hd(v,y,C);if(Lo(v)&&(z.ctx.renderer=I),qd(z,!1,R),z.asyncDep){if(C&&C.registerDep(z,ye,R),!v.el){const _=z.subTree=Ve(De);k(null,_,m,h)}}else ye(z,v,m,h,C,w,R)},Ee=(v,m,h)=>{const y=m.component=v.component;if(jd(v,m,h))if(y.asyncDep&&!y.asyncResolved){ae(y,m,h);return}else y.next=m,y.update();else m.el=v.el,y.vnode=m},ye=(v,m,h,y,C,w,R)=>{const z=()=>{if(v.isMounted){let{next:V,bu:L,u:X,parent:Z,vnode:fe}=v;{const on=ll(v);if(on){V&&(V.el=fe.el,ae(v,V,R)),on.asyncDep.then(()=>{v.isUnmounted||z()});return}}let re=V,Ne;Vn(v,!1),V?(V.el=fe.el,ae(v,V,R)):V=fe,L&&Zo(L),(Ne=V.props&&V.props.onVnodeBeforeUpdate)&&an(Ne,Z,V,fe),Vn(v,!0);const Ae=kr(v),tn=v.subTree;v.subTree=Ae,x(tn,Ae,d(tn.el),b(tn),v,C,w),V.el=Ae.el,re===null&&Ad(v,Ae.el),X&&Te(X,C),(Ne=V.props&&V.props.onVnodeUpdated)&&Te(()=>an(Ne,Z,V,fe),C)}else{let V;const{el:L,props:X}=m,{bm:Z,m:fe,parent:re,root:Ne,type:Ae}=v,tn=at(m);Vn(v,!1),Z&&Zo(Z),!tn&&(V=X&&X.onVnodeBeforeMount)&&an(V,re,m),Vn(v,!0);{Ne.ce&&Ne.ce._injectChildStyle(Ae);const on=v.subTree=kr(v);x(null,on,h,y,v,C,w),m.el=on.el}if(fe&&Te(fe,C),!tn&&(V=X&&X.onVnodeMounted)){const on=m;Te(()=>an(V,re,on),C)}(m.shapeFlag&256||re&&at(re.vnode)&&re.vnode.shapeFlag&256)&&v.a&&Te(v.a,C),v.isMounted=!0,m=h=y=null}};v.scope.on();const _=v.effect=new ds(z);v.scope.off();const P=v.update=_.run.bind(_),G=v.job=_.runIfDirty.bind(_);G.i=v,G.id=v.uid,_.scheduler=()=>qi(G),Vn(v,!0),P()},ae=(v,m,h)=>{m.component=v;const y=v.vnode.props;v.vnode=m,v.next=null,xd(v,m.props,y,h),Cd(v,m.children,h),Rn(),mr(v),Mn()},ne=(v,m,h,y,C,w,R,z,_=!1)=>{const P=v&&v.children,G=v?v.shapeFlag:0,V=m.children,{patchFlag:L,shapeFlag:X}=m;if(L>0){if(L&128){bn(P,V,h,y,C,w,R,z,_);return}else if(L&256){dn(P,V,h,y,C,w,R,z,_);return}}X&8?(G&16&&Ge(P,C,w),V!==P&&f(h,V)):G&16?X&16?bn(P,V,h,y,C,w,R,z,_):Ge(P,C,w,!0):(G&8&&f(h,""),X&16&&K(V,h,y,C,w,R,z,_))},dn=(v,m,h,y,C,w,R,z,_)=>{v=v||nt,m=m||nt;const P=v.length,G=m.length,V=Math.min(P,G);let L;for(L=0;L<V;L++){const X=m[L]=_?kn(m[L]):ln(m[L]);x(v[L],X,h,null,C,w,R,z,_)}P>G?Ge(v,C,w,!0,!1,V):K(m,h,y,C,w,R,z,_,V)},bn=(v,m,h,y,C,w,R,z,_)=>{let P=0;const G=m.length;let V=v.length-1,L=G-1;for(;P<=V&&P<=L;){const X=v[P],Z=m[P]=_?kn(m[P]):ln(m[P]);if(Nn(X,Z))x(X,Z,h,null,C,w,R,z,_);else break;P++}for(;P<=V&&P<=L;){const X=v[V],Z=m[L]=_?kn(m[L]):ln(m[L]);if(Nn(X,Z))x(X,Z,h,null,C,w,R,z,_);else break;V--,L--}if(P>V){if(P<=L){const X=L+1,Z=X<G?m[X].el:y;for(;P<=L;)x(null,m[P]=_?kn(m[P]):ln(m[P]),h,Z,C,w,R,z,_),P++}}else if(P>L)for(;P<=V;)je(v[P],C,w,!0),P++;else{const X=P,Z=P,fe=new Map;for(P=Z;P<=L;P++){const Ie=m[P]=_?kn(m[P]):ln(m[P]);Ie.key!=null&&fe.set(Ie.key,P)}let re,Ne=0;const Ae=L-Z+1;let tn=!1,on=0;const gt=new Array(Ae);for(P=0;P<Ae;P++)gt[P]=0;for(P=X;P<=V;P++){const Ie=v[P];if(Ne>=Ae){je(Ie,C,w,!0);continue}let rn;if(Ie.key!=null)rn=fe.get(Ie.key);else for(re=Z;re<=L;re++)if(gt[re-Z]===0&&Nn(Ie,m[re])){rn=re;break}rn===void 0?je(Ie,C,w,!0):(gt[rn-Z]=P+1,rn>=on?on=rn:tn=!0,x(Ie,m[rn],h,null,C,w,R,z,_),Ne++)}const cr=tn?Sd(gt):nt;for(re=cr.length-1,P=Ae-1;P>=0;P--){const Ie=Z+P,rn=m[Ie],dr=Ie+1<G?m[Ie+1].el:y;gt[P]===0?x(null,rn,h,dr,C,w,R,z,_):tn&&(re<0||P!==cr[re]?nn(rn,h,dr,2):re--)}}},nn=(v,m,h,y,C=null)=>{const{el:w,type:R,transition:z,children:_,shapeFlag:P}=v;if(P&6){nn(v.component.subTree,m,h,y);return}if(P&128){v.suspense.move(m,h,y);return}if(P&64){R.move(v,m,h,I);return}if(R===Le){o(w,m,h);for(let V=0;V<_.length;V++)nn(_[V],m,h,y);o(v.anchor,m,h);return}if(R===lo){F(v,m,h);return}if(y!==2&&P&1&&z)if(y===0)z.beforeEnter(w),o(w,m,h),Te(()=>z.enter(w),C);else{const{leave:V,delayLeave:L,afterLeave:X}=z,Z=()=>o(w,m,h),fe=()=>{V(w,()=>{Z(),X&&X()})};L?L(w,Z,fe):fe()}else o(w,m,h)},je=(v,m,h,y=!1,C=!1)=>{const{type:w,props:R,ref:z,children:_,dynamicChildren:P,shapeFlag:G,patchFlag:V,dirs:L,cacheIndex:X}=v;if(V===-2&&(C=!1),z!=null&&bo(z,null,h,v,!0),X!=null&&(m.renderCache[X]=void 0),G&256){m.ctx.deactivate(v);return}const Z=G&1&&L,fe=!at(v);let re;if(fe&&(re=R&&R.onVnodeBeforeUnmount)&&an(re,m,v),G&6)Yt(v.component,h,y);else{if(G&128){v.suspense.unmount(h,y);return}Z&&Dn(v,null,m,"beforeUnmount"),G&64?v.type.remove(v,m,h,I,y):P&&!P.hasOnce&&(w!==Le||V>0&&V&64)?Ge(P,m,h,!1,!0):(w===Le&&V&384||!C&&G&16)&&Ge(_,m,h),y&&Hn(v)}(fe&&(re=R&&R.onVnodeUnmounted)||Z)&&Te(()=>{re&&an(re,m,v),Z&&Dn(v,null,m,"unmounted")},h)},Hn=v=>{const{type:m,el:h,anchor:y,transition:C}=v;if(m===Le){qn(h,y);return}if(m===lo){T(v);return}const w=()=>{i(h),C&&!C.persisted&&C.afterLeave&&C.afterLeave()};if(v.shapeFlag&1&&C&&!C.persisted){const{leave:R,delayLeave:z}=C,_=()=>R(h,w);z?z(v.el,w,_):_()}else w()},qn=(v,m)=>{let h;for(;v!==m;)h=u(v),i(v),v=h;i(m)},Yt=(v,m,h)=>{const{bum:y,scope:C,job:w,subTree:R,um:z,m:_,a:P}=v;Fr(_),Fr(P),y&&Zo(y),C.stop(),w&&(w.flags|=8,je(R,v,m,h)),z&&Te(z,m),Te(()=>{v.isUnmounted=!0},m),m&&m.pendingBranch&&!m.isUnmounted&&v.asyncDep&&!v.asyncResolved&&v.suspenseId===m.pendingId&&(m.deps--,m.deps===0&&m.resolve())},Ge=(v,m,h,y=!1,C=!1,w=0)=>{for(let R=w;R<v.length;R++)je(v[R],m,h,y,C)},b=v=>{if(v.shapeFlag&6)return b(v.component.subTree);if(v.shapeFlag&128)return v.suspense.next();const m=u(v.anchor||v.el),h=m&&m[Es];return h?u(h):m};let A=!1;const M=(v,m,h)=>{v==null?m._vnode&&je(m._vnode,null,null,!0):x(m._vnode||null,v,m,null,null,null,h),m._vnode=v,A||(A=!0,mr(),Vs(),A=!1)},I={p:x,um:je,m:nn,r:Hn,mt:Ce,mc:K,pc:ne,pbc:$,n:b,o:e};return{render:M,hydrate:void 0,createApp:hd(M)}}function ii({type:e,props:n},t){return t==="svg"&&e==="foreignObject"||t==="mathml"&&e==="annotation-xml"&&n&&n.encoding&&n.encoding.includes("html")?void 0:t}function Vn({effect:e,job:n},t){t?(e.flags|=32,n.flags|=4):(e.flags&=-33,n.flags&=-5)}function kd(e,n){return(!e||e&&!e.pendingBranch)&&n&&!n.persisted}function Ji(e,n,t=!1){const o=e.children,i=n.children;if(U(o)&&U(i))for(let r=0;r<o.length;r++){const a=o[r];let s=i[r];s.shapeFlag&1&&!s.dynamicChildren&&((s.patchFlag<=0||s.patchFlag===32)&&(s=i[r]=kn(i[r]),s.el=a.el),!t&&s.patchFlag!==-2&&Ji(a,s)),s.type===Uo&&(s.el=a.el)}}function Sd(e){const n=e.slice(),t=[0];let o,i,r,a,s;const l=e.length;for(o=0;o<l;o++){const c=e[o];if(c!==0){if(i=t[t.length-1],e[i]<c){n[o]=i,t.push(o);continue}for(r=0,a=t.length-1;r<a;)s=r+a>>1,e[t[s]]<c?r=s+1:a=s;c<e[t[r]]&&(r>0&&(n[o]=t[r-1]),t[r]=o)}}for(r=t.length,a=t[r-1];r-- >0;)t[r]=a,a=n[a];return t}function ll(e){const n=e.subTree.component;if(n)return n.asyncDep&&!n.asyncResolved?n:ll(n)}function Fr(e){if(e)for(let n=0;n<e.length;n++)e[n].flags|=8}const _d=Symbol.for("v-scx"),zd=()=>Qe(_d);function Yh(e,n){return Oo(e,null,n)}function Wh(e,n){return Oo(e,null,{flush:"post"})}function zn(e,n,t){return Oo(e,n,t)}function Oo(e,n,t=de){const{immediate:o,deep:i,flush:r,once:a}=t,s=ke({},t),l=n&&o||!n&&r!=="post";let c;if(It){if(r==="sync"){const g=zd();c=g.__watcherHandles||(g.__watcherHandles=[])}else if(!l){const g=()=>{};return g.stop=cn,g.resume=cn,g.pause=cn,g}}const f=Pe;s.call=(g,p,x)=>Je(g,f,p,x);let d=!1;r==="post"?s.scheduler=g=>{Te(g,f&&f.suspense)}:r!=="sync"&&(d=!0,s.scheduler=(g,p)=>{p?g():qi(g)}),s.augmentJob=g=>{n&&(g.flags|=4),d&&(g.flags|=2,f&&(g.id=f.uid,g.i=f))};const u=Bc(e,n,s);return It&&(c?c.push(u):l&&u()),u}function Td(e,n,t){const o=this.proxy,i=he(e)?e.includes(".")?cl(o,e):()=>o[e]:e.bind(o,o);let r;H(n)?r=n:(r=n.handler,t=n);const a=Xt(this),s=Oo(i,r.bind(o),t);return a(),s}function cl(e,n){const t=n.split(".");return()=>{let o=e;for(let i=0;i<t.length&&o;i++)o=o[t[i]];return o}}const Rd=(e,n)=>n==="modelValue"||n==="model-value"?e.modelModifiers:e[`${n}Modifiers`]||e[`${Xe(n)}Modifiers`]||e[`${$n(n)}Modifiers`];function Md(e,n,...t){if(e.isUnmounted)return;const o=e.vnode.props||de;let i=t;const r=n.startsWith("update:"),a=r&&Rd(o,n.slice(7));a&&(a.trim&&(i=t.map(f=>he(f)?f.trim():f)),a.number&&(i=t.map(nc)));let s,l=o[s=ro(n)]||o[s=ro(Xe(n))];!l&&r&&(l=o[s=ro($n(n))]),l&&Je(l,e,6,i);const c=o[s+"Once"];if(c){if(!e.emitted)e.emitted={};else if(e.emitted[s])return;e.emitted[s]=!0,Je(c,e,6,i)}}function dl(e,n,t=!1){const o=n.emitsCache,i=o.get(e);if(i!==void 0)return i;const r=e.emits;let a={},s=!1;if(!H(e)){const l=c=>{const f=dl(c,n,!0);f&&(s=!0,ke(a,f))};!t&&n.mixins.length&&n.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return!r&&!s?(me(e)&&o.set(e,null),null):(U(r)?r.forEach(l=>a[l]=null):ke(a,r),me(e)&&o.set(e,a),a)}function Go(e,n){return!e||!So(n)?!1:(n=n.slice(2).replace(/Once$/,""),oe(e,n[0].toLowerCase()+n.slice(1))||oe(e,$n(n))||oe(e,n))}function kr(e){const{type:n,vnode:t,proxy:o,withProxy:i,propsOptions:[r],slots:a,attrs:s,emit:l,render:c,renderCache:f,props:d,data:u,setupState:g,ctx:p,inheritAttrs:x}=e,D=yo(e);let k,S;try{if(t.shapeFlag&4){const T=i||o,B=T;k=ln(c.call(B,T,f,d,g,u,p)),S=s}else{const T=n;k=ln(T.length>1?T(d,{attrs:s,slots:a,emit:l}):T(d,null)),S=n.props?s:Dd(s)}}catch(T){_t.length=0,Io(T,e,1),k=Ve(De)}let F=k;if(S&&x!==!1){const T=Object.keys(S),{shapeFlag:B}=F;T.length&&B&7&&(r&&T.some(Ii)&&(S=Vd(S,r)),F=Tn(F,S,!1,!0))}return t.dirs&&(F=Tn(F,null,!1,!0),F.dirs=F.dirs?F.dirs.concat(t.dirs):t.dirs),t.transition&&jt(F,t.transition),k=F,yo(D),k}const Dd=e=>{let n;for(const t in e)(t==="class"||t==="style"||So(t))&&((n||(n={}))[t]=e[t]);return n},Vd=(e,n)=>{const t={};for(const o in e)(!Ii(o)||!(o.slice(9)in n))&&(t[o]=e[o]);return t};function jd(e,n,t){const{props:o,children:i,component:r}=e,{props:a,children:s,patchFlag:l}=n,c=r.emitsOptions;if(n.dirs||n.transition)return!0;if(t&&l>=0){if(l&1024)return!0;if(l&16)return o?Sr(o,a,c):!!a;if(l&8){const f=n.dynamicProps;for(let d=0;d<f.length;d++){const u=f[d];if(a[u]!==o[u]&&!Go(c,u))return!0}}}else return(i||s)&&(!s||!s.$stable)?!0:o===a?!1:o?a?Sr(o,a,c):!0:!!a;return!1}function Sr(e,n,t){const o=Object.keys(n);if(o.length!==Object.keys(e).length)return!0;for(let i=0;i<o.length;i++){const r=o[i];if(n[r]!==e[r]&&!Go(t,r))return!0}return!1}function Ad({vnode:e,parent:n},t){for(;n;){const o=n.subTree;if(o.suspense&&o.suspense.activeBranch===e&&(o.el=e.el),o===e)(e=n.vnode).el=t,n=n.parent;else break}}const fl=e=>e.__isSuspense;function Ed(e,n){n&&n.pendingBranch?U(e)?n.effects.push(...e):n.effects.push(e):Uc(e)}const Le=Symbol.for("v-fgt"),Uo=Symbol.for("v-txt"),De=Symbol.for("v-cmt"),lo=Symbol.for("v-stc"),_t=[];let Be=null;function At(e=!1){_t.push(Be=e?null:[])}function Nd(){_t.pop(),Be=_t[_t.length-1]||null}let Et=1;function _r(e,n=!1){Et+=e,e<0&&Be&&n&&(Be.hasOnce=!0)}function vl(e){return e.dynamicChildren=Et>0?Be||nt:null,Nd(),Et>0&&Be&&Be.push(e),e}function Id(e,n,t,o,i,r){return vl(ml(e,n,t,o,i,r,!0))}function Co(e,n,t,o,i){return vl(Ve(e,n,t,o,i,!0))}function Nt(e){return e?e.__v_isVNode===!0:!1}function Nn(e,n){return e.type===n.type&&e.key===n.key}const ul=({key:e})=>e??null,co=({ref:e,ref_key:n,ref_for:t})=>(typeof e=="number"&&(e=""+e),e!=null?he(e)||Fe(e)||H(e)?{i:we,r:e,k:n,f:!!t}:e:null);function ml(e,n=null,t=null,o=0,i=null,r=e===Le?0:1,a=!1,s=!1){const l={__v_isVNode:!0,__v_skip:!0,type:e,props:n,key:n&&ul(n),ref:n&&co(n),scopeId:As,slotScopeIds:null,children:t,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:o,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:we};return s?(er(l,t),r&128&&e.normalize(l)):t&&(l.shapeFlag|=he(t)?8:16),Et>0&&!a&&Be&&(l.patchFlag>0||r&6)&&l.patchFlag!==32&&Be.push(l),l}const Ve=Ld;function Ld(e,n=null,t=null,o=0,i=null,r=!1){if((!e||e===Ys)&&(e=De),Nt(e)){const s=Tn(e,n,!0);return t&&er(s,t),Et>0&&!r&&Be&&(s.shapeFlag&6?Be[Be.indexOf(e)]=s:Be.push(s)),s.patchFlag=-2,s}if(Kd(e)&&(e=e.__vccOpts),n){n=Bd(n);let{class:s,style:l}=n;s&&!he(s)&&(n.class=Do(s)),me(l)&&($i(l)&&!U(l)&&(l=ke({},l)),n.style=Mo(l))}const a=he(e)?1:fl(e)?128:Ns(e)?64:me(e)?4:H(e)?2:0;return ml(e,n,t,o,i,a,r,!0)}function Bd(e){return e?$i(e)||nl(e)?ke({},e):e:null}function Tn(e,n,t=!1,o=!1){const{props:i,ref:r,patchFlag:a,children:s,transition:l}=e,c=n?Gd(i||{},n):i,f={__v_isVNode:!0,__v_skip:!0,type:e.type,props:c,key:c&&ul(c),ref:n&&n.ref?t&&r?U(r)?r.concat(co(n)):[r,co(n)]:co(n):r,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:s,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:n&&e.type!==Le?a===-1?16:a|16:a,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:l,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Tn(e.ssContent),ssFallback:e.ssFallback&&Tn(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return l&&o&&jt(f,l.clone(f)),f}function Od(e=" ",n=0){return Ve(Uo,null,e,n)}function Kh(e,n){const t=Ve(lo,null,e);return t.staticCount=n,t}function Zh(e="",n=!1){return n?(At(),Co(De,null,e)):Ve(De,null,e)}function ln(e){return e==null||typeof e=="boolean"?Ve(De):U(e)?Ve(Le,null,e.slice()):Nt(e)?kn(e):Ve(Uo,null,String(e))}function kn(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:Tn(e)}function er(e,n){let t=0;const{shapeFlag:o}=e;if(n==null)n=null;else if(U(n))t=16;else if(typeof n=="object")if(o&65){const i=n.default;i&&(i._c&&(i._d=!1),er(e,i()),i._c&&(i._d=!0));return}else{t=32;const i=n._;!i&&!nl(n)?n._ctx=we:i===3&&we&&(we.slots._===1?n._=1:(n._=2,e.patchFlag|=1024))}else H(n)?(n={default:n,_ctx:we},t=32):(n=String(n),o&64?(t=16,n=[Od(n)]):t=8);e.children=n,e.shapeFlag|=t}function Gd(...e){const n={};for(let t=0;t<e.length;t++){const o=e[t];for(const i in o)if(i==="class")n.class!==o.class&&(n.class=Do([n.class,o.class]));else if(i==="style")n.style=Mo([n.style,o.style]);else if(So(i)){const r=n[i],a=o[i];a&&r!==a&&!(U(r)&&r.includes(a))&&(n[i]=r?[].concat(r,a):a)}else i!==""&&(n[i]=o[i])}return n}function an(e,n,t,o=null){Je(e,n,7,[t,o])}const Ud=Qs();let $d=0;function Hd(e,n,t){const o=e.type,i=(n?n.appContext:e.appContext)||Ud,r={uid:$d++,vnode:e,type:o,parent:n,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new cs(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:n?n.provides:Object.create(i.provides),ids:n?n.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:ol(o,i),emitsOptions:dl(o,i),emit:null,emitted:null,propsDefaults:de,inheritAttrs:o.inheritAttrs,ctx:de,data:de,props:de,attrs:de,slots:de,refs:de,setupState:de,setupContext:null,suspense:t,suspenseId:t?t.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=n?n.root:r,r.emit=Md.bind(null,r),e.ce&&e.ce(r),r}let Pe=null;const nr=()=>Pe||we;let Po,ki;{const e=Ro(),n=(t,o)=>{let i;return(i=e[t])||(i=e[t]=[]),i.push(o),r=>{i.length>1?i.forEach(a=>a(r)):i[0](r)}};Po=n("__VUE_INSTANCE_SETTERS__",t=>Pe=t),ki=n("__VUE_SSR_SETTERS__",t=>It=t)}const Xt=e=>{const n=Pe;return Po(e),e.scope.on(),()=>{e.scope.off(),Po(n)}},zr=()=>{Pe&&Pe.scope.off(),Po(null)};function gl(e){return e.vnode.shapeFlag&4}let It=!1;function qd(e,n=!1,t=!1){n&&ki(n);const{props:o,children:i}=e.vnode,r=gl(e);pd(e,o,r,n),wd(e,i,t);const a=r?Xd(e,n):void 0;return n&&ki(!1),a}function Xd(e,n){const t=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,ld);const{setup:o}=t;if(o){Rn();const i=e.setupContext=o.length>1?pl(e):null,r=Xt(e),a=qt(o,e,0,[e.props,i]),s=ts(a);if(Mn(),r(),(s||e.sp)&&!at(e)&&Hs(e),s){if(a.then(zr,zr),n)return a.then(l=>{Tr(e,l)}).catch(l=>{Io(l,e,0)});e.asyncDep=a}else Tr(e,a)}else hl(e)}function Tr(e,n,t){H(n)?e.type.__ssrInlineRender?e.ssrRender=n:e.render=n:me(n)&&(e.setupState=Ts(n)),hl(e)}function hl(e,n,t){const o=e.type;e.render||(e.render=o.render||cn);{const i=Xt(e);Rn();try{dd(e)}finally{Mn(),i()}}}const Yd={get(e,n){return Se(e,"get",""),e[n]}};function pl(e){const n=t=>{e.exposed=t||{}};return{attrs:new Proxy(e.attrs,Yd),slots:e.slots,emit:e.emit,expose:n}}function $o(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(Ts(Rc(e.exposed)),{get(n,t){if(t in n)return n[t];if(t in St)return St[t](e)},has(n,t){return t in n||t in St}})):e.proxy}function Wd(e,n=!0){return H(e)?e.displayName||e.name:e.name||n&&e.__name}function Kd(e){return H(e)&&"__vccOpts"in e}const We=(e,n)=>Ic(e,n,It);function Lt(e,n,t){const o=arguments.length;return o===2?me(n)&&!U(n)?Nt(n)?Ve(e,null,[n]):Ve(e,n):Ve(e,null,n):(o>3?t=Array.prototype.slice.call(arguments,2):o===3&&Nt(t)&&(t=[t]),Ve(e,n,t))}const Zd="3.5.13";/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Si;const Rr=typeof window<"u"&&window.trustedTypes;if(Rr)try{Si=Rr.createPolicy("vue",{createHTML:e=>e})}catch{}const xl=Si?e=>Si.createHTML(e):e=>e,Qd="http://www.w3.org/2000/svg",Jd="http://www.w3.org/1998/Math/MathML",mn=typeof document<"u"?document:null,Mr=mn&&mn.createElement("template"),e0={insert:(e,n,t)=>{n.insertBefore(e,t||null)},remove:e=>{const n=e.parentNode;n&&n.removeChild(e)},createElement:(e,n,t,o)=>{const i=n==="svg"?mn.createElementNS(Qd,e):n==="mathml"?mn.createElementNS(Jd,e):t?mn.createElement(e,{is:t}):mn.createElement(e);return e==="select"&&o&&o.multiple!=null&&i.setAttribute("multiple",o.multiple),i},createText:e=>mn.createTextNode(e),createComment:e=>mn.createComment(e),setText:(e,n)=>{e.nodeValue=n},setElementText:(e,n)=>{e.textContent=n},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>mn.querySelector(e),setScopeId(e,n){e.setAttribute(n,"")},insertStaticContent(e,n,t,o,i,r){const a=t?t.previousSibling:n.lastChild;if(i&&(i===r||i.nextSibling))for(;n.insertBefore(i.cloneNode(!0),t),!(i===r||!(i=i.nextSibling)););else{Mr.innerHTML=xl(o==="svg"?`<svg>${e}</svg>`:o==="mathml"?`<math>${e}</math>`:e);const s=Mr.content;if(o==="svg"||o==="mathml"){const l=s.firstChild;for(;l.firstChild;)s.appendChild(l.firstChild);s.removeChild(l)}n.insertBefore(s,t)}return[a?a.nextSibling:n.firstChild,t?t.previousSibling:n.lastChild]}},wn="transition",pt="animation",Bt=Symbol("_vtc"),yl={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},n0=ke({},Bs,yl),t0=e=>(e.displayName="Transition",e.props=n0,e),Qh=t0((e,{slots:n})=>Lt(Yc,o0(e),n)),jn=(e,n=[])=>{U(e)?e.forEach(t=>t(...n)):e&&e(...n)},Dr=e=>e?U(e)?e.some(n=>n.length>1):e.length>1:!1;function o0(e){const n={};for(const N in e)N in yl||(n[N]=e[N]);if(e.css===!1)return n;const{name:t="v",type:o,duration:i,enterFromClass:r=`${t}-enter-from`,enterActiveClass:a=`${t}-enter-active`,enterToClass:s=`${t}-enter-to`,appearFromClass:l=r,appearActiveClass:c=a,appearToClass:f=s,leaveFromClass:d=`${t}-leave-from`,leaveActiveClass:u=`${t}-leave-active`,leaveToClass:g=`${t}-leave-to`}=e,p=i0(i),x=p&&p[0],D=p&&p[1],{onBeforeEnter:k,onEnter:S,onEnterCancelled:F,onLeave:T,onLeaveCancelled:B,onBeforeAppear:j=k,onAppear:O=S,onAppearCancelled:K=F}=n,E=(N,ee,Ce,Ee)=>{N._enterCancelled=Ee,An(N,ee?f:s),An(N,ee?c:a),Ce&&Ce()},$=(N,ee)=>{N._isLeaving=!1,An(N,d),An(N,g),An(N,u),ee&&ee()},ie=N=>(ee,Ce)=>{const Ee=N?O:S,ye=()=>E(ee,N,Ce);jn(Ee,[ee,ye]),Vr(()=>{An(ee,N?l:r),vn(ee,N?f:s),Dr(Ee)||jr(ee,o,x,ye)})};return ke(n,{onBeforeEnter(N){jn(k,[N]),vn(N,r),vn(N,a)},onBeforeAppear(N){jn(j,[N]),vn(N,l),vn(N,c)},onEnter:ie(!1),onAppear:ie(!0),onLeave(N,ee){N._isLeaving=!0;const Ce=()=>$(N,ee);vn(N,d),N._enterCancelled?(vn(N,u),Nr()):(Nr(),vn(N,u)),Vr(()=>{N._isLeaving&&(An(N,d),vn(N,g),Dr(T)||jr(N,o,D,Ce))}),jn(T,[N,Ce])},onEnterCancelled(N){E(N,!1,void 0,!0),jn(F,[N])},onAppearCancelled(N){E(N,!0,void 0,!0),jn(K,[N])},onLeaveCancelled(N){$(N),jn(B,[N])}})}function i0(e){if(e==null)return null;if(me(e))return[ri(e.enter),ri(e.leave)];{const n=ri(e);return[n,n]}}function ri(e){return tc(e)}function vn(e,n){n.split(/\s+/).forEach(t=>t&&e.classList.add(t)),(e[Bt]||(e[Bt]=new Set)).add(n)}function An(e,n){n.split(/\s+/).forEach(o=>o&&e.classList.remove(o));const t=e[Bt];t&&(t.delete(n),t.size||(e[Bt]=void 0))}function Vr(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let r0=0;function jr(e,n,t,o){const i=e._endId=++r0,r=()=>{i===e._endId&&o()};if(t!=null)return setTimeout(r,t);const{type:a,timeout:s,propCount:l}=a0(e,n);if(!a)return o();const c=a+"end";let f=0;const d=()=>{e.removeEventListener(c,u),r()},u=g=>{g.target===e&&++f>=l&&d()};setTimeout(()=>{f<l&&d()},s+1),e.addEventListener(c,u)}function a0(e,n){const t=window.getComputedStyle(e),o=p=>(t[p]||"").split(", "),i=o(`${wn}Delay`),r=o(`${wn}Duration`),a=Ar(i,r),s=o(`${pt}Delay`),l=o(`${pt}Duration`),c=Ar(s,l);let f=null,d=0,u=0;n===wn?a>0&&(f=wn,d=a,u=r.length):n===pt?c>0&&(f=pt,d=c,u=l.length):(d=Math.max(a,c),f=d>0?a>c?wn:pt:null,u=f?f===wn?r.length:l.length:0);const g=f===wn&&/\b(transform|all)(,|$)/.test(o(`${wn}Property`).toString());return{type:f,timeout:d,propCount:u,hasTransform:g}}function Ar(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max(...n.map((t,o)=>Er(t)+Er(e[o])))}function Er(e){return e==="auto"?0:Number(e.slice(0,-1).replace(",","."))*1e3}function Nr(){return document.body.offsetHeight}function s0(e,n,t){const o=e[Bt];o&&(n=(n?[n,...o]:[...o]).join(" ")),n==null?e.removeAttribute("class"):t?e.setAttribute("class",n):e.className=n}const Ir=Symbol("_vod"),l0=Symbol("_vsh"),c0=Symbol(""),d0=/(^|;)\s*display\s*:/;function f0(e,n,t){const o=e.style,i=he(t);let r=!1;if(t&&!i){if(n)if(he(n))for(const a of n.split(";")){const s=a.slice(0,a.indexOf(":")).trim();t[s]==null&&fo(o,s,"")}else for(const a in n)t[a]==null&&fo(o,a,"");for(const a in t)a==="display"&&(r=!0),fo(o,a,t[a])}else if(i){if(n!==t){const a=o[c0];a&&(t+=";"+a),o.cssText=t,r=d0.test(t)}}else n&&e.removeAttribute("style");Ir in e&&(e[Ir]=r?o.display:"",e[l0]&&(o.display="none"))}const Lr=/\s*!important$/;function fo(e,n,t){if(U(t))t.forEach(o=>fo(e,n,o));else if(t==null&&(t=""),n.startsWith("--"))e.setProperty(n,t);else{const o=v0(e,n);Lr.test(t)?e.setProperty($n(o),t.replace(Lr,""),"important"):e[o]=t}}const Br=["Webkit","Moz","ms"],ai={};function v0(e,n){const t=ai[n];if(t)return t;let o=Xe(n);if(o!=="filter"&&o in e)return ai[n]=o;o=To(o);for(let i=0;i<Br.length;i++){const r=Br[i]+o;if(r in e)return ai[n]=r}return n}const Or="http://www.w3.org/1999/xlink";function Gr(e,n,t,o,i,r=lc(n)){o&&n.startsWith("xlink:")?t==null?e.removeAttributeNS(Or,n.slice(6,n.length)):e.setAttributeNS(Or,n,t):t==null||r&&!as(t)?e.removeAttribute(n):e.setAttribute(n,r?"":xn(t)?String(t):t)}function Ur(e,n,t,o,i){if(n==="innerHTML"||n==="textContent"){t!=null&&(e[n]=n==="innerHTML"?xl(t):t);return}const r=e.tagName;if(n==="value"&&r!=="PROGRESS"&&!r.includes("-")){const s=r==="OPTION"?e.getAttribute("value")||"":e.value,l=t==null?e.type==="checkbox"?"on":"":String(t);(s!==l||!("_value"in e))&&(e.value=l),t==null&&e.removeAttribute(n),e._value=t;return}let a=!1;if(t===""||t==null){const s=typeof e[n];s==="boolean"?t=as(t):t==null&&s==="string"?(t="",a=!0):s==="number"&&(t=0,a=!0)}try{e[n]=t}catch{}a&&e.removeAttribute(i||n)}function u0(e,n,t,o){e.addEventListener(n,t,o)}function m0(e,n,t,o){e.removeEventListener(n,t,o)}const $r=Symbol("_vei");function g0(e,n,t,o,i=null){const r=e[$r]||(e[$r]={}),a=r[n];if(o&&a)a.value=o;else{const[s,l]=h0(n);if(o){const c=r[n]=y0(o,i);u0(e,s,c,l)}else a&&(m0(e,s,a,l),r[n]=void 0)}}const Hr=/(?:Once|Passive|Capture)$/;function h0(e){let n;if(Hr.test(e)){n={};let o;for(;o=e.match(Hr);)e=e.slice(0,e.length-o[0].length),n[o[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):$n(e.slice(2)),n]}let si=0;const p0=Promise.resolve(),x0=()=>si||(p0.then(()=>si=0),si=Date.now());function y0(e,n){const t=o=>{if(!o._vts)o._vts=Date.now();else if(o._vts<=t.attached)return;Je(b0(o,t.value),n,5,[o])};return t.value=e,t.attached=x0(),t}function b0(e,n){if(U(n)){const t=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{t.call(e),e._stopped=!0},n.map(o=>i=>!i._stopped&&o&&o(i))}else return n}const qr=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,w0=(e,n,t,o,i,r)=>{const a=i==="svg";n==="class"?s0(e,o,a):n==="style"?f0(e,t,o):So(n)?Ii(n)||g0(e,n,t,o,r):(n[0]==="."?(n=n.slice(1),!0):n[0]==="^"?(n=n.slice(1),!1):C0(e,n,o,a))?(Ur(e,n,o),!e.tagName.includes("-")&&(n==="value"||n==="checked"||n==="selected")&&Gr(e,n,o,a,r,n!=="value")):e._isVueCE&&(/[A-Z]/.test(n)||!he(o))?Ur(e,Xe(n),o,r,n):(n==="true-value"?e._trueValue=o:n==="false-value"&&(e._falseValue=o),Gr(e,n,o,a))};function C0(e,n,t,o){if(o)return!!(n==="innerHTML"||n==="textContent"||n in e&&qr(n)&&H(t));if(n==="spellcheck"||n==="draggable"||n==="translate"||n==="form"||n==="list"&&e.tagName==="INPUT"||n==="type"&&e.tagName==="TEXTAREA")return!1;if(n==="width"||n==="height"){const i=e.tagName;if(i==="IMG"||i==="VIDEO"||i==="CANVAS"||i==="SOURCE")return!1}return qr(n)&&he(t)?!1:n in e}const P0=["ctrl","shift","alt","meta"],F0={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,n)=>P0.some(t=>e[`${t}Key`]&&!n.includes(t))},Jh=(e,n)=>{const t=e._withMods||(e._withMods={}),o=n.join(".");return t[o]||(t[o]=(i,...r)=>{for(let a=0;a<n.length;a++){const s=F0[n[a]];if(s&&s(i,n))return}return e(i,...r)})},k0=ke({patchProp:w0},e0);let Xr;function bl(){return Xr||(Xr=Pd(k0))}const Yr=(...e)=>{bl().render(...e)},S0=(...e)=>{const n=bl().createApp(...e),{mount:t}=n;return n.mount=o=>{const i=z0(o);if(!i)return;const r=n._component;!H(r)&&!r.render&&!r.template&&(r.template=i.innerHTML),i.nodeType===1&&(i.textContent="");const a=t(i,!1,_0(i));return i instanceof Element&&(i.removeAttribute("v-cloak"),i.setAttribute("data-v-app","")),a},n};function _0(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function z0(e){return he(e)?document.querySelector(e):e}const T0="modulepreload",R0=function(e){return"/shader-learning/"+e},Wr={},_i=function(n,t,o){let i=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),s=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));i=Promise.allSettled(t.map(l=>{if(l=R0(l),l in Wr)return;Wr[l]=!0;const c=l.endsWith(".css"),f=c?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${l}"]${f}`))return;const d=document.createElement("link");if(d.rel=c?"stylesheet":T0,c||(d.as="script"),d.crossOrigin="",d.href=l,s&&d.setAttribute("nonce",s),document.head.appendChild(d),c)return new Promise((u,g)=>{d.addEventListener("load",u),d.addEventListener("error",()=>g(new Error(`Unable to preload CSS for ${l}`)))})}))}function r(a){const s=new Event("vite:preloadError",{cancelable:!0});if(s.payload=a,window.dispatchEvent(s),!s.defaultPrevented)throw a}return i.then(a=>{for(const s of a||[])s.status==="rejected"&&r(s.reason);return n().catch(r)})};/*!
  * vue-router v4.5.0
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const Kn=typeof document<"u";function wl(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function M0(e){return e.__esModule||e[Symbol.toStringTag]==="Module"||e.default&&wl(e.default)}const te=Object.assign;function li(e,n){const t={};for(const o in n){const i=n[o];t[o]=en(i)?i.map(e):e(i)}return t}const zt=()=>{},en=Array.isArray,Cl=/#/g,D0=/&/g,V0=/\//g,j0=/=/g,A0=/\?/g,Pl=/\+/g,E0=/%5B/g,N0=/%5D/g,Fl=/%5E/g,I0=/%60/g,kl=/%7B/g,L0=/%7C/g,Sl=/%7D/g,B0=/%20/g;function tr(e){return encodeURI(""+e).replace(L0,"|").replace(E0,"[").replace(N0,"]")}function O0(e){return tr(e).replace(kl,"{").replace(Sl,"}").replace(Fl,"^")}function zi(e){return tr(e).replace(Pl,"%2B").replace(B0,"+").replace(Cl,"%23").replace(D0,"%26").replace(I0,"`").replace(kl,"{").replace(Sl,"}").replace(Fl,"^")}function G0(e){return zi(e).replace(j0,"%3D")}function U0(e){return tr(e).replace(Cl,"%23").replace(A0,"%3F")}function $0(e){return e==null?"":U0(e).replace(V0,"%2F")}function Ot(e){try{return decodeURIComponent(""+e)}catch{}return""+e}const H0=/\/$/,q0=e=>e.replace(H0,"");function ci(e,n,t="/"){let o,i={},r="",a="";const s=n.indexOf("#");let l=n.indexOf("?");return s<l&&s>=0&&(l=-1),l>-1&&(o=n.slice(0,l),r=n.slice(l+1,s>-1?s:n.length),i=e(r)),s>-1&&(o=o||n.slice(0,s),a=n.slice(s,n.length)),o=K0(o??n,t),{fullPath:o+(r&&"?")+r+a,path:o,query:i,hash:Ot(a)}}function X0(e,n){const t=n.query?e(n.query):"";return n.path+(t&&"?")+t+(n.hash||"")}function Kr(e,n){return!n||!e.toLowerCase().startsWith(n.toLowerCase())?e:e.slice(n.length)||"/"}function Y0(e,n,t){const o=n.matched.length-1,i=t.matched.length-1;return o>-1&&o===i&&ct(n.matched[o],t.matched[i])&&_l(n.params,t.params)&&e(n.query)===e(t.query)&&n.hash===t.hash}function ct(e,n){return(e.aliasOf||e)===(n.aliasOf||n)}function _l(e,n){if(Object.keys(e).length!==Object.keys(n).length)return!1;for(const t in e)if(!W0(e[t],n[t]))return!1;return!0}function W0(e,n){return en(e)?Zr(e,n):en(n)?Zr(n,e):e===n}function Zr(e,n){return en(n)?e.length===n.length&&e.every((t,o)=>t===n[o]):e.length===1&&e[0]===n}function K0(e,n){if(e.startsWith("/"))return e;if(!e)return n;const t=n.split("/"),o=e.split("/"),i=o[o.length-1];(i===".."||i===".")&&o.push("");let r=t.length-1,a,s;for(a=0;a<o.length;a++)if(s=o[a],s!==".")if(s==="..")r>1&&r--;else break;return t.slice(0,r).join("/")+"/"+o.slice(a).join("/")}const Cn={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0};var Gt;(function(e){e.pop="pop",e.push="push"})(Gt||(Gt={}));var Tt;(function(e){e.back="back",e.forward="forward",e.unknown=""})(Tt||(Tt={}));function Z0(e){if(!e)if(Kn){const n=document.querySelector("base");e=n&&n.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),q0(e)}const Q0=/^[^#]+#/;function J0(e,n){return e.replace(Q0,"#")+n}function ef(e,n){const t=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{behavior:n.behavior,left:o.left-t.left-(n.left||0),top:o.top-t.top-(n.top||0)}}const Ho=()=>({left:window.scrollX,top:window.scrollY});function nf(e){let n;if("el"in e){const t=e.el,o=typeof t=="string"&&t.startsWith("#"),i=typeof t=="string"?o?document.getElementById(t.slice(1)):document.querySelector(t):t;if(!i)return;n=ef(i,e)}else n=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(n):window.scrollTo(n.left!=null?n.left:window.scrollX,n.top!=null?n.top:window.scrollY)}function Qr(e,n){return(history.state?history.state.position-n:-1)+e}const Ti=new Map;function tf(e,n){Ti.set(e,n)}function of(e){const n=Ti.get(e);return Ti.delete(e),n}let rf=()=>location.protocol+"//"+location.host;function zl(e,n){const{pathname:t,search:o,hash:i}=n,r=e.indexOf("#");if(r>-1){let s=i.includes(e.slice(r))?e.slice(r).length:1,l=i.slice(s);return l[0]!=="/"&&(l="/"+l),Kr(l,"")}return Kr(t,e)+o+i}function af(e,n,t,o){let i=[],r=[],a=null;const s=({state:u})=>{const g=zl(e,location),p=t.value,x=n.value;let D=0;if(u){if(t.value=g,n.value=u,a&&a===p){a=null;return}D=x?u.position-x.position:0}else o(g);i.forEach(k=>{k(t.value,p,{delta:D,type:Gt.pop,direction:D?D>0?Tt.forward:Tt.back:Tt.unknown})})};function l(){a=t.value}function c(u){i.push(u);const g=()=>{const p=i.indexOf(u);p>-1&&i.splice(p,1)};return r.push(g),g}function f(){const{history:u}=window;u.state&&u.replaceState(te({},u.state,{scroll:Ho()}),"")}function d(){for(const u of r)u();r=[],window.removeEventListener("popstate",s),window.removeEventListener("beforeunload",f)}return window.addEventListener("popstate",s),window.addEventListener("beforeunload",f,{passive:!0}),{pauseListeners:l,listen:c,destroy:d}}function Jr(e,n,t,o=!1,i=!1){return{back:e,current:n,forward:t,replaced:o,position:window.history.length,scroll:i?Ho():null}}function sf(e){const{history:n,location:t}=window,o={value:zl(e,t)},i={value:n.state};i.value||r(o.value,{back:null,current:o.value,forward:null,position:n.length-1,replaced:!0,scroll:null},!0);function r(l,c,f){const d=e.indexOf("#"),u=d>-1?(t.host&&document.querySelector("base")?e:e.slice(d))+l:rf()+e+l;try{n[f?"replaceState":"pushState"](c,"",u),i.value=c}catch(g){console.error(g),t[f?"replace":"assign"](u)}}function a(l,c){const f=te({},n.state,Jr(i.value.back,l,i.value.forward,!0),c,{position:i.value.position});r(l,f,!0),o.value=l}function s(l,c){const f=te({},i.value,n.state,{forward:l,scroll:Ho()});r(f.current,f,!0);const d=te({},Jr(o.value,l,null),{position:f.position+1},c);r(l,d,!1),o.value=l}return{location:o,state:i,push:s,replace:a}}function lf(e){e=Z0(e);const n=sf(e),t=af(e,n.state,n.location,n.replace);function o(r,a=!0){a||t.pauseListeners(),history.go(r)}const i=te({location:"",base:e,go:o,createHref:J0.bind(null,e)},n,t);return Object.defineProperty(i,"location",{enumerable:!0,get:()=>n.location.value}),Object.defineProperty(i,"state",{enumerable:!0,get:()=>n.state.value}),i}function cf(e){return typeof e=="string"||e&&typeof e=="object"}function Tl(e){return typeof e=="string"||typeof e=="symbol"}const Rl=Symbol("");var ea;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(ea||(ea={}));function dt(e,n){return te(new Error,{type:e,[Rl]:!0},n)}function un(e,n){return e instanceof Error&&Rl in e&&(n==null||!!(e.type&n))}const na="[^/]+?",df={sensitive:!1,strict:!1,start:!0,end:!0},ff=/[.+*?^${}()[\]/\\]/g;function vf(e,n){const t=te({},df,n),o=[];let i=t.start?"^":"";const r=[];for(const c of e){const f=c.length?[]:[90];t.strict&&!c.length&&(i+="/");for(let d=0;d<c.length;d++){const u=c[d];let g=40+(t.sensitive?.25:0);if(u.type===0)d||(i+="/"),i+=u.value.replace(ff,"\\$&"),g+=40;else if(u.type===1){const{value:p,repeatable:x,optional:D,regexp:k}=u;r.push({name:p,repeatable:x,optional:D});const S=k||na;if(S!==na){g+=10;try{new RegExp(`(${S})`)}catch(T){throw new Error(`Invalid custom RegExp for param "${p}" (${S}): `+T.message)}}let F=x?`((?:${S})(?:/(?:${S}))*)`:`(${S})`;d||(F=D&&c.length<2?`(?:/${F})`:"/"+F),D&&(F+="?"),i+=F,g+=20,D&&(g+=-8),x&&(g+=-20),S===".*"&&(g+=-50)}f.push(g)}o.push(f)}if(t.strict&&t.end){const c=o.length-1;o[c][o[c].length-1]+=.7000000000000001}t.strict||(i+="/?"),t.end?i+="$":t.strict&&!i.endsWith("/")&&(i+="(?:/|$)");const a=new RegExp(i,t.sensitive?"":"i");function s(c){const f=c.match(a),d={};if(!f)return null;for(let u=1;u<f.length;u++){const g=f[u]||"",p=r[u-1];d[p.name]=g&&p.repeatable?g.split("/"):g}return d}function l(c){let f="",d=!1;for(const u of e){(!d||!f.endsWith("/"))&&(f+="/"),d=!1;for(const g of u)if(g.type===0)f+=g.value;else if(g.type===1){const{value:p,repeatable:x,optional:D}=g,k=p in c?c[p]:"";if(en(k)&&!x)throw new Error(`Provided param "${p}" is an array but it is not repeatable (* or + modifiers)`);const S=en(k)?k.join("/"):k;if(!S)if(D)u.length<2&&(f.endsWith("/")?f=f.slice(0,-1):d=!0);else throw new Error(`Missing required param "${p}"`);f+=S}}return f||"/"}return{re:a,score:o,keys:r,parse:s,stringify:l}}function uf(e,n){let t=0;for(;t<e.length&&t<n.length;){const o=n[t]-e[t];if(o)return o;t++}return e.length<n.length?e.length===1&&e[0]===80?-1:1:e.length>n.length?n.length===1&&n[0]===80?1:-1:0}function Ml(e,n){let t=0;const o=e.score,i=n.score;for(;t<o.length&&t<i.length;){const r=uf(o[t],i[t]);if(r)return r;t++}if(Math.abs(i.length-o.length)===1){if(ta(o))return 1;if(ta(i))return-1}return i.length-o.length}function ta(e){const n=e[e.length-1];return e.length>0&&n[n.length-1]<0}const mf={type:0,value:""},gf=/[a-zA-Z0-9_]/;function hf(e){if(!e)return[[]];if(e==="/")return[[mf]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function n(g){throw new Error(`ERR (${t})/"${c}": ${g}`)}let t=0,o=t;const i=[];let r;function a(){r&&i.push(r),r=[]}let s=0,l,c="",f="";function d(){c&&(t===0?r.push({type:0,value:c}):t===1||t===2||t===3?(r.length>1&&(l==="*"||l==="+")&&n(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),r.push({type:1,value:c,regexp:f,repeatable:l==="*"||l==="+",optional:l==="*"||l==="?"})):n("Invalid state to consume buffer"),c="")}function u(){c+=l}for(;s<e.length;){if(l=e[s++],l==="\\"&&t!==2){o=t,t=4;continue}switch(t){case 0:l==="/"?(c&&d(),a()):l===":"?(d(),t=1):u();break;case 4:u(),t=o;break;case 1:l==="("?t=2:gf.test(l)?u():(d(),t=0,l!=="*"&&l!=="?"&&l!=="+"&&s--);break;case 2:l===")"?f[f.length-1]=="\\"?f=f.slice(0,-1)+l:t=3:f+=l;break;case 3:d(),t=0,l!=="*"&&l!=="?"&&l!=="+"&&s--,f="";break;default:n("Unknown state");break}}return t===2&&n(`Unfinished custom RegExp for param "${c}"`),d(),a(),i}function pf(e,n,t){const o=vf(hf(e.path),t),i=te(o,{record:e,parent:n,children:[],alias:[]});return n&&!i.record.aliasOf==!n.record.aliasOf&&n.children.push(i),i}function xf(e,n){const t=[],o=new Map;n=aa({strict:!1,end:!0,sensitive:!1},n);function i(d){return o.get(d)}function r(d,u,g){const p=!g,x=ia(d);x.aliasOf=g&&g.record;const D=aa(n,d),k=[x];if("alias"in d){const T=typeof d.alias=="string"?[d.alias]:d.alias;for(const B of T)k.push(ia(te({},x,{components:g?g.record.components:x.components,path:B,aliasOf:g?g.record:x})))}let S,F;for(const T of k){const{path:B}=T;if(u&&B[0]!=="/"){const j=u.record.path,O=j[j.length-1]==="/"?"":"/";T.path=u.record.path+(B&&O+B)}if(S=pf(T,u,D),g?g.alias.push(S):(F=F||S,F!==S&&F.alias.push(S),p&&d.name&&!ra(S)&&a(d.name)),Dl(S)&&l(S),x.children){const j=x.children;for(let O=0;O<j.length;O++)r(j[O],S,g&&g.children[O])}g=g||S}return F?()=>{a(F)}:zt}function a(d){if(Tl(d)){const u=o.get(d);u&&(o.delete(d),t.splice(t.indexOf(u),1),u.children.forEach(a),u.alias.forEach(a))}else{const u=t.indexOf(d);u>-1&&(t.splice(u,1),d.record.name&&o.delete(d.record.name),d.children.forEach(a),d.alias.forEach(a))}}function s(){return t}function l(d){const u=wf(d,t);t.splice(u,0,d),d.record.name&&!ra(d)&&o.set(d.record.name,d)}function c(d,u){let g,p={},x,D;if("name"in d&&d.name){if(g=o.get(d.name),!g)throw dt(1,{location:d});D=g.record.name,p=te(oa(u.params,g.keys.filter(F=>!F.optional).concat(g.parent?g.parent.keys.filter(F=>F.optional):[]).map(F=>F.name)),d.params&&oa(d.params,g.keys.map(F=>F.name))),x=g.stringify(p)}else if(d.path!=null)x=d.path,g=t.find(F=>F.re.test(x)),g&&(p=g.parse(x),D=g.record.name);else{if(g=u.name?o.get(u.name):t.find(F=>F.re.test(u.path)),!g)throw dt(1,{location:d,currentLocation:u});D=g.record.name,p=te({},u.params,d.params),x=g.stringify(p)}const k=[];let S=g;for(;S;)k.unshift(S.record),S=S.parent;return{name:D,path:x,params:p,matched:k,meta:bf(k)}}e.forEach(d=>r(d));function f(){t.length=0,o.clear()}return{addRoute:r,resolve:c,removeRoute:a,clearRoutes:f,getRoutes:s,getRecordMatcher:i}}function oa(e,n){const t={};for(const o of n)o in e&&(t[o]=e[o]);return t}function ia(e){const n={path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:e.aliasOf,beforeEnter:e.beforeEnter,props:yf(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}};return Object.defineProperty(n,"mods",{value:{}}),n}function yf(e){const n={},t=e.props||!1;if("component"in e)n.default=t;else for(const o in e.components)n[o]=typeof t=="object"?t[o]:t;return n}function ra(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function bf(e){return e.reduce((n,t)=>te(n,t.meta),{})}function aa(e,n){const t={};for(const o in e)t[o]=o in n?n[o]:e[o];return t}function wf(e,n){let t=0,o=n.length;for(;t!==o;){const r=t+o>>1;Ml(e,n[r])<0?o=r:t=r+1}const i=Cf(e);return i&&(o=n.lastIndexOf(i,o-1)),o}function Cf(e){let n=e;for(;n=n.parent;)if(Dl(n)&&Ml(e,n)===0)return n}function Dl({record:e}){return!!(e.name||e.components&&Object.keys(e.components).length||e.redirect)}function Pf(e){const n={};if(e===""||e==="?")return n;const o=(e[0]==="?"?e.slice(1):e).split("&");for(let i=0;i<o.length;++i){const r=o[i].replace(Pl," "),a=r.indexOf("="),s=Ot(a<0?r:r.slice(0,a)),l=a<0?null:Ot(r.slice(a+1));if(s in n){let c=n[s];en(c)||(c=n[s]=[c]),c.push(l)}else n[s]=l}return n}function sa(e){let n="";for(let t in e){const o=e[t];if(t=G0(t),o==null){o!==void 0&&(n+=(n.length?"&":"")+t);continue}(en(o)?o.map(r=>r&&zi(r)):[o&&zi(o)]).forEach(r=>{r!==void 0&&(n+=(n.length?"&":"")+t,r!=null&&(n+="="+r))})}return n}function Ff(e){const n={};for(const t in e){const o=e[t];o!==void 0&&(n[t]=en(o)?o.map(i=>i==null?null:""+i):o==null?o:""+o)}return n}const kf=Symbol(""),la=Symbol(""),qo=Symbol(""),or=Symbol(""),Ri=Symbol("");function xt(){let e=[];function n(o){return e.push(o),()=>{const i=e.indexOf(o);i>-1&&e.splice(i,1)}}function t(){e=[]}return{add:n,list:()=>e.slice(),reset:t}}function Sn(e,n,t,o,i,r=a=>a()){const a=o&&(o.enterCallbacks[i]=o.enterCallbacks[i]||[]);return()=>new Promise((s,l)=>{const c=u=>{u===!1?l(dt(4,{from:t,to:n})):u instanceof Error?l(u):cf(u)?l(dt(2,{from:n,to:u})):(a&&o.enterCallbacks[i]===a&&typeof u=="function"&&a.push(u),s())},f=r(()=>e.call(o&&o.instances[i],n,t,c));let d=Promise.resolve(f);e.length<3&&(d=d.then(c)),d.catch(u=>l(u))})}function di(e,n,t,o,i=r=>r()){const r=[];for(const a of e)for(const s in a.components){let l=a.components[s];if(!(n!=="beforeRouteEnter"&&!a.instances[s]))if(wl(l)){const f=(l.__vccOpts||l)[n];f&&r.push(Sn(f,t,o,a,s,i))}else{let c=l();r.push(()=>c.then(f=>{if(!f)throw new Error(`Couldn't resolve component "${s}" at "${a.path}"`);const d=M0(f)?f.default:f;a.mods[s]=f,a.components[s]=d;const g=(d.__vccOpts||d)[n];return g&&Sn(g,t,o,a,s,i)()}))}}return r}function ca(e){const n=Qe(qo),t=Qe(or),o=We(()=>{const l=Bn(e.to);return n.resolve(l)}),i=We(()=>{const{matched:l}=o.value,{length:c}=l,f=l[c-1],d=t.matched;if(!f||!d.length)return-1;const u=d.findIndex(ct.bind(null,f));if(u>-1)return u;const g=da(l[c-2]);return c>1&&da(f)===g&&d[d.length-1].path!==g?d.findIndex(ct.bind(null,l[c-2])):u}),r=We(()=>i.value>-1&&Rf(t.params,o.value.params)),a=We(()=>i.value>-1&&i.value===t.matched.length-1&&_l(t.params,o.value.params));function s(l={}){if(Tf(l)){const c=n[Bn(e.replace)?"replace":"push"](Bn(e.to)).catch(zt);return e.viewTransition&&typeof document<"u"&&"startViewTransition"in document&&document.startViewTransition(()=>c),c}return Promise.resolve()}return{route:o,href:We(()=>o.value.href),isActive:r,isExactActive:a,navigate:s}}function Sf(e){return e.length===1?e[0]:e}const _f=Xi({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:ca,setup(e,{slots:n}){const t=Eo(ca(e)),{options:o}=Qe(qo),i=We(()=>({[fa(e.activeClass,o.linkActiveClass,"router-link-active")]:t.isActive,[fa(e.exactActiveClass,o.linkExactActiveClass,"router-link-exact-active")]:t.isExactActive}));return()=>{const r=n.default&&Sf(n.default(t));return e.custom?r:Lt("a",{"aria-current":t.isExactActive?e.ariaCurrentValue:null,href:t.href,onClick:t.navigate,class:i.value},r)}}}),zf=_f;function Tf(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}function Rf(e,n){for(const t in n){const o=n[t],i=e[t];if(typeof o=="string"){if(o!==i)return!1}else if(!en(i)||i.length!==o.length||o.some((r,a)=>r!==i[a]))return!1}return!0}function da(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const fa=(e,n,t)=>e??n??t,Mf=Xi({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:n,slots:t}){const o=Qe(Ri),i=We(()=>e.route||o.value),r=Qe(la,0),a=We(()=>{let c=Bn(r);const{matched:f}=i.value;let d;for(;(d=f[c])&&!d.components;)c++;return c}),s=We(()=>i.value.matched[a.value]);so(la,We(()=>a.value+1)),so(kf,s),so(Ri,i);const l=Hi();return zn(()=>[l.value,s.value,e.name],([c,f,d],[u,g,p])=>{f&&(f.instances[d]=c,g&&g!==f&&c&&c===u&&(f.leaveGuards.size||(f.leaveGuards=g.leaveGuards),f.updateGuards.size||(f.updateGuards=g.updateGuards))),c&&f&&(!g||!ct(f,g)||!u)&&(f.enterCallbacks[d]||[]).forEach(x=>x(c))},{flush:"post"}),()=>{const c=i.value,f=e.name,d=s.value,u=d&&d.components[f];if(!u)return va(t.default,{Component:u,route:c});const g=d.props[f],p=g?g===!0?c.params:typeof g=="function"?g(c):g:null,D=Lt(u,te({},p,n,{onVnodeUnmounted:k=>{k.component.isUnmounted&&(d.instances[f]=null)},ref:l}));return va(t.default,{Component:D,route:c})||D}}});function va(e,n){if(!e)return null;const t=e(n);return t.length===1?t[0]:t}const Df=Mf;function Vf(e){const n=xf(e.routes,e),t=e.parseQuery||Pf,o=e.stringifyQuery||sa,i=e.history,r=xt(),a=xt(),s=xt(),l=Mc(Cn);let c=Cn;Kn&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const f=li.bind(null,b=>""+b),d=li.bind(null,$0),u=li.bind(null,Ot);function g(b,A){let M,I;return Tl(b)?(M=n.getRecordMatcher(b),I=A):I=b,n.addRoute(I,M)}function p(b){const A=n.getRecordMatcher(b);A&&n.removeRoute(A)}function x(){return n.getRoutes().map(b=>b.record)}function D(b){return!!n.getRecordMatcher(b)}function k(b,A){if(A=te({},A||l.value),typeof b=="string"){const h=ci(t,b,A.path),y=n.resolve({path:h.path},A),C=i.createHref(h.fullPath);return te(h,y,{params:u(y.params),hash:Ot(h.hash),redirectedFrom:void 0,href:C})}let M;if(b.path!=null)M=te({},b,{path:ci(t,b.path,A.path).path});else{const h=te({},b.params);for(const y in h)h[y]==null&&delete h[y];M=te({},b,{params:d(h)}),A.params=d(A.params)}const I=n.resolve(M,A),se=b.hash||"";I.params=f(u(I.params));const v=X0(o,te({},b,{hash:O0(se),path:I.path})),m=i.createHref(v);return te({fullPath:v,hash:se,query:o===sa?Ff(b.query):b.query||{}},I,{redirectedFrom:void 0,href:m})}function S(b){return typeof b=="string"?ci(t,b,l.value.path):te({},b)}function F(b,A){if(c!==b)return dt(8,{from:A,to:b})}function T(b){return O(b)}function B(b){return T(te(S(b),{replace:!0}))}function j(b){const A=b.matched[b.matched.length-1];if(A&&A.redirect){const{redirect:M}=A;let I=typeof M=="function"?M(b):M;return typeof I=="string"&&(I=I.includes("?")||I.includes("#")?I=S(I):{path:I},I.params={}),te({query:b.query,hash:b.hash,params:I.path!=null?{}:b.params},I)}}function O(b,A){const M=c=k(b),I=l.value,se=b.state,v=b.force,m=b.replace===!0,h=j(M);if(h)return O(te(S(h),{state:typeof h=="object"?te({},se,h.state):se,force:v,replace:m}),A||M);const y=M;y.redirectedFrom=A;let C;return!v&&Y0(o,I,M)&&(C=dt(16,{to:y,from:I}),nn(I,I,!0,!1)),(C?Promise.resolve(C):$(y,I)).catch(w=>un(w)?un(w,2)?w:bn(w):ne(w,y,I)).then(w=>{if(w){if(un(w,2))return O(te({replace:m},S(w.to),{state:typeof w.to=="object"?te({},se,w.to.state):se,force:v}),A||y)}else w=N(y,I,!0,m,se);return ie(y,I,w),w})}function K(b,A){const M=F(b,A);return M?Promise.reject(M):Promise.resolve()}function E(b){const A=qn.values().next().value;return A&&typeof A.runWithContext=="function"?A.runWithContext(b):b()}function $(b,A){let M;const[I,se,v]=jf(b,A);M=di(I.reverse(),"beforeRouteLeave",b,A);for(const h of I)h.leaveGuards.forEach(y=>{M.push(Sn(y,b,A))});const m=K.bind(null,b,A);return M.push(m),Ge(M).then(()=>{M=[];for(const h of r.list())M.push(Sn(h,b,A));return M.push(m),Ge(M)}).then(()=>{M=di(se,"beforeRouteUpdate",b,A);for(const h of se)h.updateGuards.forEach(y=>{M.push(Sn(y,b,A))});return M.push(m),Ge(M)}).then(()=>{M=[];for(const h of v)if(h.beforeEnter)if(en(h.beforeEnter))for(const y of h.beforeEnter)M.push(Sn(y,b,A));else M.push(Sn(h.beforeEnter,b,A));return M.push(m),Ge(M)}).then(()=>(b.matched.forEach(h=>h.enterCallbacks={}),M=di(v,"beforeRouteEnter",b,A,E),M.push(m),Ge(M))).then(()=>{M=[];for(const h of a.list())M.push(Sn(h,b,A));return M.push(m),Ge(M)}).catch(h=>un(h,8)?h:Promise.reject(h))}function ie(b,A,M){s.list().forEach(I=>E(()=>I(b,A,M)))}function N(b,A,M,I,se){const v=F(b,A);if(v)return v;const m=A===Cn,h=Kn?history.state:{};M&&(I||m?i.replace(b.fullPath,te({scroll:m&&h&&h.scroll},se)):i.push(b.fullPath,se)),l.value=b,nn(b,A,M,m),bn()}let ee;function Ce(){ee||(ee=i.listen((b,A,M)=>{if(!Yt.listening)return;const I=k(b),se=j(I);if(se){O(te(se,{replace:!0,force:!0}),I).catch(zt);return}c=I;const v=l.value;Kn&&tf(Qr(v.fullPath,M.delta),Ho()),$(I,v).catch(m=>un(m,12)?m:un(m,2)?(O(te(S(m.to),{force:!0}),I).then(h=>{un(h,20)&&!M.delta&&M.type===Gt.pop&&i.go(-1,!1)}).catch(zt),Promise.reject()):(M.delta&&i.go(-M.delta,!1),ne(m,I,v))).then(m=>{m=m||N(I,v,!1),m&&(M.delta&&!un(m,8)?i.go(-M.delta,!1):M.type===Gt.pop&&un(m,20)&&i.go(-1,!1)),ie(I,v,m)}).catch(zt)}))}let Ee=xt(),ye=xt(),ae;function ne(b,A,M){bn(b);const I=ye.list();return I.length?I.forEach(se=>se(b,A,M)):console.error(b),Promise.reject(b)}function dn(){return ae&&l.value!==Cn?Promise.resolve():new Promise((b,A)=>{Ee.add([b,A])})}function bn(b){return ae||(ae=!b,Ce(),Ee.list().forEach(([A,M])=>b?M(b):A()),Ee.reset()),b}function nn(b,A,M,I){const{scrollBehavior:se}=e;if(!Kn||!se)return Promise.resolve();const v=!M&&of(Qr(b.fullPath,0))||(I||!M)&&history.state&&history.state.scroll||null;return rt().then(()=>se(b,A,v)).then(m=>m&&nf(m)).catch(m=>ne(m,b,A))}const je=b=>i.go(b);let Hn;const qn=new Set,Yt={currentRoute:l,listening:!0,addRoute:g,removeRoute:p,clearRoutes:n.clearRoutes,hasRoute:D,getRoutes:x,resolve:k,options:e,push:T,replace:B,go:je,back:()=>je(-1),forward:()=>je(1),beforeEach:r.add,beforeResolve:a.add,afterEach:s.add,onError:ye.add,isReady:dn,install(b){const A=this;b.component("RouterLink",zf),b.component("RouterView",Df),b.config.globalProperties.$router=A,Object.defineProperty(b.config.globalProperties,"$route",{enumerable:!0,get:()=>Bn(l)}),Kn&&!Hn&&l.value===Cn&&(Hn=!0,T(i.location).catch(se=>{}));const M={};for(const se in Cn)Object.defineProperty(M,se,{get:()=>l.value[se],enumerable:!0});b.provide(qo,A),b.provide(or,Ss(M)),b.provide(Ri,l);const I=b.unmount;qn.add(b),b.unmount=function(){qn.delete(b),qn.size<1&&(c=Cn,ee&&ee(),ee=null,l.value=Cn,Hn=!1,ae=!1),I()}}};function Ge(b){return b.reduce((A,M)=>A.then(()=>E(M)),Promise.resolve())}return Yt}function jf(e,n){const t=[],o=[],i=[],r=Math.max(n.matched.length,e.matched.length);for(let a=0;a<r;a++){const s=n.matched[a];s&&(e.matched.find(c=>ct(c,s))?o.push(s):t.push(s));const l=e.matched[a];l&&(n.matched.find(c=>ct(c,l))||i.push(l))}return[t,o,i]}function ep(){return Qe(qo)}function np(e){return Qe(or)}const Af=JSON.parse('[{"id":2,"slug":"built-in-functions","name":"Built-in functions","description":"Understand the role of fragment shaders in the graphics pipeline and explore a large collection of built-in GLSL functions.","tasks":33,"acceptedTasks":11,"isOpen":false,"order":0,"locked":false,"cover":true,"child":{"id":2,"slug":"built-in-functions","name":"Built-in functions","description":"Understand the role of fragment shaders in the graphics pipeline and explore a large collection of built-in GLSL functions.","order":0,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":89,"slug":"fragment-shader","moduleId":2,"name":"Fragment Shader","order":0,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":89,"slug":"fragment-shader","moduleId":2,"name":"Fragment Shader","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Fragment shader** is a type of shader program used in computer graphics to control the appearance of individual pixels on a screen or surface. Fragment shaders are responsible for determining the final color of each pixel after all other stages of the rendering pipeline have been completed.\\n\\n<br>\\n\\n### How a Fragment Shader Works:\\n\\n1. **Input Data**: The fragment shader receives input data from the previous stages of the rendering pipeline, such as position, texture coordinates, normals, and other attributes associated with each pixel.\\n\\n2. **Processing**: The fragment shader calculates the final color of each pixel based on the input data and any additional parameters or textures provided. This calculation can involve various operations, such as texture sampling, lighting calculations, color blending, and more.\\n\\n3. **Output**: The fragment shader outputs the final color of each pixel, which is then combined with other pixels to generate the final image that is displayed on the screen.\\n\\nFragment shaders are written in specialized programming languages such as **GLSL** (OpenGL Shading Language) and are executed on the GPU (Graphics Processing Unit) for optimal performance.\\n\\n<br>\\n\\nIn OpenGL, a fragment shader has a single `main` function that produces a color value by writing it to the predefined output variable `gl_FragColor`. This variable represents the final color of the current fragment/pixel being processed by the shader. The `gl_FragColor` variable is of type `vec4`, which represents a 4-component vector containing red, green, blue, and alpha (transparency) values. Color components are normalized, ranging from 0.0 to 1.0.\\n\\n<br>\\n\\nYou can customize the logic inside the `main` function to calculate the final color based on your specific requirements, such as applying textures, performing lighting calculations, or blending colors.\\n\\n### Task\\nWrite a shader program that modifies the output color to yellow, which is a combination of red and green.","hints":[],"restrictions":[],"order":0,"cost":5,"threshold":95,"likes":37,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n      gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n      gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\\n}\\n","at":"2025-03-13T05:48:08.000Z"},{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n   \\n  gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\\n}\\n","at":"2025-03-13T03:29:34.000Z"},{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\\n}\\n","at":"2025-03-11T08:47:39.000Z"},{"score":0,"accepted":false,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","at":"2025-03-10T07:04:15.000Z"},{"score":0,"accepted":false,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","at":"2025-03-10T07:04:08.000Z"}]}},{"id":14,"slug":"vec","moduleId":2,"name":"Vec","order":1,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":14,"slug":"vec","moduleId":2,"name":"Vec","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  vec4 blueChannel = vec4(0.0, 0.0, 0.75, 0.0);\\n  vec4 redChannel = vec4(0.5, 0.0, 0.0, 0.0);\\n  vec4 alphaChannel = vec4(0.0, 0.0, 0.0, 1.0);\\n  \\n  gl_FragColor = blueChannel + redChannel + alphaChannel;\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  vec4 blueChannel = vec4(0.0, 0.0, 0.75, 0.0);\\n  vec4 redChannel = vec4(0.5, 0.0, 0.0, 0.0);\\n  vec4 alphaChannel = vec4(0.0, 0.0, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"In GLSL, **vec** is a data type used to define vectors. Vectors are used to represent a collection of scalar values (such as floats, ints, etc.) organized in one, two, three, or four dimensions. The **vec** data type is followed by a number that specifies the dimensionality of the vector.\\n\\n<br>\\n\\n### Common vec types in GLSL:\\n\\n- **vec2**: two-dimensional vector containing two scalar values.\\n\\n- **vec3**: three-dimensional vector containing three scalar values.\\n\\n- **vec4**: four-dimensional vector containing four scalar values.\\n\\nYou can use vectors in GLSL to represent positions, directions, colors, texture coordinates, and more. Vector values can have the same math operators applied to them as scalar values do. These operators perform component-wise operations on each element of the vector. However, for these operators to work on vectors, the two vectors must have the same number of elements.\\n\\n<br>\\n\\n### Examples of using vec in GLSL:\\n\\n#### Defining a vec variable:\\n```\\nvec3 position = vec3(1.0, 2.0, 3.0);\\n```\\n\\n#### Accessing components of a vec variable:\\n```\\nfloat x = position.x; // accesses the x component of the vec3 position\\nfloat y = position.y; // accesses the y component of the vec3 position\\nfloat z = position.z; // accesses the z component of the vec3 position\\n```\\n\\n#### Performing operations on vec variables:\\n```\\nvec2 a = vec2(1.0, 2.0);\\nvec2 b = vec2(3.0, 4.0);\\n\\nvec2 sum = a + b;        // vector addition\\nvec2 difference = a - b; // vector subtraction\\nvec2 scaled = a * 2.0;   // scalar multiplication\\n```\\n\\n### Task\\nFind the sum of three vectors in the program (`blueChannel`, `redChannel`, `alphaChannel`), and print the result using `gl_FragColor` variable.","hints":[],"restrictions":[],"order":1,"cost":5,"threshold":95,"likes":20,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  vec4 blueChannel = vec4(0.0, 0.0, 0.75, 0.0);\\n  vec4 redChannel = vec4(0.5, 0.0, 0.0, 0.0);\\n  vec4 alphaChannel = vec4(0.0, 0.0, 0.0, 1.0);\\n  vec4 color = blueChannel + redChannel + alphaChannel;\\n  gl_FragColor = color;\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  vec4 blueChannel = vec4(0.0, 0.0, 0.75, 0.0);\\n  vec4 redChannel = vec4(0.5, 0.0, 0.0, 0.0);\\n  vec4 alphaChannel = vec4(0.0, 0.0, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  vec4 blueChannel = vec4(0.0, 0.0, 0.75, 0.0);\\n  vec4 redChannel = vec4(0.5, 0.0, 0.0, 0.0);\\n  vec4 alphaChannel = vec4(0.0, 0.0, 0.0, 1.0);\\n  vec4 color = blueChannel + redChannel + alphaChannel;\\n  gl_FragColor = color;\\n}\\n","at":"2025-03-13T03:26:46.000Z"}]}},{"id":145,"slug":"swizzling","moduleId":2,"name":"Swizzling","order":2,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":145,"slug":"swizzling","moduleId":2,"name":"Swizzling","vertexShader":"varying vec4 color;\\n\\nvoid main() {\\n  color = vec4(62.0 / 255.0, 84.0 / 255.0, 194.0 / 255.0, 1.0);\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"varying vec4 color;\\n\\nvoid main() {\\n  gl_FragColor = color.bgra;\\n}","defaultVertexShader":"varying vec4 color;\\n\\nvoid main() {\\n  color = vec4(62.0 / 255.0, 84.0 / 255.0, 194.0 / 255.0, 1.0);\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"varying vec4 color;\\n\\nvoid main() {\\n  gl_FragColor = color;\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Swizzling** in GLSL refers to the technique of selecting and rearranging components of a vector to create a new vector. It allows you to access and manipulate individual components of a vector in a concise and flexible manner. *Swizzling* is achieved by using a combination of component names **x**, **y**, **z**, **w**, referring to the first, second, third, and fourth components, respectively.\\n\\n<br>\\n\\nAlso you can use the **r**, **g**, **b** and **a** swizzle mask instead of the **x**, **y**, **z**, **w** to access components of a vector. The **rgba** mask is commonly used when working with colors or texture data, as it corresponds to the red, green, blue, and alpha components typically associated with color information.\\n\\n<br>\\n\\n### Here are some examples of swizzling in GLSL:\\n\\n#### Accessing Components:\\n```\\nvec4 position = vec3(1.0, 0.5, 0.2);\\n\\nfloat x = position.x; // accesses the x component\\nfloat y = position.y; // accesses the y component\\nfloat z = position.z; // accesses the z component\\n```\\n\\n#### Swizzling Color Components:\\n```\\nvec4 color = vec4(1.0, 0.5, 0.2, 1.0);\\n\\n// creates a vec3 with the red, green, and blue components\\nvec3 rgb  = color.rgb;\\n\\n// reorders the components using rgba swizzle\\nvec4 rgba = color.bgra;\\n```\\n\\n#### Combining Color Swizzle and Operations:\\n```\\nvec3 baseColor = vec3(0.5, 0.3, 0.8);\\nfloat alpha = 0.7;\\n\\n// creates a new color with specified RGB components and alpha\\nvec4 finalColor = vec4(baseColor.rgb, alpha);\\n```\\n\\n### Task\\nUsing swizzle reorder pixel\'s color components from `rgba` to `bgra`.","hints":[],"restrictions":[],"order":2,"cost":5,"threshold":99,"likes":12,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"varying vec4 color;\\n\\nvoid main() {\\n  color = vec4(62.0 / 255.0, 84.0 / 255.0, 194.0 / 255.0, 1.0);\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"varying vec4 color;\\n\\nvoid main() {\\n  vec4 bgra = color.bgra;\\n  gl_FragColor = bgra;\\n}","defaultVertexShader":"varying vec4 color;\\n\\nvoid main() {\\n  color = vec4(62.0 / 255.0, 84.0 / 255.0, 194.0 / 255.0, 1.0);\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"varying vec4 color;\\n\\nvoid main() {\\n  gl_FragColor = color;\\n}","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"varying vec4 color;\\n\\nvoid main() {\\n  color = vec4(62.0 / 255.0, 84.0 / 255.0, 194.0 / 255.0, 1.0);\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"varying vec4 color;\\n\\nvoid main() {\\n  vec4 bgra = color.bgra;\\n  gl_FragColor = bgra;\\n}","at":"2025-03-13T13:08:16.000Z"}]}},{"id":19,"slug":"uv-coordinates-&-uniforms","moduleId":2,"name":"UV Coordinates & Uniforms","order":3,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":19,"slug":"uv-coordinates-&-uniforms","moduleId":2,"name":"UV Coordinates & Uniforms","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(uv, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Shader programs are used to create 2D images or textures. In order not to work with the specific dimensions of the resulting texture, we will use `UV` coordinates. This is the normalization of the texture coordinate, where the lower left corner of the texture is `(0, 0)` and the upper right is `(1.0, 1.0)`.\\n\\n<br>\\n\\n### Normalizing Pixel Coordinates\\n\\n<br>\\n\\nTo get the normalized coordinates of the current pixel, divide its position by the resolution of the texture:\\n\\n\\n```\\nvec2 uv = gl_FragCoord.xy / iResolution.xy;\\n```\\n\\n### gl_FragCoord\\n\\n<br>\\n\\n`gl_FragCoord` is a built-in variable in a shader program that represents the pixel coordinates of the fragment being processed. It is a 4D vector that contains the X, Y, Z, and W components of the fragment\'s position:\\n\\n- • **X and Y**: screen-space coordinates of the fragment.\\n- • **Z**: depth value. \\n- • **W**: perspective divide values, respectively. \\n\\nThe `gl_FragCoord` variable is typically used to perform various calculations based on the position of the fragment.\\n\\n<br>\\n\\n### iResolution\\n\\n<br>\\n\\n`iResolution` is a uniform variable that holds the resolution of the texture. Uniforms are used to send some inputs from the CPU to all shader programs. Each program receives the same data which it can read but cannot change. The purpose of a uniform is to provide a way for the application to control the behavior of the shader without having to modify the shader code itself. This allows for greater flexibility in rendering, as the same shader can be used with different data inputs to produce different effects.\\n\\n### Task\\nA shader is a set of instructions that are executed simultaneously for each pixel on the screen. It can produce different color result depending on the pixel data such as position on the screen.\\n\\n<br>\\n\\nUse the `x` component of the pixel\'s normalized coordinates as the red and the `y` component as the green when writing pixel\'s color. As a result, you should notice that the intensity of the red color increases from left to right, and the intensity of the green color increases from bottom to top. In the upper right corner we get yellow color as a result of mixing green and red.","hints":[],"restrictions":[],"order":3,"cost":5,"threshold":95,"likes":29,"dislikes":3,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy/iResolution.xy;\\n  gl_FragColor = vec4(uv.x, uv.y, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy/iResolution.xy;\\n  gl_FragColor = vec4(uv.x, uv.y, 0.0, 1.0);\\n}\\n","at":"2025-03-13T13:15:26.000Z"}]}},{"id":1,"slug":"step","moduleId":2,"name":"Step","order":4,"cost":5,"score":0,"accepted":true,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":1,"slug":"step","moduleId":2,"name":"Step","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n    // Normalized pixel coordinates (from 0 to 1)\\n    vec2 uv = gl_FragCoord.xy / iResolution;\\n\\n    gl_FragColor = vec4(step(0.5, uv.x), 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `step` is a threshold function. It returns `0.0` if the passed `x` value is less than the `edge` threshold value, otherwise it returns `1.0`.\\n\\n<br>\\n\\n### Function Signature\\n\\n```\\nfloat step(float edge, float x)\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nHere\'s a breakdown of how the step function works:\\n\\n- If `x < edge`, the function returns `0.0`.\\n- If `x >= edge`, the function returns `1.0`.\\n\\n### Practical Applications\\n\\n<br>\\n\\nThis function is commonly used in shaders to create step-like effects, such as creating sharp transitions or defining regions based on a threshold value.\\n\\n<br>\\n\\n### Example Usage\\n\\n<br>\\n\\nLet\'s look at an example of how the Step function can be used in GLSL shaders:\\n```\\nfloat edge = 0.5;\\nfloat x = 0.3;\\nfloat result = step(edge, x); // will return 0.0 since `x` < `edge`\\n```\\n\\n### Task\\nWrite a shader that splits the screen into two parts: the left half should be black and the right half should be red. The shader should work for any screen resolution. To achieve this, consider using the `iResolution` uniform variable and `gl_FragColor` to control the position of the split.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `step` function to determine the color of each pixel.","hints":[],"restrictions":[],"order":4,"cost":5,"threshold":95,"likes":24,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":2,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":3,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":4,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy/iResolution.xy;\\n  float x = step(0.5,uv.x);\\n  gl_FragColor = vec4(x, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":true,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy/iResolution.xy;\\n  float x = step(0.5,uv.x);\\n  gl_FragColor = vec4(x, 0.0, 0.0, 1.0);\\n}\\n","at":"2025-03-13T13:30:16.000Z"}]}},{"id":144,"slug":"step-invert","moduleId":2,"name":"Step - Invert","order":5,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":144,"slug":"step-invert","moduleId":2,"name":"Step - Invert","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n    // Normalized pixel coordinates (from 0 to 1)\\n    vec2 uv = gl_FragCoord.xy / iResolution;\\n\\n    gl_FragColor = vec4(1.0 - step(0.5, uv.x), 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"You can invert the result of the `step` function by subtracting the step function result from `1`.\\n\\n<br>\\n\\n### How It Works\\n\\n<br>\\n\\nThe `step` function returns `0.0` if the input value is less than the threshold and `1.0` if the input value is greater than or equal to the threshold. By subtracting this result from `1.0`, you effectively invert the output:\\n\\n- • If the original result is `0.0`, the inverted result will be `1.0`.\\n- • If the original result is `1.0`, the inverted result will be `0.0`.\\n\\n### Example\\n\\n<br>\\n\\nHere\'s an example code snippet to illustrate how to invert the result of the `step` function in GLSL:\\n\\n```\\nfloat invertedStep = 1.0 - step(threshold, value);\\n```\\n\\nAs a result, the `invertedStep` will be `0.0` if the `value` is greater than or equal to the `threshold`, and `1.0` otherwise.\\n\\n### Task\\nWrite a shader that splits the screen into two parts: the left half should be red and the right half should be black.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `step` function to determine the color of each pixel.","hints":[],"restrictions":[],"order":5,"cost":5,"threshold":99,"likes":8,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(step(uv.x,.5), 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(step(uv.x,.5), 0.0, 0.0, 1.0);\\n}","at":"2025-03-13T13:22:25.000Z"}]}},{"id":146,"slug":"max","moduleId":2,"name":"Max","order":6,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":146,"slug":"max","moduleId":2,"name":"Max","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float t1 = 1.0 - step(0.25, uv.x);\\n  float t2 = step(0.75, uv.x);\\n\\n  vec3 color = vec3(1.0, 0.3, 0.3);\\n\\n  gl_FragColor = vec4(color * max(t1, t2), 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 color = vec3(1.0, 0.3, 0.3);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `max` function in GLSL is used to return the maximum value between two input values. It takes two parameters and returns the greater of the two values. Here\'s a detailed explanation of how the `max` function works in GLSL:\\n\\n<br>\\n\\n### Function Signature\\n\\n```\\nfloat max(float x, float y);\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nHere\'s a breakdown of how the `max` function works:\\n- If `x` is greater than or equal to `y`, the function returns `x`.\\n- If `y` is greater than `x`, the function returns `y`.\\n\\n### Example Usage\\n```\\nfloat a = 5.0;\\nfloat b = 3.0;\\nfloat result = max(a, b); // will be 5.0\\n```\\n\\nThe `max` function is widely used for tasks such as clamping values and simplifying conditional logic.\\n\\n### Task\\nUsing the `max` and `step` functions, paint only those pixels whose normalized x-coordinate is less than `0.25` or greater than `0.75`.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `step` and `max` functions to determine the color of each pixel.","hints":[],"restrictions":[],"order":6,"cost":5,"threshold":99,"likes":33,"dislikes":3,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":45,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":46,"default":false,"keyword":"clamp","message":"clamp is prohibited in this task","severity":2},{"id":47,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":48,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 color = vec3(1.0, 0.3, 0.3);\\n  float flag = step(0.25,abs(0.5-uv.x));\\n  gl_FragColor = vec4(color*flag, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 color = vec3(1.0, 0.3, 0.3);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 color = vec3(1.0, 0.3, 0.3);\\n  float flag = step(0.25,abs(0.5-uv.x));\\n  gl_FragColor = vec4(color*flag, 1.0);\\n}\\n","at":"2025-03-13T13:28:18.000Z"}]}},{"id":85,"slug":"step-union","moduleId":2,"name":"Step Union","order":7,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":85,"slug":"step-union","moduleId":2,"name":"Step Union","vertexShader":"void main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float w0 = 50.0 / iResolution.x;\\n  float w1 = 50.0 / iResolution.y;\\n  \\n  float t1 = step(1.0 - w0, uv.x);\\n  float t2 = 1.0 - step(w0, uv.x);\\n  float t3 = step(1.0 - w1, uv.y);\\n  float t4 = 1.0 - step(w1, uv.y);\\n\\n  float t = max(t1, max(t2, max(t3, t4)));\\n\\n  gl_FragColor = vec4(uv * t, 0.0, 1.0);\\n}","defaultVertexShader":"void main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The union of `step` functions is a new function that returns **1** if a value is greater than the threshold value of at least one `step` function from the union. To use union, you can simply compute all the results of the `step` functions at a given point and take the maximum of them.\\n\\n<br>\\n\\n### Implementation\\n\\n<br>\\n\\nHere\'s how you can implement this in GLSL:\\n\\n```\\nfloat stepUnion(float x) {\\n    // check if the value is less than 0.25.\\n    float r0 = 1.0 - step(0.25, x);\\n\\n    // check if the value is greater than 0.75.\\n    float r1 = step(0.75, x);\\n\\n    // check if the value is less than 0.25 or greater than 0.75.\\n    return max(r0, r1);\\n}\\n```\\n\\nThe function returns **1** if **x** is less than **0.25** or greater than **0.75**, and **0** otherwise.\\n\\n<br>\\n\\n### Examples\\n\\n<br>\\n\\nLet\'s see how this function works with different input values:\\n\\n```\\nstepUnion(0.1); // will be 1 since 0.1 is less than 0.25.\\nstepUnion(0.5); // will be 0 since 0.5 is greater than 0.25 and less than 0.75.\\nstepUnion(0.9); // will be 1 since 0.1 is greater than 0.75.\\n```\\n\\nBy using the maximum of the results, you can easily determine if a value falls outside a specified range. \\n\\n### Task\\nCreate a shader program that draws a rectangular frame border around the screen. The border width is `50` pixels. Use `uv` coordinates as the frame border color.\\n\\n<br>\\n\\nUse the `step` function to draw each border separately. Next, combine the borders together to create a frame. To do this, you only need to compute the union of the test results.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `step` and `max` functions to determine the color of each pixel.","hints":[],"restrictions":[],"order":7,"cost":5,"threshold":99,"likes":32,"dislikes":6,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":5,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":22,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":23,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":44,"default":false,"keyword":"clamp","message":"clamp is prohibited in this task","severity":0},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"void main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  // float color_left = stepUnion(gl_FragCoord.xy);\\n  float r0 = (1.0 - step(50., gl_FragCoord.x));\\n  float r1 = step(iResolution.x-50., gl_FragCoord.x);\\n  float xLimit = max(r0, r1);\\n  float y0 = (1.0 - step(50., gl_FragCoord.y));\\n  float y1 = step(iResolution.y-50., gl_FragCoord.y);\\n  float yLimit = max(y0,y1);\\n  float redLimit = max(xLimit,yLimit);\\n  gl_FragColor = vec4(redLimit*uv, 0.0, 1.0);\\n}\\n","defaultVertexShader":"void main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"void main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  // float color_left = stepUnion(gl_FragCoord.xy);\\n  float r0 = (1.0 - step(50., gl_FragCoord.x));\\n  float r1 = step(iResolution.x-50., gl_FragCoord.x);\\n  float xLimit = max(r0, r1);\\n  float y0 = (1.0 - step(50., gl_FragCoord.y));\\n  float y1 = step(iResolution.y-50., gl_FragCoord.y);\\n  float yLimit = max(y0,y1);\\n  float redLimit = max(xLimit,yLimit);\\n  gl_FragColor = vec4(redLimit*uv, 0.0, 1.0);\\n}\\n","at":"2025-03-13T13:52:01.000Z"}]}},{"id":23,"slug":"fract","moduleId":2,"name":"Fract","order":8,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":23,"slug":"fract","moduleId":2,"name":"Fract","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float x = fract(uv.x * 10.0);\\n  gl_FragColor = vec4(step(0.5, x), 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `fract` function is used to return the fractional part of a floating-point value. The function takes a single argument, which can be a `float`, `vec2`, `vec3`, or `vec4`, and returns a value between `0.0` and `1.0`. \\n\\n<br>\\n\\n### Function Signature\\n\\n```\\nfloat fract(float x)\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nThe `fract` function works by subtracting the integer part of the input value, leaving only the fractional part. For example, `fract(3.14)` would return 0.14, as the integer part of 3.14 is 3.\\n\\n<br>\\n\\n### Examples\\n\\n<br>\\n\\nHere are some examples of using the fract function in GLSL:\\n#### Single float input:\\n```\\nfloat x = 3.75;\\nfloat fractionalPart = fract(x); // will be 0.75\\n```\\n#### Vector input:\\n```\\nvec2 v = vec2(1.25, 2.75);\\nvec2 fractionalParts = fract(v); // will be vec2(0.25, 0.75)\\n```\\n\\nThe `fract` function is particularly useful in procedural texture generation, animation, and other graphics applications where you need to work with periodic patterns or wrap-around effects.\\n\\n### Task\\nCreate a shader program that divides the normalized coordinate range of `[0, 1]` into `10` equal intervals across the entire width of the texture. Each interval should be `0.1` of the total screen width. The left half of each interval should be black, and the right half should be red. As a result, the program should produce a sequence of alternating black and red intervals across the entire width of the texture.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the fract and step functions to determine the color of each pixel.\\n","hints":[],"restrictions":[],"order":8,"cost":5,"threshold":95,"likes":22,"dislikes":2,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":7,"default":false,"keyword":"mod","message":"mod function is not allowed in this task","severity":2},{"id":16,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":24,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":25,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  float x = step(0.5,fract(uv.x*10.0));\\n  gl_FragColor = vec4(x, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  float x = step(0.5,fract(uv.x*10.0));\\n  gl_FragColor = vec4(x, 0.0, 0.0, 1.0);\\n}\\n","at":"2025-03-13T14:08:13.000Z"}]}},{"id":147,"slug":"tile-pattern","moduleId":2,"name":"Tile Pattern","order":9,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":147,"slug":"tile-pattern","moduleId":2,"name":"Tile Pattern","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nfloat pattern(vec2 uv) {\\n  uv = uv * 2.0 - 1.0;\\n  float t = pow(uv.x * uv.x, 0.3) + pow(uv.y * uv.y, 0.3) - 1.0;\\n  return step(0.0, t) * t * 10.0 + step(0.2, t);\\n}\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 grid = vec2(5.0, 3.0);\\n  vec2 tiled = fract(uv * grid);\\n  \\n  gl_FragColor = vec4(pattern(tiled), 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nfloat pattern(vec2 uv) {\\n  uv = uv * 2.0 - 1.0;\\n  float t = pow(uv.x * uv.x, 0.3) + pow(uv.y * uv.y, 0.3) - 1.0;\\n  return step(0.0, t) * t * 10.0 + step(0.2, t);\\n}\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(pattern(uv), 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"By manipulating the `UV` coordinates and using the `fract` function you can create repeating patterns across the screen.\\n\\n<br>\\n\\n### Example\\n\\n<br>\\n\\nHere\'s an example code snippet demonstrating how to create a table with repeating cells in a fragment shader:\\n\\n```\\nfloat columns = 2.0;\\nfloat rows    = 8.0;\\n\\n// Calculate repeated cells based on UV coordinates\\nvec2 repeatedUV = fract(uv * vec2(columns, rows));\\n```\\n\\n### Adjusting the Pattern\\n\\n<br>\\n\\nYou can adjust the `columns` and `rows` values to change the size and density of the repeated cells. For example, increasing the number of columns and rows will create smaller, more densely packed cells.\\n\\n### Task\\nUsing tiling, repeat the pattern as many times as necessary.","hints":[],"restrictions":[],"order":9,"cost":5,"threshold":98,"likes":14,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nfloat pattern(vec2 uv) {\\n  uv = uv * 2.0 - 1.0;\\n;\\n  float t = pow(uv.x * uv.x, 0.3) + pow(uv.y * uv.y, 0.3) - 1.0;\\n  return step(0.0, t) * t * 10.0 + step(0.2, t);\\n}\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  float cols =5.;\\n  float rows = 3.;\\n  uv = fract(uv * vec2(cols, rows));\\n  gl_FragColor = vec4(pattern(uv), 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nfloat pattern(vec2 uv) {\\n  uv = uv * 2.0 - 1.0;\\n  float t = pow(uv.x * uv.x, 0.3) + pow(uv.y * uv.y, 0.3) - 1.0;\\n  return step(0.0, t) * t * 10.0 + step(0.2, t);\\n}\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(pattern(uv), 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nfloat pattern(vec2 uv) {\\n  uv = uv * 2.0 - 1.0;\\n;\\n  float t = pow(uv.x * uv.x, 0.3) + pow(uv.y * uv.y, 0.3) - 1.0;\\n  return step(0.0, t) * t * 10.0 + step(0.2, t);\\n}\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  float cols =5.;\\n  float rows = 3.;\\n  uv = fract(uv * vec2(cols, rows));\\n  gl_FragColor = vec4(pattern(uv), 0.0, 0.0, 1.0);\\n}\\n","at":"2025-03-13T14:15:58.000Z"}]}},{"id":86,"slug":"fract-grid","moduleId":2,"name":"Fract - Grid","order":10,"cost":5,"score":5,"accepted":true,"rejected":false,"match":1,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":86,"slug":"fract-grid","moduleId":2,"name":"Fract - Grid","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  float cellSize = 50.0;\\n  float margin = 10.0;\\n  vec2 cell = gl_FragCoord.xy / (cellSize + margin);\\n  \\n  float t = step(margin / (cellSize + margin), fract(cell.x));\\n  t *= step(margin / (cellSize + margin), fract(cell.y));\\n  \\n  gl_FragColor = vec4(t, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  vec2 fragPos = gl_FragCoord.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"When drawing cells with margins, you need to calculate the total size of the cell, which includes its width, height, and margin. This can be done by adding the width and margin on the left side, as well as the height and margin on the bottom. Once you have this information, you can determine the position of the pixel within the cell by comparing its coordinates to the cell\'s boundaries. If the pixel falls within the margin, you can fill it accordingly. Otherwise, fill it inside the cell itself.\\n\\n### Task\\nWrite a shader that draws a grid. Each cell in the grid should be `50x50` pixels in size, with a margin of `10` pixels between cells.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `fract` and `step` functions to determine the color of each pixel.","hints":[],"restrictions":[],"order":10,"cost":5,"threshold":95,"likes":27,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":8,"default":false,"keyword":"mod","message":"mod function is not allowed in this task","severity":2},{"id":15,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":26,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":27,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  vec2 fragPos = gl_FragCoord.xy;\\n  float x = step(1./6.,fract(gl_FragCoord.y/60.0));\\n  float y = step(1./6.,fract(gl_FragCoord.x/60.0));\\n  // float y = step(180.0,gl_FragCoord.x);\\n  float flag = x*y;\\n  // float color = step(1./6.,x);\\n  gl_FragColor = vec4(flag, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  vec2 fragPos = gl_FragCoord.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":true,"answerViewed":false,"submissions":[{"score":5,"accepted":true,"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  vec2 fragPos = gl_FragCoord.xy;\\n  float x = step(1./6.,fract(gl_FragCoord.y/60.0));\\n  float y = step(1./6.,fract(gl_FragCoord.x/60.0));\\n  // float y = step(180.0,gl_FragCoord.x);\\n  float flag = x*y;\\n  // float color = step(1./6.,x);\\n  gl_FragColor = vec4(flag, 0.0, 0.0, 1.0);\\n}\\n","at":"2025-03-13T14:36:04.000Z"}]}},{"id":24,"slug":"mod","moduleId":2,"name":"Mod","order":11,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":24,"slug":"mod","moduleId":2,"name":"Mod","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  uv *= 9.0;\\n  float x = fract(uv.x);\\n  x = step(0.5, x);\\n  \\n  x *= step(1.0, mod(uv.x + 1.0, 3.0));\\n\\n  gl_FragColor = vec4(x, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  uv *= 9.0;\\n  float x = fract(uv.x);\\n  x = step(0.5, x);\\n\\n  gl_FragColor = vec4(x, 0.0, 0.0, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `mod` function is used to calculate the remainder of a division operation between two numbers. This function is particularly useful in graphics programming for creating repeating patterns, among other applications.\\n\\n<br>\\n\\n### Function Signature\\n```\\nfloat mod(float x, float y);\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nThe `mod` function takes two arguments: \\n\\n- • **Dividend**: the number being divided\\n- • **Divisor**: the number by which the dividend is being divided. \\n\\nThe function returns the remainder of the division operation.\\n\\n<br>\\n\\n### Comparison with Modulo Operator\\n\\n<br>\\n\\nThe `mod` function works similarly to the modulo operator (`%`) found in many programming languages. However, there are some differences in how negative numbers are handled. In GLSL, the `mod` function always returns a non-negative result.\\n\\n<br>\\n\\n### Examples\\n\\n#### Basic usage with positive numbers:\\n```\\nfloat result = mod(10.0, 3.0); // Result will be 1.0 (10 / 3 has a remainder of 1)\\n```\\n\\n#### Handling negative numbers:\\n```\\nfloat result = mod(-10.0, 3.0); // Result will be 2.0 (-10 / 3 has a remainder of 2)\\n```\\n\\n### Practical Applications\\n\\n<br>\\n\\n• **Creating Repeating Patterns:** By using the mod function, you can create seamless, repeating textures or patterns.\\n\\n• **Animation:** It can be used to loop animations by wrapping values within a certain range.\\n\\n• **Grid Systems:** Useful for creating grid-based effects or dividing the screen into segments.\\n\\n### Task\\nCreate a pattern of alternating black and red columns, with `9` columns of each color. Then, hide every third column that is colored red.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `mod` and `step` functions to determine the color of each pixel.","hints":[],"restrictions":[],"order":11,"cost":5,"threshold":95,"likes":19,"dislikes":4,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":17,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":18,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":28,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  uv *= 9.0;\\n  float x = fract(uv.x);\\n  x = step(0.5, x);\\n\\n  gl_FragColor = vec4(x, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  uv *= 9.0;\\n  float x = fract(uv.x);\\n  x = step(0.5, x);\\n\\n  gl_FragColor = vec4(x, 0.0, 0.0, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":15,"slug":"mix","moduleId":2,"name":"Mix","order":12,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":15,"slug":"mix","moduleId":2,"name":"Mix","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 color2 = vec3(0.38, 0.12, 0.93);\\n  vec3 color1 = vec3(1.00, 0.30, 0.30);\\n\\n  float t = step(0.25, uv.x) * (uv.x - 0.25);\\n  \\n  gl_FragColor = vec4(mix(color1, color2, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 color2 = vec3(0.38, 0.12, 0.93);\\n  vec3 color1 = vec3(1.00, 0.30, 0.30);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"the `mix` function is used to perform linear interpolation between two values based on a third interpolation factor. This function is commonly used in shaders to smoothly transition between two values, such as colors, positions, or other attributes.\\n\\n<br>\\n\\n### Function Signature\\n\\n```\\nT mix(T start, T end, T t)\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nThe `mix` function takes three arguments: `start`, `end`, and `t`, where `start` and `end` are the values to interpolate between, and `t` is the interpolation factor. The `mix` function calculates the result as follows:\\n\\n```\\nmix(start, end, t) = start * (1 - t) + end * t\\n```\\n\\nHere\'s a breakdown of how the `mix` function works:\\n\\n1. When `t` is `0`, the result is equal to `start`.\\n2. When `t` is `1`, the result is equal to `end`.\\n3. When `t` is between `0` and `1`, the result is a linear interpolation between `start` and `end`.\\n\\n### Examples\\n\\n#### Color interpolation:\\n```\\nvec3 color1 = vec3(1.0, 0.0, 0.0); // red color\\nvec3 color2 = vec3(0.0, 0.0, 1.0); // blue color\\nfloat factor = 0.5;                // interpolation factor\\n\\n// result will be a purple color (halfway between red and blue)\\nvec3 resultColor = mix(color1, color2, factor); \\n```\\n\\n#### Interpolating between two positions:\\n```\\nvec3 position1 = vec3(0.0, 0.0, 0.0);\\nvec3 position2 = vec3(1.0, 1.0, 1.0);\\nfloat factor = 0.3;\\n\\n// result will be a position 30% of the way from position1 to position2\\nvec3 interpolatedPosition = mix(position1, position2, factor);\\n```\\n\\n### Task\\nUsing the `mix` function create a linear gradient that transitions from a given `color1` to `color2`. Use the  `x` normalized coordinate of the pixel as the interpolation factor. Apply the `step` function so that color transition starts from position `0.25` and ends at `1.0`.","hints":[],"restrictions":[],"order":12,"cost":5,"threshold":95,"likes":11,"dislikes":6,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 color2 = vec3(0.38, 0.12, 0.93);\\n  vec3 color1 = vec3(1.00, 0.30, 0.30);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 color2 = vec3(0.38, 0.12, 0.93);\\n  vec3 color1 = vec3(1.00, 0.30, 0.30);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":87,"slug":"mix-bilinear-interpolation","moduleId":2,"name":"Mix - Bilinear Interpolation","order":13,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":87,"slug":"mix-bilinear-interpolation","moduleId":2,"name":"Mix - Bilinear Interpolation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 red = vec3(1.0, 0.0, 0.0);\\n  vec3 black = vec3(0.0, 0.0, 0.0);\\n  vec3 blue = vec3(0.0, 0.0, 1.0);\\n  vec3 green = vec3(0.0, 1.0, 0.0);\\n  \\n  vec3 r1 = mix(red, black, uv.x);\\n  vec3 r2 = mix(blue, green, uv.x);\\n  vec3 color = mix(r1, r2, uv.y);\\n    \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 red = vec3(1.0, 0.0, 0.0);\\n  vec3 black = vec3(0.0, 0.0, 0.0);\\n  vec3 blue = vec3(0.0, 0.0, 1.0);\\n  vec3 green = vec3(0.0, 1.0, 0.0);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Bilinear interpolation** is a method used to determine the color of a pixel by performing linear interpolations in both the **X** and **Y** directions.\\n\\n<br>\\n\\n### Implementation Steps\\n\\n1. **Horizontal Interpolation.** Perform two linear interpolations in the x-direction (horizontal) to find intermediate colors by blending the horizontally adjacent colors.\\n\\n2. **Vertical Interpolation.** Perform one linear interpolation along the y-axis (vertical) using the intermediate colors from the previous step to find the resulting color for the pixel.\\n\\nThis technique is commonly used in image processing and texture mapping to achieve smooth transitions between colors.\\n\\n### Task \\nTo fill the screen using bilinear interpolation, follow these steps:\\n\\n1. Assign the color blue to the left-top corner of the screen.\\n2. Assign the color red to the left-bottom corner of the screen.\\n3. Assign the color green to the right-top corner of the screen.\\n4. Assign the color black to the right-bottom corner of the screen.\\n5. Use bilinear interpolation to blend the colors in between the corners and fill the screen with a smooth gradient.","hints":[],"restrictions":[],"order":13,"cost":5,"threshold":95,"likes":9,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 red = vec3(1.0, 0.0, 0.0);\\n  vec3 black = vec3(0.0, 0.0, 0.0);\\n  vec3 blue = vec3(0.0, 0.0, 1.0);\\n  vec3 green = vec3(0.0, 1.0, 0.0);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 red = vec3(1.0, 0.0, 0.0);\\n  vec3 black = vec3(0.0, 0.0, 0.0);\\n  vec3 blue = vec3(0.0, 0.0, 1.0);\\n  vec3 green = vec3(0.0, 1.0, 0.0);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":20,"slug":"smoothstep","moduleId":2,"name":"Smoothstep","order":14,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":20,"slug":"smoothstep","moduleId":2,"name":"Smoothstep","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 red = vec3(1.0, 0.0, 0.0);\\n  vec3 green = vec3(0.0, 1.0, 0.0);\\n  float mixFactor = smoothstep(0.25, 0.75, uv.x);\\n  \\n  gl_FragColor = vec4(mix(red, green, mixFactor), 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `smoothstep` function is used to perform smooth interpolation between two values based on a third interpolation factor. This function provides a smoother transition compared to linear interpolation by applying a smooth curve to the interpolation process.\\n\\n<br>\\n\\n### Function Signature\\n```\\nsmoothInterpolation = smoothstep(edge0, edge1, x)\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nThe `smoothstep` function takes three arguments: \\n\\n<br>\\n\\n• **edge0**: The lower threshold value.\\n\\n• **edge1**: The upper threshold value.\\n\\n• **x**: The interpolation factor.\\n\\n<br>\\n\\nCalculation details:\\n\\n<br>\\n\\n1\\\\. If `x` is less than or equal to `edge0`, the result is `0`.\\n\\n2\\\\. If `x` is greater than or equal to `edge1`, the result is `1`.\\n\\n3\\\\. If `x` is between `edge0` and `edge1`, the result is smoothly interpolated between `0` and `1` using a *Hermite interpolation* function.\\n\\n<br>\\n\\nThe *Hermite interpolation* function used by `smoothstep` ensures that the transition between `0` and `1` is smooth and continuous, resulting in a visually pleasing effect.\\n\\n<br>\\n\\n### Examples\\n```\\n// result will be a smooth color interpolation between red and blue\\nvec3 out = mix(color1, color2, smoothstep(0.2, 0.8, factor));\\n```\\n\\nIn this example, the `out` color value is transitioning smoothly from `0.2` to `0.8` based on the `factor` value:\\n\\n<br>\\n\\n• **When factor is less than 0.2**: the `smoothstep` function evaluates to `0.0`, resulting in the output being closer to `color1`.\\n\\n• **When factor is greater than 0.8**: the `smoothstep` function evaluates to `1.0`, resulting in the output being closer to `color2`.\\n\\n• **When factor is between 0.2 and 0.8:** the transition is smooth and continuous, providing more control over where the blending occurs.\\n\\n### Task\\nCreate a gradient effect that smoothly transitions from red to green. The color change should be most noticeable between the x-coordinates of `0.25` and `0.75`.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `smoothstep` and `mix` functions to determine the color of each pixel.","hints":[],"restrictions":[],"order":14,"cost":5,"threshold":95,"likes":9,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":19,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":20,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":21,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":21,"slug":"abs","moduleId":2,"name":"ABS","order":15,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":21,"slug":"abs","moduleId":2,"name":"ABS","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  // map to interval from -1 to 1\\n  float t = uv.x * 2.0 - 1.0;\\n  t = abs(t);\\n  \\n  gl_FragColor = vec4(t, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  gl_FragColor = vec4(uv.x, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `abs` function is used to calculate the absolute value of a scalar or vector input. The absolute value of a number is its magnitude without regard to its sign. The `abs` function can be applied to scalar values (e.g., floats) as well as vector values (e.g., `vec2`, `vec3`, `vec4`).\\n\\n<br>\\n\\n### Function Signature\\n```\\nfloat abs(float x);\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nThe `abs` function operates by:\\n\\n- • Returning the input value if it is positive or zero.\\n- • Returning the negation of the input value if it is negative.\\n\\nThis ensures that the output of the `abs` function is always positive or zero.\\n\\n<br>\\n\\n### Example\\n\\n```\\nfloat number = -5.0;\\nfloat absValue = abs(number); // will be 5.0\\n```\\n\\n### Practical Applications\\n\\n<br>\\n\\nBy using the `abs` function in GLSL, you can easily mirror functions with respect to the zero value by leveraging the symmetry provided by absolute values. This technique is particularly useful for creating **symmetrical** effects or transformations in shaders.\\n\\n### Task\\nCreate a gradient that linearly transitions from `0.0` (black) at the center to `1.0` (red) at the edges.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `abs` function to determine the color of each pixel.","hints":[],"restrictions":[],"order":15,"cost":5,"threshold":95,"likes":8,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":29,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":30,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":31,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  gl_FragColor = vec4(uv.x, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  gl_FragColor = vec4(uv.x, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":88,"slug":"abs-rhomb","moduleId":2,"name":"ABS - Rhomb","order":16,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":88,"slug":"abs-rhomb","moduleId":2,"name":"ABS - Rhomb","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  uv -= 0.5;\\n\\n  float t = abs(uv.x) + abs(uv.y);\\n  t = 1.0 - step(0.5, t);\\n  \\n  gl_FragColor = vec4(t, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Mathematically, a rhombus can be represented as an area bounded by 4 straight lines:\\n\\n<br>\\n\\n![Image 1 - Rombus Area](/files/rhomb-full.png)\\n\\n<br>\\n\\nLet\'s focus on determining the equation of the top left border of the rhombus:\\n\\n<br>\\n\\n![Image 2 - Rombus top-left border](/files/rhomb-first-line.png)\\n\\n<br>\\n\\nIn general, the equation of a straight line has the form:\\n```\\nY = K * X + B\\n```\\n\\nWhere:\\n\\n\\\\- **K** is the slope coefficient of the line, which determines the angle at which the line intersects the x-axis.\\n\\n\\\\- **B** is the displacement of the line along the y-axis.\\n\\n<br>\\n\\nFor the top-left border, we observe that the **Y** parameter increases at the same rate as **X**, indicating a slope coefficient of 1. The displacement along the y-axis is 0.5. Therefore, the equation of our boundary takes the form:\\n\\n```\\nY = X + 0.5\\n```\\n\\nNext, we aim to describe the area below this straight line:\\n\\n<br>\\n\\n![Image 3 - Area below the line](/files/rhomb-first-area.png)\\n\\n<br>\\n\\nTo achieve this, we convert our equation into an inequality. Since we are concerned with the area under the line, we replace the equal sign with the less than sign:\\n\\n```\\nY < X + 0.5\\n```\\n\\nSimilarly, we can determine the equations for the remaining three boundaries and find their intersection.\\n\\n### Task\\nWrite a shader that draws the full screen rhombus.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `abs` and `step` functions to determine the color of each pixel.","hints":[],"restrictions":[],"order":16,"cost":5,"threshold":95,"likes":13,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":32,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":33,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":34,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":22,"slug":"ceil","moduleId":2,"name":"Ceil","order":17,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":22,"slug":"ceil","moduleId":2,"name":"Ceil","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float t = ceil(uv.x * 10.0) / 10.0;\\n  \\n  gl_FragColor = vec4(t, 0.0, 0.0, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"In GLSL, the `ceil` function is used to calculate the smallest integer value that is greater than or equal to a given scalar or vector input. The ceil function rounds up the input value to the nearest integer value that is not less than the input value. This function is particularly useful when you need to round up a value to the next whole number.\\n\\n<br>\\n\\n### Function Signature\\n```\\nfloat ceil(float x)\\n```\\n\\nWhere `x` is the input value for which the ceiling value is to be calculated. The output of the `ceil` function will be the ceiling value of `x`.\\n\\n<br>\\n\\n### How It Works\\n\\n1. If the input value `x` is already an integer, the `ceil` function will return the same integer value without any change.\\n\\n2. If the input value `x` is a floating-point number, the `ceil` function will round up the value to the next whole number.\\n\\n3. The `ceil` function always returns a floating-point value, even if the input is an integer.\\n\\n### Examples\\n\\n#### Basic usage with float numbers:\\n```\\nfloat number = 3.5;\\nfloat ceilVal = ceil(number); // will be 4.0\\n```\\n\\n#### Handling vectors:\\n```\\nvec3 vector = vec3(2.3, 5.8, -4.7);\\nvec3 ceilVec = ceil(vector); // will be vec3(3.0, 6.0, -4.0)\\n```\\n\\n### Task\\nCreate `10` equally sized vertical sections on the screen and label them with sequential numbers from `1` to `10`. Adjust the intensity of the red color in each section based on its assigned number (`0.1`, `0.2` ... `1.0`). This will result in a gradient effect where the red color becomes progressively stronger from left to right.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code, and instead rely on the `ceil` function to determine the color of each pixel.","hints":[],"restrictions":[],"order":17,"cost":5,"threshold":95,"likes":7,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":9,"default":false,"keyword":"mod","message":"mod function is not allowed in this task","severity":2},{"id":10,"default":false,"keyword":"fract","message":"fract function is not allowed in this task","severity":2},{"id":11,"default":false,"keyword":"floor","message":"floor function is not allowed in this task","severity":2},{"id":35,"default":false,"keyword":"step","message":"step function is not allowed in this task","severity":2},{"id":36,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":37,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":38,"default":false,"keyword":"int","message":"int is not allowed in this task","severity":2},{"id":39,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":28,"slug":"int-floor","moduleId":2,"name":"Int / Floor","order":18,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":28,"slug":"int-floor","moduleId":2,"name":"Int / Floor","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvec3 palette[5] = vec3[5](\\n  vec3(1.0, 0.0, 0.0),\\n  vec3(0.0, 1.0, 0.0),\\n  vec3(0.0, 0.0, 1.0),\\n  vec3(1.0, 1.0, 0.0),\\n  vec3(0.0, 0.0, 0.0)\\n);\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float paletteSize = 5.0;\\n  float positionOnPalette = uv.x * (paletteSize - 1.0);\\n  \\n  int prevColorIndex = int(positionOnPalette);\\n  int nextColorIndex = prevColorIndex + 1;\\n\\n  vec3 prevColor = palette[prevColorIndex];\\n  vec3 nextColor = palette[nextColorIndex];\\n  \\n  vec3 color = mix(prevColor, nextColor, fract(positionOnPalette));\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvec3 palette[5] = vec3[5] (\\n  vec3(1.0, 0.0, 0.0),\\n  vec3(0.0, 1.0, 0.0),\\n  vec3(0.0, 0.0, 1.0),\\n  vec3(1.0, 1.0, 0.0),\\n  vec3(0.0, 0.0, 0.0)\\n);\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"### Int Function\\n\\n<br>\\n\\nThe `int` function in GLSL is used to convert a floating-point value to an integer value by truncating the decimal part. It essentially removes the fractional part of the input value and returns the integer part.\\n\\n#### Signature\\n```\\nint int(x)\\n```\\n\\nWhere `x` is a floating-point value that you want to convert to an integer. The output of the `int` function will be integer part of the input value `x`.\\n\\n#### Example\\n\\n```\\nfloat floatVal = 3.7;\\nint intVal = int(floatVal); // will be 3\\n```\\n\\n### Floor Function\\n\\n<br>\\n\\nThe `floor` function rounds down the input value to the nearest integer value that is not greater than the input value.\\n\\n#### Signature\\n```\\nfloat floor(float x)\\n```\\n\\nWhere `x` is a floating-point value that you want to round down to the nearest integer. The output of the `floor` function will be the largest integer less than or equal to the input value `x`.\\n\\n#### Example\\n```\\nfloat val = 3.7;\\nfloat flooredVal = floor(val); // will be 3.0\\n```\\n\\n### Task\\nCreate a shader program that generates a gradient image using an array of 5 colors. The colors are defined in the following array:\\n\\n```\\nvec3 palette[5] = vec3[5]\\n(\\n    vec3(1.0, 0.0, 0.0),\\n    vec3(0.0, 1.0, 0.0),\\n    vec3(0.0, 0.0, 1.0),\\n    vec3(1.0, 1.0, 0.0),\\n    vec3(0.0, 0.0, 0.0)\\n);\\n```\\n\\nThe program should determine which color range the current pixel falls within and interpolate its color accordingly. This will result in a smooth gradient transition between the colors in the array.\\n\\n#### Hint\\n\\n<br>\\n\\n![](/files/int-floor-hint.png)\\n\\n<br>","hints":[],"restrictions":[],"order":18,"cost":5,"threshold":95,"likes":15,"dislikes":4,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":14,"default":false,"keyword":"ceil","message":"ceil function is not allowed in this task","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvec3 palette[5] = vec3[5] (\\n  vec3(1.0, 0.0, 0.0),\\n  vec3(0.0, 1.0, 0.0),\\n  vec3(0.0, 0.0, 1.0),\\n  vec3(1.0, 1.0, 0.0),\\n  vec3(0.0, 0.0, 0.0)\\n);\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvec3 palette[5] = vec3[5] (\\n  vec3(1.0, 0.0, 0.0),\\n  vec3(0.0, 1.0, 0.0),\\n  vec3(0.0, 0.0, 1.0),\\n  vec3(1.0, 1.0, 0.0),\\n  vec3(0.0, 0.0, 0.0)\\n);\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":25,"slug":"distance-length","moduleId":2,"name":"Distance / Length","order":19,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":25,"slug":"distance-length","moduleId":2,"name":"Distance / Length","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float dist = distance(uv, vec2(0.5));\\n  float t = 1.0 - step(0.25, dist);\\n  \\n  gl_FragColor = vec4(t, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"### The length Function\\n\\n<br>\\n\\nThe `length` function in GLSL calculates the Euclidean length (magnitude) of a vector.\\n\\n#### Function Signature\\n\\n```\\nfloat length(vec v)\\n```\\n\\nIt takes a single argument, which is the vector for which you want to calculate the length. \\n\\n#### Example\\n```\\nvec3 vec = vec3(2.0, 4.0, 4.0);\\nfloat vecLength = length(vec); // will be 6.0\\n```\\n\\n### The distance Function\\n\\n<br>\\n\\nThe `distance` function in GLSL calculates the Euclidean distance between two points or vectors. \\n\\n#### Function Signature\\n\\n```\\nfloat distance(vec p0, vec p1)\\n```\\n\\nIt takes two arguments, which are the two points or vectors between which you want to calculate the distance. \\n\\n\\n#### Example\\n```\\nvec3 p0 = vec3(1.0, 2.0, 2.0);\\nvec3 p1 = vec3(4.0, 2.0, 6.0);\\nfloat dist = distance(p0, p1); // will be 5.0\\n```\\n\\n### Interchangeability\\n\\n<br>\\n\\nThe `length` and `distance` functions are interchangeable:\\n\\n```\\nlength(p1 - p0) = distance(p0, p1)\\n```\\n\\n### Task\\nTry to fill pixels in red that are within `0.25` of the texture center in normalized coordinates.","hints":[],"restrictions":[],"order":19,"cost":5,"threshold":95,"likes":4,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":26,"slug":"aspect-ratio","moduleId":2,"name":"Aspect Ratio","order":20,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":26,"slug":"aspect-ratio","moduleId":2,"name":"Aspect Ratio","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);  \\n  \\n  float dist = distance(uv * ratio, vec2(0.5) * ratio);\\n  float t = 1.0 - step(0.25, dist);\\n  \\n  gl_FragColor = vec4(t, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To avoid distortion when using texture coordinates, it is important to consider the aspect ratio of the texture. This can be achieved by calculating the ratio of its width to height:\\n\\n```\\nratio = width / height\\n```\\n\\n### Using Aspect Ratio to Adjust Object Size and Position\\n\\n<br>\\n\\nYou can adjust the object size and position using the aspect ratio:\\n```\\nx = x * ratio\\nwidth = width * ratio\\n```\\nOr\\n```\\ny = y / ratio\\nheight = height / ratio\\n```\\n\\n### Choosing the Right Adjustment\\n\\n<br>\\n\\nThe decision to multiply the **X** by the aspect ratio or divide the **Y** by the aspect ratio depends on the orientation of the object being drawn and the desired outcome:\\n\\n<br>\\n\\n• **Landscape Orientation:** If the object is wider than it is tall, multiplying the **X** by the aspect ratio will stretch the object horizontally to fit the screen.\\n\\n\\n• **Portrait Orientation:** If the object is taller than it is wide, dividing the **Y** position by the aspect ratio will stretch the object vertically to fit the screen.\\n\\n<br>\\n\\nUltimately, it depends on how you want the object to appear on different screen sizes and aspect ratios.\\n\\n### Task\\nWrite a shader that draws a red circle in the center of the screen. The circle should have a radius of `0.25` times the height of the screen. For aspect ratio correction, adjust the circle\'s dimensions to account for landscape orientation.","hints":[],"restrictions":[],"order":20,"cost":5,"threshold":95,"likes":6,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":31,"slug":"atan","moduleId":2,"name":"Atan","order":21,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":31,"slug":"atan","moduleId":2,"name":"Atan","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 center = vec2(0.5, 0.5);\\n\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  uv *= ratio;\\n  center *= ratio;\\n  \\n  float dist = distance(uv, center);\\n  vec2 dir = (uv - center);\\n  float angle = atan(dir.y, dir.x) / 3.14;\\n  \\n  vec3 color1 = vec3(1.0, 0.0, 0.0);\\n  vec3 color2 = vec3(0.0, 1.0, 0.0);\\n  \\n  vec3 color = mix(color1, color2, abs(angle));\\n\\n  // Limit the gradient to a circular area\\n  color -= step(0.5, dist);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"In GLSL, the `atan(y, x)` function is used to calculate the angle in radians between the positive x-axis and the point `(x, y)` in a 2D Cartesian coordinate system. This function is commonly used in computer graphics and shader programming to determine the direction of a vector or to perform rotations based on the angle between two points.\\n\\n<br>\\n\\n### Function Signature\\n```\\nfloat atan(float y, float x);\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nThe `atan(y, x)` function computes the arctangent of `y/x` within the range `[-π, π]`. The resulting angle is positive if the point `(x, y)` is in the first or second quadrant, and negative if it is in the third or fourth quadrant (Image 1). This function handles the sign of `y` and `x` appropriately to determine the correct quadrant of the angle.\\n\\n<br>\\n\\n![Image 1 - Atan Circle](/files/atan2.png)\\n\\n<br>\\n\\n### Example\\n\\n<br>\\n\\nHere\'s an example of using `atan(y, x)` to rotate a 2D shape towards a target point:\\n\\n```\\nfloat dx = targetX - positionX;\\nfloat dy = targetY - positionY;\\nfloat angle = atan(dy, dx); // Calculate angle for rotation\\n```\\n\\n### Task\\nCreate a gradient that transitions from red to green. The weight of each pixel should be determined by the angle between the center-to-pixel ray and the x-axis. Limit the gradient to a circular area with a diameter equal to the height of the texture.\\n\\n<br>\\n\\n### Notes\\n\\n<br>\\n\\nPerform all calculations after adjusting the coordinates for the aspect ratio.","hints":[],"restrictions":[],"order":21,"cost":5,"threshold":90,"likes":16,"dislikes":9,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":30,"slug":"sin","moduleId":2,"name":"Sin","order":22,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":30,"slug":"sin","moduleId":2,"name":"Sin","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst float PI = 3.14;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 center = vec2(0.5);\\n  \\n  float dist = distance(uv * ratio, center * ratio);\\n  float red = sin(dist * PI * 2.0 * 5.0) * 0.5 + 0.5;\\n  \\n  gl_FragColor = vec4(red, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst float PI = 3.14;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `sin` function returns a numeric value from `-1.0` to `1.0` that represents the sine of the passed (in radians) angle.\\n\\n<br>\\n\\n### Function Signature\\n```\\nfloat sin(float angle);\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nThe sine function has a period of 2π, which means that it repeats itself every 2π units. By multiplying the sine argument by a factor of 2π, we can create a wave pattern.\\n\\n### Task\\nCreate an image with a repeating pattern of red and black circles using `5` periods of sine and pixel-to-center distance. This will create a repeating pattern of peaks and troughs. Finally, bring the values of the sine to the interval from `0` to `1` and apply the red color to the circles based on that value. Use a value of `3.14` for π.","hints":[],"restrictions":[],"order":22,"cost":5,"threshold":95,"likes":9,"dislikes":5,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst float PI = 3.14;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst float PI = 3.14;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":215,"slug":"vector-normaliztion","moduleId":2,"name":"Vector Normaliztion","order":23,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":215,"slug":"vector-normaliztion","moduleId":2,"name":"Vector Normaliztion","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec2 normal = normalize(uv - vec2(0.25, 0.5));\\n  float t = (normal.x);\\n\\n  if (uv.x > 0.5) {\\n    normal = normalize(uv - vec2(0.75, 0.5));\\n    t = (normal.y);\\n  }\\n\\n  gl_FragColor = vec4(t, t, t, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"When working with vector values, we are often interested in the direction rather than the magnitude (length) of the vector. For example, when calculating lighting, we are interested in the direction of the illuminated surface\'s normal, the light rays, and the observer\'s view. In such cases, it is convenient to use unit vectors. A unit vector is a vector with a length of 1. It is also called a *normalized* vector.\\n\\n<br>\\n\\nFor any non-zero vector **V**, we can calculate a unit vector **N** that is directed the same way as vector **V**. This process is called vector *normalization*. To normalize a vector, we need to divide its components by its length:\\n```\\nN = V / length(V);\\n```\\nOr use the built-in `normalize` function:\\n```\\nN = normalize(V);\\n```\\nIn 2D, if we draw a unit vector with its tail at the origin, its head will lie on a circle with a radius of 1 centered at the origin:\\n\\n![](/files/vector-normalization-unit-circle.png)\\n\\nThus, the components of a normalized vector can be represented using trigonometric functions:\\n```\\nN = vec2(cos(𝜃), sin(𝜃))\\n```\\nwhere `𝜃` is the angle between the vector and the positive X-axis.\\n\\n\\n### Task\\nWrite a shader program that divides the screen into two equal parts. The origin of the left part is at `(0.25, 0.5)`, and the origin of the right part is at `(0.75, 0.5)`. In the left part, display the cosine of the angle between the positive X-axis and the vector directed from  the origin to the current pixel position. In the right part, display the sine of the angle between the positive X-axis and the vector directed from the origin to the current pixel position.","hints":[],"restrictions":[],"order":23,"cost":5,"threshold":95,"likes":5,"dislikes":2,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":29,"slug":"dot","moduleId":2,"name":"Dot","order":24,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":29,"slug":"dot","moduleId":2,"name":"Dot","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n\\n  vec2 p0 = vec2(0.5, 0.75) * ratio; // apex\\n  vec2 p1 = vec2(0.5, 0.0) * ratio;  // apex projection\\n  vec2 p2 = uv * ratio;              // current point\\n\\n  vec2 dir1 = p1 - p0; // perpendicular to the base\\n  vec2 dir2 = p2 - p0; // from apex to current point\\n  \\n  vec2 n1 = normalize(dir1);\\n  vec2 n2 = normalize(dir2);\\n\\n  float t = dot(n1, n2);   // get cosine\\n  float d = dot(n1, dir2); // get distance\\n  \\n  float red = step(0.5, t);    // check angle\\n  red *= (1.0 - step(0.5, d)); // check distance\\n\\n  gl_FragColor = vec4(red, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `dot` calculates the dot product of two vectors. it can be used to calculate the angle between two vectors or to project one vector onto another.\\n\\n```\\nfloat dot(float x, float y)\\nfloat dot(vec2 x, vec2 y)\\nfloat dot(vec3 x, vec3 y)\\nfloat dot(vec4 x, vec4 y)\\n```\\n\\n### Algebraic definition \\n\\n<br>\\n\\nThe dot product of two vectors **v1** and **v2** is equal to the sum of the products of their corresponding components:\\n\\n```\\nv1 * v2 = v1[0] * v2[0] + … + v1[n] * v2[n];\\n```\\n\\n### Geometrical definition\\n\\n<br>\\n\\nThe dot product of two vectors **v1** and **v2** is equal to the product of their magnitudes and the cosine of the angle between them:\\n\\n```\\nv1 * v2 = length(v1) * length(v2) * cos(angle between v1 and v2)\\n```\\n\\nIn the case when both vectors are normalized (vector length is equal to 1), the dot product is equal to cosine of the angle between two vectors:\\n\\n```\\nv1 * v2 = cos(angle between v1 and v2);\\n```\\n\\n### Task\\nWrite a program that draws a triangle in the center of the screen. The triangle should have an apex at `(0.5, 0.75)` in normalized device coordinates, and an apex angle of `120` degrees. The height of the triangle should be `0.5` times the height of the screen.\\n\\n<br>\\n\\n### Hint\\n\\n<br>\\n\\nFirst, we can shoot a ray **h** from the apex perpendicular to the base of the triangle. This **h** vector divides the top corner of the triange into two 60-degree parts. \\n\\n<br>\\n\\n![](/files/dot-task.png)\\n\\n<br>\\n\\nIf we take the dot product of the height vector **h** and the vector from apex to the triangle bottom vertex, we get a value equal to the cosine of 60 degrees. \\n\\n<br>\\n\\nThink what happens to the value of the dot product when the fragment fits into a triangle and when it doesn\'t.","hints":[],"restrictions":[],"order":24,"cost":5,"threshold":95,"likes":11,"dislikes":8,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":32,"slug":"clamp","moduleId":2,"name":"Clamp","order":25,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":32,"slug":"clamp","moduleId":2,"name":"Clamp","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float lineWidth = 0.2;\\n  vec3  lineColor = vec3(1.0, 0.3, 0.3);\\n  \\n  float value = clamp(uv.x, 0.25, 0.75);\\n  float dist  = abs(uv.y - value);\\n  float line  = 1.0 - step(lineWidth * 0.5, dist);\\n  \\n  gl_FragColor = vec4(lineColor * line, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float lineWidth = 0.2;\\n  vec3  lineColor = vec3(1.0, 0.3, 0.3);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"In GLSL, the `clamp` function is used to restrict a value within a specified range. It ensures that the input value is not less than a minimum value and not greater than a maximum value. The `clamp` function is commonly used in shaders to limit the output of calculations to a specific range, preventing values from going out of bounds.\\n\\n<br>\\n\\n### Function Signature\\n\\n```\\nfloat clamp(float value, float minVal, float maxVal)\\n```\\n\\n### How It Works\\n\\n<br>\\n\\nThe `clamp` function takes two arguments: \\n\\n  - • **value**: The input value that you want to constrain within the specified range.\\n  - • **minVal**: The minimum value that `value` should not go below.\\n  - • **maxVal**: The maximum value that `value` should not exceed.\\n\\nThe function returns the clamped value of `value`, which is constrained between `minVal` and `maxVal`.\\n\\n<br>\\n\\n### Example\\n\\n```\\nclamp(0.8, 0.0, 1.0);  // will be 0.8, since value is between 0.0 and 1.0\\nclamp(-0.5, 0.0, 1.0); // will be 0.0, since value is less than 0.0\\nclamp(1.5, 0.0, 1.0);  // will be 1.0, since value is greater than 1.0\\n```\\n\\n### Task\\nWrite a GLSL program that draws a diagonal line from the bottom left corner of the texture to the top right corner. The line should have a width of `0.2` in normalized coordinates and be colored in `(1.0, 0.3, 0.3)`. Additionally, ensure that the line is limited to values between `0.25` and `0.75` in Y coordinate.\\n\\n<br>\\n\\n### Requirements\\n\\n<br>\\n\\nThe shader should avoid using branching or conditional statements in its code.","hints":[],"restrictions":[],"order":25,"cost":5,"threshold":99,"likes":5,"dislikes":4,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":40,"default":false,"keyword":"if","message":"avoid using branching or conditional statements","severity":2},{"id":41,"default":false,"keyword":"for","message":"avoid using branching or conditional statements","severity":2},{"id":42,"default":false,"keyword":"while","message":"avoid using branching or conditional statements","severity":2},{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float lineWidth = 0.2;\\n  vec3  lineColor = vec3(1.0, 0.3, 0.3);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float lineWidth = 0.2;\\n  vec3  lineColor = vec3(1.0, 0.3, 0.3);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":39,"slug":"texture","moduleId":2,"name":"Texture","order":27,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":39,"slug":"texture","moduleId":2,"name":"Texture","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);  \\n\\n  gl_FragColor = texture(iChannel0, fract(uv * ratio));\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"On the CPU side, we can tell the GPU which texture we want to execute our shader program with. To access the texture that is attached to a shader program, you need declare a `uniform` of `sampler2D` type:\\n\\n```\\nuniform sampler2D <Name>\\n```\\n\\nTo sample the color of the texture, use the built-in `texture` function that takes a `sampler2D` as its first argument and the corresponding texture coordinates as its second argument:\\n\\n```\\nvec4 color = texture(<Name>, texCoord);\\n```\\n\\n**Texture coordinates** range from `(0, 0)` for the lower left corner of the texture image to `(1, 1)` for the upper right corner of the texture image.\\n\\n<br>\\n\\n![Image 1 - Texture Coordinates](/files/texture-coordinates-tex-coords.png)\\n\\n\\n### Task\\nWrite a shader program that displays a texture on the screen. The texture is attached to the shader program through `iChannel0`. The texture may have a different aspect ratio than the scene, so if the coordinates go beyond `(0, 1)`, repeat the contents of the texture.","hints":[],"restrictions":[],"order":27,"cost":5,"threshold":95,"likes":6,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":163,"slug":"texture-mirror","moduleId":2,"name":"Texture Mirror","order":28,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":163,"slug":"texture-mirror","moduleId":2,"name":"Texture Mirror","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy * 4.0;\\n  uv *= vec2(iResolution.x / iResolution.y, 1.0);  \\n\\n  float tx = fract(uv.x);\\n  float ty = fract(uv.y);\\n\\n  tx = mix(tx, 1.0 - tx, step(1.0, mod(uv.x, 2.0)));\\n  ty = mix(ty, 1.0 - ty, step(1.0, mod(uv.y, 2.0)));\\n  \\n  gl_FragColor = texture(iChannel0, vec2(tx, ty));\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy * 4.0;\\n  uv *= vec2(iResolution.x / iResolution.y, 1.0);  \\n  \\n  gl_FragColor = texture(iChannel0, uv);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"We know that an image will appear on the surface where `(u, v)` are in the `[0, 1]` range. But\\nwhat happens outside of this range? **Texture Wrapping** functions determine the behavior.\\n\\n<br>\\n\\nIn the previous task, we implemented the **repeat** wrapping - the image repeats itself across the surface; algorithmically, the integer part of the texture coordinates is dropped. This function is useful for having an image of a material repeatedly cover a surface.\\n\\n<br>\\n\\n**Mirrored Repeat** - the image repeats itself across the surface, but is mirrored (flipped) on every other repetition. For example, the image appears normally going from 0 to 1, then is reversed between 1 and 2, then is normal between 2 and 3, then is reversed, and so on.\\n\\n### Task\\nWrite a shader program that displays a texture on the screen. The texture is attached to the shader program through `iChannel0`. Ensure that texture coordinates are correctly handled when they extend beyond the `(0, 1)` range. Consider using *mirrored repeat* texture wrapping behavior.","hints":[],"restrictions":[],"order":28,"cost":5,"threshold":98,"likes":5,"dislikes":4,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy * 4.0;\\n  uv *= vec2(iResolution.x / iResolution.y, 1.0);  \\n  \\n  gl_FragColor = texture(iChannel0, uv);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy * 4.0;\\n  uv *= vec2(iResolution.x / iResolution.y, 1.0);  \\n  \\n  gl_FragColor = texture(iChannel0, uv);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":55,"slug":"time","moduleId":2,"name":"Time","order":29,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":55,"slug":"time","moduleId":2,"name":"Time","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float t = sin(iTime * 2.0) * 0.5 + 0.5;\\n  float delta = 0.375 * t * step(0.3, uv.y);\\n  uv.y = clamp(uv.y + delta, 0.0, 1.0);\\n  \\n  vec4 color = texture(iChannel0, uv);\\n  \\n  gl_FragColor = color;\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The `iTime` uniform in the fragment shader provides the current time in seconds since the start of the application, which can be used to control the timing and speed of animations. By adjusting the time multiplier, the speed of the animation can be increased or decreased to achieve the desired effect.\\n\\n<br>\\n\\nHere are some examples of how it can be used:\\n\\n1. **Color animation.** By using the `iTime` uniform to control the color of an object, you can create a pulsating or fading effect. For example, you could use `iTime` to smoothly transition between two colors over a set period of time.\\n\\n\\n2. **Texture animation.** You can use `iTime` to animate the texture coordinates of a texture, creating a scrolling or waving effect. This can be useful for creating water or fire effects.\\n\\n3. **Distortion effects.** By using `iTime` to control the distortion of an image or texture, you can create a wavy or rippling effect. This can be useful for creating heat distortion or underwater effects.\\n\\nOverall, the `iTime` uniform in a fragment shader provides a powerful tool for creating dynamic and visually appealing animations and effects.\\n\\n### Task\\nAnimate the attached character\'s mouth to smoothly open and close using the `iTime` uniform in the shader. The upper jaw should start opening at a Y coordinate of `0.3` in normalized device coordinates and reach its maximum opening at `0.675`. Remember to adjust the time multiplier to `2` to control the speed of the animation.\\n\\n<br>\\n\\n**Note:** consider using the `sin` or `cos` function over `iTime` to loop the animation.","hints":[],"restrictions":[],"order":29,"cost":5,"threshold":95,"likes":10,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":5,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":156,"slug":"sprite-animation","moduleId":2,"name":"Sprite Animation","order":30,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":156,"slug":"sprite-animation","moduleId":2,"name":"Sprite Animation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  float frame = mod(floor(iTime / 0.1), 8.0);\\n  float x = mod(frame, 2.0);\\n  float y = mod(floor(frame / 2.0), 4.0);\\n  \\n  vec4 color = texture(iChannel0, (uv + vec2(x, y)) * vec2(0.5, 0.25));\\n  \\n  gl_FragColor = color;\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Sprite animation** is a technique used in computer graphics and game development to create the illusion of movement by rapidly displaying a sequence of images or frames. Each image, known as a sprite, represents a different state or pose of an object or character. By displaying these sprites in quick succession, the object appears to be animated.\\n\\n<br>\\n\\n### Implementing Sprite Animation\\n\\n<br>\\n\\nTo implement sprite animation using a single texture, a sprite sheet is typically used (Image 1). A sprite sheet is a single image file that contains multiple frames of animation arranged in a grid-like pattern. Each frame corresponds to a different sprite, and by selecting the appropriate portion of the texture for each frame, the animation can be played back.\\n\\n<br>\\n\\n![Image 1 - Sprite Sheet](/files/sprite-animation.png)\\n\\n### Task\\nYou are provided with a texture containing a sprite sheet with `2` columns and `4` rows of images. Write a GLSL program that implements animation using the sprite sheet based on time with a frame rate of `10` frames per second.\\n\\n<br>\\n\\nThe `iTime` uniform provides the current time in seconds.\\n\\n","hints":[],"restrictions":[],"order":30,"cost":5,"threshold":98,"likes":8,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":11,"animationStepTime":80,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":157,"slug":"radial-shutter-animation","moduleId":2,"name":"Radial Shutter Animation","order":31,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":157,"slug":"radial-shutter-animation","moduleId":2,"name":"Radial Shutter Animation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nconst float PI = 3.141592653589;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);  \\n\\n  float radius = length(ratio * 0.5);\\n  radius *= sin(iTime + PI / 2.0) * 0.5 + 0.5;\\n\\n  float circle = distance(uv * ratio, vec2(0.5, 0.5) * ratio) - radius;\\n  float t = 1.0 - step(0.0, circle);\\n\\n  vec4 tex0 = texture2D(iChannel0, uv);\\n  vec4 tex1 = texture2D(iChannel1, uv);\\n\\n  float idx = mod(floor((iTime + PI) / (PI * 2.0)), 2.0);\\n  vec4 color = mix(tex0, tex1, idx);\\n\\n  gl_FragColor = vec4(color.rgb * t, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 3.141592653589;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To fit a rectangle into a circle, the diagonal of the rectangle must be equal to the diameter of the circle (two radii).\\n\\n<br>\\n\\n![](/files/radial-shutter-animation.png)\\n\\n<br>\\n\\nIf you have the dimensions of the rectangle\'s sides **w** and **h**, the radius of the circle **R** can be found by the Pythagorean theorem.\\n\\n### Task\\nYou are provided with two texture slides. Write a GLSL program that switches textures using a radial shutter animation. Use sine or cosine to loop the animation, the total switching time is 2PI seconds.\\n\\n<br>\\n\\nRadial shutter should work with any aspect ratio.\\n\\n<br>\\n\\nThe `iTime` uniform provides the current time in seconds.","hints":[],"restrictions":[],"order":31,"cost":5,"threshold":99,"likes":1,"dislikes":3,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1}],"animated":true,"animationSteps":10,"animationStepTime":628,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 3.141592653589;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 3.141592653589;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":40,"slug":"dfdx-dfdy","moduleId":2,"name":"dFdx / dFdy","order":32,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":40,"slug":"dfdx-dfdy","moduleId":2,"name":"dFdx / dFdy","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec4 texel = texture(iChannel0, uv);\\n  float luminance = dot(texel.rgb, vec3(0.2126, 0.7152, 0.0722));\\n\\n  float dx = dFdx(luminance);\\n  float dy = dFdy(luminance);\\n  float t  = abs(dx) + abs(dy);\\n\\n  texel = mix(texel, vec4(1.0, 0.0, 0.0, 1.0), t > 0.0 ? 1.0 : 0.0);\\n  \\n  gl_FragColor = texel;\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"When a fragment program is run, the fragments are arranged into quads - 2x2 squares of 4 pixels that always run together in a thread group (Image - 1). Each thread in the group knows its own pixel coordinate, and can easily find the coordinate of the adjacent pixel in the quad.\\n\\n<br>\\n\\n![Image 1 - Quads](/files/df-quads.png)\\n\\n<br>\\n\\n### Derivative Functions\\n\\n#### dFdx Instruction\\n\\nWhen the GPU executes `dFdx` instruction, it peeks the value of adjacent pixel along the x-axis and does a subtract with the value from the current pixel.\\n\\n```\\nfloat ddxValue = dFdx(variable);\\n```\\n\\n#### dFdy Instruction\\n\\nWhen the GPU executes `dFdy` instruction, it peeks the value of adjacent pixel along the y-axis and does a subtract with the value from the current pixel.\\n\\n```\\nfloat ddyValue = dFdy(variable);\\n```\\n\\n### Examples\\n```\\ndFdx(gl_FragCoord.x) // will be 1\\ndFdx(gl_FragCoord.y) // will be 0\\n\\ndFdy(gl_FragCoord.y) // will be 1\\ndFdy(gl_FragCoord.x) // will be 0\\n```\\n\\n### Task\\nCreate a shader that generates a red outline around the tree in a given picture with a transparent background. To achieve this, you will need to use the `dFdx` and `dFdy` functions, as well as calculate the *luminance* of the image.\\n\\n<br>\\n\\nTo calculate the *luminance*, use the following formula:\\n```\\nL = R * 0.2126 + G * 0.7152 + B * 0.0722;\\n```","hints":[],"restrictions":[],"order":32,"cost":10,"threshold":99,"likes":10,"dislikes":3,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":124,"slug":"cross","moduleId":2,"name":"Cross","order":33,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":124,"slug":"cross","moduleId":2,"name":"Cross","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 pos = transform * position.xyz;\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float angleX = 0.1;\\n  float angleY = -iTime;\\n  float angleZ = iTime * 0.5;\\n  \\n  mat3 rotateX = transpose(mat3(\\n    vec3(1, 0, 0),\\n    vec3(0, cos(angleX), -sin(angleX)),\\n    vec3(0, sin(angleX), cos(angleX))\\n  ));\\n\\n  mat3 rotateY = transpose(mat3(\\n    vec3(cos(angleY), 0, sin(angleY)),\\n    vec3(0, 1, 0),\\n    vec3(-sin(angleY), 0, cos(angleY))\\n  ));\\n\\n  mat3 rotateZ = transpose(mat3(\\n    vec3(cos(angleZ), -sin(angleZ), 0),\\n    vec3(sin(angleZ), cos(angleZ), 0),\\n    vec3(0, 0, 1)\\n  ));\\n\\n  setPosition3D(rotateZ * rotateY * rotateX);\\n}\\n","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 1.0, 3.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir);\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 pos = transform * position.xyz;\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float angleX = 0.1;\\n  float angleY = -iTime;\\n  float angleZ = iTime * 0.5;\\n  \\n  mat3 rotateX = transpose(mat3(\\n    vec3(1, 0, 0),\\n    vec3(0, cos(angleX), -sin(angleX)),\\n    vec3(0, sin(angleX), cos(angleX))\\n  ));\\n\\n  mat3 rotateY = transpose(mat3(\\n    vec3(cos(angleY), 0, sin(angleY)),\\n    vec3(0, 1, 0),\\n    vec3(-sin(angleY), 0, cos(angleY))\\n  ));\\n\\n  mat3 rotateZ = transpose(mat3(\\n    vec3(cos(angleZ), -sin(angleZ), 0),\\n    vec3(sin(angleZ), cos(angleZ), 0),\\n    vec3(0, 0, 1)\\n  ));\\n\\n  setPosition3D(rotateZ * rotateY * rotateX);\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 1.0, 3.0);\\n\\nvoid main() {\\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55), 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2.5\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"The cross product is a mathematical operation that takes two vectors as input and produces a new vector that is perpendicular to the plane formed by the original two vectors. \\n\\n<br>\\n\\n### Calculating the Cross Product in 3D Space\\n\\n<br>\\n\\nIn 3D space, if you have two vectors `A = (ax, ay, az)` and `B = (bx, by, bz)`, the cross product `AxB` is calculated as:\\n\\n```\\n        | i,   j,   k  |\\nA x B = | ax,  ay,  az |\\n        | bz,  by,  bz |\\n\\nA x B = i(ay*bz - az*by) - j(az*bx - ax*bz) + k(ax*by - ay*bx)\\n```\\n\\nThe resulting vector is orthogonal to both `A` and `B`. \\n\\n<br>\\n\\n### Determining the Direction\\n\\n<br>\\n\\nThe direction of the resulting vector can be determined using the right-hand rule: if you put the index of your right hand on `A` and the middle finger on `B` , then the thumb points in the direction of `AxB`.\\n\\n<br>\\n\\n![Image 1 - Cross Product](/files/cross.png)\\n\\n<br>\\n\\n### Task\\nImplement a shading effect on the cube object based on the cosine of the angle between the normal vector **N** of each object fragment and the direction vector **L** from the fragment to the light source, which is located at coordinates `(0.0, 1.0, 3.0)`.\\n\\n<br>\\n\\n![](/files/diffuse-lighting.png)\\n\\n<br>\\n\\nTo calculate the fragment normal **N**, use the `dFdx` and `dFdy` functions that you learned in the previous task, along with the new `cross` function.\\n\\n<br>\\n\\n**Note:** The fragment position is stored in the `vPos` variable.","hints":[],"restrictions":[],"order":33,"cost":10,"threshold":98,"likes":8,"dislikes":2,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 pos = transform * position.xyz;\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float angleX = 0.1;\\n  float angleY = -iTime;\\n  float angleZ = iTime * 0.5;\\n  \\n  mat3 rotateX = transpose(mat3(\\n    vec3(1, 0, 0),\\n    vec3(0, cos(angleX), -sin(angleX)),\\n    vec3(0, sin(angleX), cos(angleX))\\n  ));\\n\\n  mat3 rotateY = transpose(mat3(\\n    vec3(cos(angleY), 0, sin(angleY)),\\n    vec3(0, 1, 0),\\n    vec3(-sin(angleY), 0, cos(angleY))\\n  ));\\n\\n  mat3 rotateZ = transpose(mat3(\\n    vec3(cos(angleZ), -sin(angleZ), 0),\\n    vec3(sin(angleZ), cos(angleZ), 0),\\n    vec3(0, 0, 1)\\n  ));\\n\\n  setPosition3D(rotateZ * rotateY * rotateX);\\n}\\n","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 1.0, 3.0);\\n\\nvoid main() {\\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55), 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 pos = transform * position.xyz;\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float angleX = 0.1;\\n  float angleY = -iTime;\\n  float angleZ = iTime * 0.5;\\n  \\n  mat3 rotateX = transpose(mat3(\\n    vec3(1, 0, 0),\\n    vec3(0, cos(angleX), -sin(angleX)),\\n    vec3(0, sin(angleX), cos(angleX))\\n  ));\\n\\n  mat3 rotateY = transpose(mat3(\\n    vec3(cos(angleY), 0, sin(angleY)),\\n    vec3(0, 1, 0),\\n    vec3(-sin(angleY), 0, cos(angleY))\\n  ));\\n\\n  mat3 rotateZ = transpose(mat3(\\n    vec3(cos(angleZ), -sin(angleZ), 0),\\n    vec3(sin(angleZ), cos(angleZ), 0),\\n    vec3(0, 0, 1)\\n  ));\\n\\n  setPosition3D(rotateZ * rotateY * rotateX);\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 1.0, 3.0);\\n\\nvoid main() {\\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55), 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for beginner developers who want to learn the basics of fragment shaders and basic built-in GLSL functions. During the course, you will learn how fragment shaders work and how to use basic GLSL functions to create visual effects. Each topic is accompanied by theoretical material and a practical task that can be completed directly on the website.","skillsDesc":"what a fragment shader is, how they work, and why they are needed.<br>basic GLSL functions in practice and how they can be used to create visual effects.<br>how to create animated effects using time.<br>the basics of working with textures.","importanceDesc":"Fragment shaders and GLSL functions are fundamental for creating graphical effects in computer games, animation, and other visual applications. Understanding these technologies allows developers to create diverse visual effects, optimize the performance of graphical applications, and expand their skills in computer graphics.","certifiable":true,"images":["img-1.png","img-3.png","img-4.png","img-5.png","img-6.png","img-7.png"]}},{"id":7,"slug":"image-manipulation-with-shaders","name":"Image Manipulation with Shaders","description":"Learn various techniques for manipulating 2D images, treated as textures, using the capabilities provided by fragment shaders.","tasks":12,"acceptedTasks":0,"isOpen":false,"order":1,"locked":false,"cover":true,"child":{"id":7,"slug":"image-manipulation-with-shaders","name":"Image Manipulation with Shaders","description":"Learn various techniques for manipulating 2D images, treated as textures, using the capabilities provided by fragment shaders.","order":1,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":47,"slug":"tint","moduleId":7,"name":"Tint","order":0,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":47,"slug":"tint","moduleId":7,"name":"Tint","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 tintColor = vec3(1.0, 1.0, 0.0);\\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n\\n  gl_FragColor = vec4(texColor * tintColor, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To apply a **tint** to an image, we can use color multiplication. This involves multiplying each texel (pixel color) of the image by the tint color vector:\\n\\n```\\nresult = fragColor * tintColor;\\n```\\n\\nTint can be used to change the appearance of an object dynamically, such as changing the color of a character’s outfit or the hue of a scene based on time of day.\\n\\n### Task\\nCreate a shader program that will tint the original image with a shade of yellow.\\n\\n<br>\\n\\nHere you can recall how to access the texture that is attached to a shader program: [texture](https://shader-learning.com/module-training/2/task/39)","hints":[],"restrictions":[],"order":0,"cost":5,"threshold":95,"likes":2,"dislikes":4,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":175,"slug":"color-negative","moduleId":7,"name":"Color Negative","order":1,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":0,"premium":false,"child":{"task":{"id":175,"slug":"color-negative","moduleId":7,"name":"Color Negative","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n  vec3 negative = vec3(1.0) - texColor;\\n\\n  gl_FragColor = vec4(negative, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Color Negative** is an effect that inverts the colors of an image, producing a «negative»‎ version of the original. This effect is commonly used in photography and image processing to create visually striking results. In shader programming, the negative of an image is computed by subtracting the\\ncolor of each pixel from white:\\n\\n```\\nnegative = vec3(1.0, 1.0, 1.0) - fragColor;\\n```\\n\\nColour negatives can be used to create unique and artistic images. For example, to convey memories, dreams, or other unusual states.\\n\\n### Task\\nCreate a shader program that inverts the colors of the original image.\\n\\n<br>\\n\\nHere you can recall how to access the texture that is attached to a shader program: [texture](https://shader-learning.com/module-training/2/task/39)","hints":[],"restrictions":[],"order":1,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":48,"slug":"brightness","moduleId":7,"name":"Brightness","order":2,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":48,"slug":"brightness","moduleId":7,"name":"Brightness","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n  texColor.rgb = mix(vec3(0.0), texColor.rgb, 4.0);\\n\\n  gl_FragColor = vec4(texColor, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n\\n  gl_FragColor = vec4(texColor, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Brightness** indicates the degree of lightness or darkness of a color, in relation to its closeness to white. Lower values result in darker colors, while higher values result in lighter ones. The minimum and maximum values of 0% and 100%, respectively, correspond to black and white:\\n\\n```\\nbrightness = distance(color, vec3(0.0));\\n```\\n\\nBy selectively increasing the brightness of dark areas or decreasing the brightness of overlighted areas, you can reveal hidden details and improve the visibility of the image areas.\\n\\n### Task\\nCreate a shader programme that increases the brightness of an image by `4` times.\\n\\n<br>\\n\\nNote that after increasing the brightness, the dark parts of the image become more clearly visible. For example, previously the mountains, fence and plants behind the road were not visible.\\n","hints":[],"restrictions":[],"order":2,"cost":5,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n\\n  gl_FragColor = vec4(texColor, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n\\n  gl_FragColor = vec4(texColor, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":49,"slug":"relative-luminance","moduleId":7,"name":"Relative Luminance","order":3,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":49,"slug":"relative-luminance","moduleId":7,"name":"Relative Luminance","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 color = texture(iChannel0, uv).rgb;\\n  float luminance = dot(color, vec3(0.2126, 0.7152, 0.0722));\\n\\n  gl_FragColor = vec4(vec3(luminance), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Relative luminance** is a measure of the amount of light, taking into account the spectral weighting for human vision. Its values range from `0.0` to `1.0`. To calculate relative luminance, use the following formula based on the linear RGB components of each pixel:\\n\\n```\\nL = R * 0.2126 + G * 0.7152 + B * 0.0722;\\n```\\n\\nGreen light is the major component of luminance, responsible for the majority of light perceived by humans, while blue light is the smallest component. Note that the sum of these coefficients is `1.0000`, so the equation gives a value between `0.0` and `1.0`.\\n\\n<br>\\n\\nLuminance plays an important role in various image manipulation techniques, including grayscale conversion. To convert an image to grayscale, you replace each pixel\'s color with its luminance value.\\n\\n### Task\\nWrite a shader program that converts an image to grayscale using relative luminance.","hints":[],"restrictions":[],"order":3,"cost":5,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":120,"slug":"tone","moduleId":7,"name":"Tone","order":4,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":120,"slug":"tone","moduleId":7,"name":"Tone","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst vec3 refColor = vec3(1.0, 0.84, 0.0) * 1.5;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec4 texel = texture(iChannel0, uv);\\n  float luminance = dot(texel.rgb, vec3(0.2126, 0.7152, 0.0722));\\n\\n  gl_FragColor = vec4(refColor * luminance, texel.a);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 refColor = vec3(1.0, 0.84, 0.0) * 1.5;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The color tone of an image refers to the overall color cast or hue that is present in the image. \\n\\n<br>\\n\\nOne way to change the color tone of an image is by using color luminance:\\n1. calculate the luminance value for each pixel in the image.\\n2. multiply the reference tone color by luminance value to apply the effect.\\n\\n<br>\\n\\nAdditionally, by altering the brightness or intensity of colors, we can create a wide range of effects, from warm and inviting to cool and moody. \\n\\n<br>\\n\\nIn games, you can use this technique to visually alter the material of an object shown in a texture. For instance, imagine a single greyscale texture representing a medal. By adjusting the tonality, you can make it look like copper, silver, or gold. This allows for dynamic material changes without needing multiple textures.\\n \\n### Task\\nCreate a shader program that changes the color tone of the image to gold.","hints":[],"restrictions":[],"order":4,"cost":5,"threshold":95,"likes":4,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 refColor = vec3(1.0, 0.84, 0.0) * 1.5;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 refColor = vec3(1.0, 0.84, 0.0) * 1.5;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":50,"slug":"saturation","moduleId":7,"name":"Saturation","order":5,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":50,"slug":"saturation","moduleId":7,"name":"Saturation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 color = texture(iChannel0, uv).rgb;\\n  float luminance = dot(color, vec3(0.2126, 0.7152, 0.0722));\\n  color = mix(vec3(luminance), color, 5.0);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Color saturation is the intensity of a color, measured as a percentage from 0% to 100%. It specifies how far a color is from a gray of the same luminance. As the saturation increases, the colors appear more pure and vivid, while decreasing saturation makes colors appear more pale.\\n\\n<br>\\n\\n![Image 1 - Saturation](/files/saturation.png)\\n\\n<br>\\n\\nTo decrease the image saturation, move each pixel\'s color towards the relative luminance value. To increase the image saturation, move each pixel\'s color in the opposite direction of the relative luminance value.\\n\\n<br>\\n\\n![Image 2 - Saturation Direction](/files/saturation-direction.png)\\n\\n<br>\\n\\n### Task\\nCreate a shader program that increases the saturation of an image by `5` times.","hints":[],"restrictions":[],"order":5,"cost":5,"threshold":95,"likes":2,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":51,"slug":"contrast","moduleId":7,"name":"Contrast","order":6,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":51,"slug":"contrast","moduleId":7,"name":"Contrast","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 midPoint = vec3(0.5);\\n  vec3 color = texture(iChannel0, uv).rgb;\\n  float contrast = 2.0;\\n  color = (color - midPoint) * contrast + midPoint;\\n  color = clamp(color, 0.0, 1.0);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Contrast** is the measure of the difference between the darkest and lightest parts of an image. It is achieved by pushing the pixel colors away from the midpoint, making the dark parts darker and the bright parts lighter:\\n\\n```\\ncolor = (color - midpoint) * contrast + midpoint\\n```\\n\\n### Task\\nCreate a shader program that increases the contrast of the image by `2` times.\\n\\n```\\nmidPoint = (0.5, 0.5, 0.5);\\n```","hints":[],"restrictions":[],"order":6,"cost":5,"threshold":95,"likes":3,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":52,"slug":"color-distance","moduleId":7,"name":"Color Distance","order":7,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":52,"slug":"color-distance","moduleId":7,"name":"Color Distance","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst vec3 refColor = vec3(1.0, 0.0, 0.0);\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n  float weight = distance(refColor, texColor);\\n  float luminance = dot(texColor, vec3(0.2126, 0.7152, 0.0722));\\n  vec3 result = mix(texColor, vec3(luminance), weight);\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 refColor = vec3(1.0, 0.0, 0.0);\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Color distance** in rendering refers to the measure of difference between two colors. It quantifies how similar or different two colors are, often using mathematical formulas like the Euclidean distance in RGB space:\\n\\n```\\ndist = |color0 - color1| \\n```\\n\\nor in GLSL:\\n\\n```\\ndist = distance(color0, color1) \\n```\\n\\n**Uses and Purposes:**\\n\\n<br>\\n\\n• *Color Correction and Grading*. Adjusting colors to achieve a desired look or to match a reference color.\\n<br>\\n• *Image Segmentation*. Separating different objects or regions in an image based on color similarity.\\n<br>\\n• *Visual Effects*. Creating effects like selective desaturation, where colors distant from a reference color are desaturated to highlight specific elements.\\n\\n### Task\\nFor each image pixel, compute the Euclidean distance between its color and the `refColor` in RGB space. Decrease the saturation of the pixel color proportionally to the distance value.","hints":[],"restrictions":[],"order":7,"cost":5,"threshold":95,"likes":3,"dislikes":4,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 refColor = vec3(1.0, 0.0, 0.0);\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 refColor = vec3(1.0, 0.0, 0.0);\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":53,"slug":"color-direction","moduleId":7,"name":"Color Direction","order":8,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":53,"slug":"color-direction","moduleId":7,"name":"Color Direction","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst vec3 refColor = vec3(1.0, 0.0, 0.0);\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n  float weight = dot(normalize(refColor), normalize(texColor));\\n  float luminance = dot(texColor, vec3(0.2126, 0.7152, 0.0722));\\n  vec3 result = mix(vec3(luminance), texColor, weight * 2.0);\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst vec3 refColor = vec3(1.0, 0.0, 0.0);\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n  float weight = distance(refColor, texColor) / sqrt(3.0);\\n  float luminance = dot(texColor, vec3(0.2126, 0.7152, 0.0722));\\n  vec3 result = mix(texColor, vec3(luminance), weight * 2.0);\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"We can think of color values as direction vectors rather than just points in space. By calculating the angle between the target color and the color vector, we can assess the deviation from the desired hue:\\n\\n\\n```\\ndeviation = dot(normalize(color0), normalize(color1));\\n```\\n\\nSince the color components are always positive, the deviation value will range from `0.0` to `1.0`.\\n\\n<br>\\n\\nUnlike the color distance method, this approach keeps colors that share the same direction, even if their brightness levels differ.\\n\\n### Task\\nYou have a program that calculates how much the color of a texture pixel deviates from a reference value using a distance measurement. Your task is to modify this program to utilize a color direction approach instead of distance.\\n\\n<br>\\n\\n**Note:** Compare how the weight coefficient changes for the distance approach and the direction approach when two colors are similar and when they differ.","hints":[],"restrictions":[],"order":8,"cost":5,"threshold":95,"likes":2,"dislikes":2,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst vec3 refColor = vec3(1.0, 0.0, 0.0);\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n  float weight = distance(refColor, texColor) / sqrt(3.0);\\n  float luminance = dot(texColor, vec3(0.2126, 0.7152, 0.0722));\\n  vec3 result = mix(texColor, vec3(luminance), weight * 2.0);\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst vec3 refColor = vec3(1.0, 0.0, 0.0);\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec3 texColor = texture(iChannel0, uv).rgb;\\n  float weight = distance(refColor, texColor) / sqrt(3.0);\\n  float luminance = dot(texColor, vec3(0.2126, 0.7152, 0.0722));\\n  vec3 result = mix(texColor, vec3(luminance), weight * 2.0);\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":54,"slug":"pixelation","moduleId":7,"name":"Pixelation","order":9,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":54,"slug":"pixelation","moduleId":7,"name":"Pixelation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 resolution = iResolution / vec2(10.0);\\n  uv = floor(uv * resolution) / resolution;\\n\\n  gl_FragColor = vec4(texture(iChannel0, uv).rgb, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Assume that the screen size always matches the texture size. Thus, each screen pixel corresponds to one texture pixel:\\n\\n<br>\\n\\n![Texture - Screen](/files/pixelation-eq-resolution.png)\\n\\n<br>\\n\\nTo make the texture appear more pixelated on the screen, its resolution should be lower than the screen resolution. This way, one texture pixel will correspond to multiple screen pixels:\\n\\n<br>\\n\\n![Texture - Screen](/files/pixelation-low-resolution.png)\\n\\n<br>\\n\\nWe can simulate pixelation by dividing the screen into blocks of size **N**x**N** pixels and assigning each block a single pixel from the texture. For simplicity, we will take the color of the first pixel from each block in the texture and apply it to the entire block on the screen:\\n\\n<br>\\n\\n![Texture - Screen](/files/pixelation-convolution.png)\\n\\n### Task\\nDivide the screen into a grid of `10` by `10` pixels. Assign each area with the texel that corresponds to the pixel with the smallest `uv` coordinates within that area.","hints":[],"restrictions":[],"order":9,"cost":5,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":176,"slug":"edge-detection","moduleId":7,"name":"Edge Detection","order":12,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":176,"slug":"edge-detection","moduleId":7,"name":"Edge Detection","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\nuniform vec2 iChannelSize0;\\n\\nvoid main() {\\n  vec2 texCoord = gl_FragCoord.xy / iResolution.xy;\\n  vec2 texelSize = 1.0 / iChannelSize0;\\n\\n  float x = texelSize.x;\\n  float y = texelSize.y;\\n\\n  vec3 w = vec3(0.2125, 0.7154, 0.0721);\\n\\n  vec3 t00 = texture(iChannel0, vec2(texCoord.x - x, texCoord.y - y)).rgb;\\n  vec3 t01 = texture(iChannel0, vec2(texCoord.x - x, texCoord.y)).rgb;\\n  vec3 t02 = texture(iChannel0, vec2(texCoord.x - x, texCoord.y + y)).rgb;\\n\\n  vec3 t10 = texture(iChannel0, vec2(texCoord.x, texCoord.y - y)).rgb;\\n  vec3 t11 = texture(iChannel0, vec2(texCoord.x, texCoord.y)).rgb;\\n  vec3 t12 = texture(iChannel0, vec2(texCoord.x, texCoord.y + y)).rgb;\\n\\n  vec3 t20 = texture(iChannel0, vec2(texCoord.x + x, texCoord.y - y)).rgb;\\n  vec3 t21 = texture(iChannel0, vec2(texCoord.x + x, texCoord.y)).rgb;\\n  vec3 t22 = texture(iChannel0, vec2(texCoord.x + x, texCoord.y + y)).rgb;\\n\\n  float v = dot(t20, w) + 2.0 * dot(t21, w) + dot(t22, w) - dot(t00, w) - 2.0 * dot(t01, w) - dot(t02, w);\\n\\n  float h = dot(t02, w) + 2.0 * dot(t12, w) + dot(t22, w) - dot(t00, w) - 2.0 * dot(t10, w) - dot(t20, w);\\n\\n  float mag = length(vec2(v, h));\\n\\n  gl_FragColor = vec4(vec3(mag), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\nuniform vec2 iChannelSize0;\\n\\nvoid main() {\\n  vec2 texCoord = gl_FragCoord.xy / iResolution.xy;\\n  vec2 texelSize = 1.0 / iChannelSize0;\\n\\n  vec3 w = vec3(0.2125, 0.7154, 0.0721);\\n\\n  gl_FragColor = texture(iChannel0, vec2(texCoord));\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"Edge detection is a technique used in image processing to identify points in an image where the brightness changes sharply. These points typically correspond to the boundaries of objects within the image. The **Sobel filter** is a popular edge detection method that uses convolution kernels to approximate the gradient of the image intensity.\\n\\n<br>\\n\\n### Gradient\\n\\n<br>\\n\\nThe gradient of image intensity refers to how quickly the brightness of the image changes from one pixel to the next.\\n\\n<br>\\n\\n### Convolution Kernel\\n\\n<br>\\n\\nA convolution kernel is a small matrix of numbers. Think of it as a tiny window that you slide over an image to look at small parts of it at a time.\\n\\n<br>\\n\\n![](/files/edge-detection-convolution-kernel.png)\\n\\n<br>\\n\\nFor each position, you multiply the numbers in the kernel by the corresponding values in the image, then add up all those products. This gives you a new value for the pixel, which can be used to create effects like blurring, sharpening, or detecting edges.\\n\\n<br>\\n\\n### Sobel filter\\n\\n<br>\\n\\nThe Sobel filter uses two kernels (horizontal **Gx**, vertical **Gy**):\\n\\n```\\n     |-1  0  1|\\nGx = |-2  0  2|\\n     |-1  0  1|\\n\\n     |-1 -2 -1|\\nGy = | 0  0  0|\\n     | 1  2  1|\\n```\\n\\nThe horizontal filter **Gx** calculates the gradient in the x-direction, and the vertical filter **Gy** calculates the gradient in the y-direction. The magnitude **M** of the gradient at each pixel is then calculated using the formula:\\n\\n```\\nM = sqrt(Gx * Gx + Gy * Gy)\\n```\\n\\nThis gives the strength of the edge at each pixel.\\n\\n### Task\\nConvert the image to grayscale by calculating the relative luminance. Then apply the Sobel filter by convolving the grayscale image with the horizontal and vertical kernels. Output the magnitude of the gradient of the image intensity.","hints":[],"restrictions":[],"order":12,"cost":5,"threshold":95,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\nuniform vec2 iChannelSize0;\\n\\nvoid main() {\\n  vec2 texCoord = gl_FragCoord.xy / iResolution.xy;\\n  vec2 texelSize = 1.0 / iChannelSize0;\\n\\n  vec3 w = vec3(0.2125, 0.7154, 0.0721);\\n\\n  gl_FragColor = texture(iChannel0, vec2(texCoord));\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\nuniform vec2 iChannelSize0;\\n\\nvoid main() {\\n  vec2 texCoord = gl_FragCoord.xy / iResolution.xy;\\n  vec2 texelSize = 1.0 / iChannelSize0;\\n\\n  vec3 w = vec3(0.2125, 0.7154, 0.0721);\\n\\n  gl_FragColor = texture(iChannel0, vec2(texCoord));\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":177,"slug":"toon","moduleId":7,"name":"Toon","order":13,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":177,"slug":"toon","moduleId":7,"name":"Toon","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\nuniform vec2 iChannelSize0;\\n\\nfloat radius = 2.0;\\n\\nvoid main() {\\n  vec2 texCoord = gl_FragCoord.xy / iResolution.xy;\\n  vec2 texelSize = 1.0 / iChannelSize0 * radius;\\n\\n  vec3 w = vec3( 0.2125, 0.7154, 0.0721 );\\n\\n  float x = texelSize.x;\\n  float y = texelSize.y;\\n\\n  vec3 t00 = texture(iChannel0, vec2(texCoord.x - x, texCoord.y - y)).rgb;\\n  vec3 t01 = texture(iChannel0, vec2(texCoord.x - x, texCoord.y)).rgb;\\n  vec3 t02 = texture(iChannel0, vec2(texCoord.x - x, texCoord.y + y)).rgb;\\n\\n  vec3 t10 = texture(iChannel0, vec2(texCoord.x, texCoord.y - y)).rgb;\\n  vec3 t11 = texture(iChannel0, vec2(texCoord.x, texCoord.y)).rgb;\\n  vec3 t12 = texture(iChannel0, vec2(texCoord.x, texCoord.y + y)).rgb;\\n\\n  vec3 t20 = texture(iChannel0, vec2(texCoord.x + x, texCoord.y - y)).rgb;\\n  vec3 t21 = texture(iChannel0, vec2(texCoord.x + x, texCoord.y)).rgb;\\n  vec3 t22 = texture(iChannel0, vec2(texCoord.x + x, texCoord.y + y)).rgb;\\n\\n  float v = dot(t20, w) + 2.0 * dot(t21, w) + dot(t22, w) - dot(t00, w) - 2.0 * dot(t01, w) - dot(t02, w);\\n\\n  float h = dot(t02, w) + 2.0 * dot(t12, w) + dot(t22, w) - dot(t00, w) - 2.0 * dot(t10, w) - dot(t20, w);\\n\\n  float mag = length(vec2(v, h));\\n\\n  if (mag > 0.5) {\\n    gl_FragColor = vec4(vec3(0.0), 1.0);\\n  } else {\\n    float q = 5.0;\\n    gl_FragColor = vec4(floor(t11 * q + 0.5) / q, 1.0);\\n  }\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\nuniform vec2 iChannelSize0;\\n\\nfloat radius = 2.0;\\n\\nvoid main() {\\n  vec2 texCoord = gl_FragCoord.xy / iResolution.xy;\\n  vec2 texelSize = 1.0 / iChannelSize0 * radius;\\n\\n  vec3 w = vec3(0.2125, 0.7154, 0.0721);\\n\\n  gl_FragColor = texture(iChannel0, vec2(texCoord));\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"A **toon shader** is a non-photorealistic rendering technique designed to make graphics appear flat and cartoon-like. This effect is achieved by using fewer shading colors instead of smooth gradients, giving the image a stylized, hand-drawn look similar to comic books or traditional 2D animation.\\n\\n<br>\\n\\n### Toon shader steps:\\n\\n1. calculate the [luminance](https://shader-learning.com/module-training/7/task/49) of each pixel.\\n2. apply the [Sobel edge-detection filter](https://shader-learning.com/module-training/7/task/176) and get a magnitude.\\n3. if magnitude > **threshold**, color the pixel black\\n4. else, quantize the pixel\'s color.\\n5. output the colored pixel.\\n\\n### Color Quantization\\n\\n<br>\\n\\nColor quantization is a process used in image processing to reduce the number of distinct colors in an image. Usually, 32 bits are allocated for the color of an RGBA pixel, meaning each color channel is given 8 bits or 256 values. To reduce the number of values in each channel to **Q** values, you need to:\\n\\n1. Normalize the channel values to the interval [0.0, 1.0]. Usually, in shader programs, all colors are already normalized, so this step can be skipped.\\n2. Multiply each channel value by **Q**, round to the nearest integer, and divide back by **Q**.\\n\\n\\n### Task\\nImplement the toon shader. Use `0.5` as a threshold value when rendering edges. Reduce the number of values in each color channel to `5`.\\n\\n<br>\\n\\nYou can play with the radius value to see how it affects the result. Set the value back to `2.0` when you submit the task","hints":[],"restrictions":[],"order":13,"cost":5,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\nuniform vec2 iChannelSize0;\\n\\nfloat radius = 2.0;\\n\\nvoid main() {\\n  vec2 texCoord = gl_FragCoord.xy / iResolution.xy;\\n  vec2 texelSize = 1.0 / iChannelSize0 * radius;\\n\\n  vec3 w = vec3(0.2125, 0.7154, 0.0721);\\n\\n  gl_FragColor = texture(iChannel0, vec2(texCoord));\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\nuniform vec2 iChannelSize0;\\n\\nfloat radius = 2.0;\\n\\nvoid main() {\\n  vec2 texCoord = gl_FragCoord.xy / iResolution.xy;\\n  vec2 texelSize = 1.0 / iChannelSize0 * radius;\\n\\n  vec3 w = vec3(0.2125, 0.7154, 0.0721);\\n\\n  gl_FragColor = texture(iChannel0, vec2(texCoord));\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for developers who want to master various techniques for transforming 2D textures using fragment shaders. You will learn how to apply these techniques to create visual effects and process images for data collection. Each topic includes theoretical material and a practical task that can be completed directly on the website.","skillsDesc":"understand how fragment shaders can be used to transform 2D textures.<br>various texture transformation and processing techniques.<br>apply transformations to improve image quality and prepare it for analysis.","importanceDesc":"Transforming textures with fragment shaders is essential not only for creating visual effects in games and animations but also for solving tasks in machine learning and computer vision. These transformations can be used to enhance image quality, create artistic effects, improve visual perception, and prepare images for object recognition and analysis. This knowledge will help you expand your skills in computer graphics and image processing.","certifiable":false,"images":["img-1.png","img-2.png","img-3.png","img-4.png"]}},{"id":9,"slug":"vertex-transformations","name":"Vertex Transformations","description":"Gain a comprehensive understanding of vertex shaders and their role in the graphics pipeline.","tasks":23,"acceptedTasks":0,"isOpen":false,"order":2,"locked":false,"cover":true,"child":{"id":9,"slug":"vertex-transformations","name":"Vertex Transformations","description":"Gain a comprehensive understanding of vertex shaders and their role in the graphics pipeline.","order":2,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":158,"slug":"vertex-shader-vertex","moduleId":9,"name":"Vertex Shader - Vertex","order":0,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":158,"slug":"vertex-shader-vertex","moduleId":9,"name":"Vertex Shader - Vertex","vertexShader":"attribute int index;\\n\\nconst float dx[3] = float[](-0.5,  0.5, 0.0);\\nconst float dy[3] = float[](-0.5, -0.5, 0.5);\\n\\nvoid main() {\\n  gl_Position = vec4(dx[index], dy[index], 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":\\"-1\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"7\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"**Vertex** is a point in 3D space that defines the corners of geometric shapes and is used to construct the mesh of a 3D model. The mesh itself is typically made up of triangles, which are the simplest polygonal shapes that can define a surface in 3D space.\\n\\n<br>\\n\\n![](/files/vertex-triangles.png)\\n\\n<br>\\n\\nWhen rendering an object, the GPU starts with an array of vertices. These vertices are then processed by the **vertex shader**, which is one of the first stages in the graphics pipeline.\\n\\n<br>\\n\\n![](/files/vertex-shader-shallow-pipeline.png)\\n\\n<br>\\n\\n**Vertex shader** is responsible for transforming the vertex position. The resulting position value must be set to the predefined `gl_Position` variable which is a `vec4`. The final position must be normalized to **NDC**(Normalized Device Coordinates) where **x**, **y** and **z** coordinates are between `-1.0` and `1.0`. Any coordinates that go beyond this limit will be discarded and not displayed on the screen.\\n\\n### Task\\n\\nGiven a triangle object defined by 3 vertices. All it\'s vertices are located at the origin `(0, 0, 0)`.\\n\\n![](/files/vertex-shader-triangle.png)\\n\\nWrite a vertex shader that uses the vertex index to appropriately move each vertex by `0.5` on the X and Y axes to produce a triangle on the screen.","hints":[],"restrictions":[],"order":0,"cost":5,"threshold":99,"likes":2,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":159,"slug":"face-culling","moduleId":9,"name":"Face Culling","order":1,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":159,"slug":"face-culling","moduleId":9,"name":"Face Culling","vertexShader":"attribute int index;\\n\\nconst float dx[3] = float[](0.0, +0.5, -0.5);\\nconst float dy[3] = float[](0.5, -0.5, -0.5);\\n\\nvoid main() {\\n  gl_Position = vec4(dx[2 - index], dy[2 - index], 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"attribute int index;\\n\\nconst float dx[3] = float[](0.0, +0.5, -0.5);\\nconst float dy[3] = float[](0.5, -0.5, -0.5);\\n\\nvoid main() {\\n  gl_Position = vec4(dx[index], dy[index], 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":\\"-1\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"7\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"**Face culling** is an optimisation technique in computer graphics that discards polygons that face away from the camera. \\n\\n<br>\\n\\n![](/files/face-culling-cube.png)\\n\\n<br>\\n\\nWhen defining triangles, we set the vertices in a certain order, which can be either **clockwise** or **counter-clockwise**. By default, triangles defined with counter-clockwise vertices are assumed to be **front-facing**. That is, when you visualise a triangle, it should look as if it is pointing directly at you.\\n\\n<br>\\n\\n![](/files/face-culling-clockwise.png)\\n\\n<br>\\n\\nIf face culling is activated, it will be performed right after the *vertex shader*.\\n\\n<br>\\n\\n![](/files/face-culling-pipeline.png)\\n\\n<br> \\n\\n### Task\\n*Face culling* is configured so that triangles defined with *counterclockwise* vertices are face triangles. Change the vertex arrangement so that the triangle is displayed on the screen.","hints":[],"restrictions":[],"order":1,"cost":5,"threshold":99,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"attribute int index;\\n\\nconst float dx[3] = float[](0.0, +0.5, -0.5);\\nconst float dy[3] = float[](0.5, -0.5, -0.5);\\n\\nvoid main() {\\n  gl_Position = vec4(dx[index], dy[index], 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"attribute int index;\\n\\nconst float dx[3] = float[](0.0, +0.5, -0.5);\\nconst float dy[3] = float[](0.5, -0.5, -0.5);\\n\\nvoid main() {\\n  gl_Position = vec4(dx[index], dy[index], 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":160,"slug":"triangles-composition","moduleId":9,"name":"Triangles Composition","order":2,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":160,"slug":"triangles-composition","moduleId":9,"name":"Triangles Composition","vertexShader":"attribute int index;\\n\\nconst float dx[6] = float[](-0.5,  0.5, 0.5, /**/ -0.5, 0.5, -0.5);\\nconst float dy[6] = float[](-0.5, -0.5, 0.5, /**/ -0.5, 0.5,  0.5);\\n\\nvoid main() {\\n  vec2 pos = position.xy + vec2(dx[index], dy[index]);  \\n  \\n  gl_Position = vec4(pos, 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":\\"-1\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"8\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"In 3D graphics, objects are frequently composed of triangles. \\n\\n<br>\\n\\n![](/files/triangles-composition-duck.png)\\n\\n<br>\\n\\nThis design choice is driven by several key factors:\\n\\n<br>\\n\\n**Stability**. A triangle always lies in a single plane and cannot be «deformed», unlike polygons with more vertices that can be non-coplanar. This inherent stability ensures that the basic shape of the triangles remains consistent during transformations and rendering.\\n\\n<br>\\n\\n**Efficiency**. Triangles are easily processed and rendered by graphics processors. Their simplicity allows for quick calculations and less computational load, making them ideal for real-time rendering in video games and simulations.\\n\\n<br>\\n\\n**Versatility**. Any geometric shape can be approximated with triangles. This flexibility enables the creation of complex structures and detailed models with relative ease. By breaking down surfaces into triangular facets, designers can achieve a high level of detail and realism.\\n\\n<br>\\n\\nThese unique properties make triangles indispensable in the field of computer graphics, providing a balance between performance and visual fidelity.\\n\\n### Task\\nGiven a set of six vertices, where the first three vertices (0, 1, 2) form the first triangle and the second set of three vertices (3, 4, 5) form the second triangle. All vertices are located at the origin.\\n\\n<br>\\n\\nWrite a vertex shader that utilizes the vertex index to appropriately translate each vertex so that the two triangles form a square on the screen. The center of the square should be at the origin, with width and height equal to 1. \\n\\n<br> \\n\\nBecause of the aspect ratio, visually the parameters of the square may be distorted (ignore this).","hints":[],"restrictions":[],"order":2,"cost":5,"threshold":99,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":161,"slug":"index-buffer","moduleId":9,"name":"Index Buffer","order":3,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":161,"slug":"index-buffer","moduleId":9,"name":"Index Buffer","vertexShader":"attribute int index;\\n\\nconst float dx[4] = float[](-0.5,  0.5, 0.5, -0.5);\\nconst float dy[4] = float[](-0.5, -0.5, 0.5,  0.5);\\n\\nvoid main() {\\n  vec2 pos = vec2(dx[index], dy[index]);\\n  gl_Position = vec4(pos, 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":\\"-1\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"9\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"In our previous lesson, we learned how to draw a square using 2 triangles and 6 vertices.\\n\\n<br>\\n\\n![](/files/index-buffer-six-vertices.png)\\n\\n<br>\\n\\nHowever, you might have noticed that we specified the bottom-left and top-right vertices twice. This isn\'t the most efficient use of resources since a rectangle can be described with just 4 vertices instead of 6.\\n\\n<br>\\n\\n![](/files/index-buffer-four-vertices.png)\\n\\n<br>\\n\\nThe optimal solution to this problem is to store only unique vertices and then separately define the order in which we want the rendering to occur. This is where **index buffers** come into play. They allow us to reuse vertices that appear in multiple triangles, reducing the total number of vertices needed to render a 3D object.\\n\\n<br>\\n\\n**How it works:**\\n\\n1. **Vertex Storage**. The vertices of an object are stored in a vertex buffer.\\n\\n![](/files/index-buffer-vertex-buffer.png)\\n\\n2. **Indexing**. Each vertex is assigned a unique index.\\n\\n![](/files/index-buffer-vertex-buffer-indexed.png)\\n\\n3. **Index Buffer**. The vertex indices that form triangles are written into an index buffer in a specific order.\\n\\n![](/files/index-buffer-index-buffer.png)\\n\\n4. **Rendering**. The GPU uses the indices from the index buffer to access the vertices in the vertex buffer and draw the triangles.\\n\\n<br>\\n\\nIndex buffers enable the GPU to reuse already processed vertices to form multiple triangles, which reduces shader calls and increases rendering efficiency. For example, when you render a square defined by **four vertices** and **six indices** (which usually means two triangles), the vertex shader will be called once for each unique vertex. Since there are four unique vertices, the vertex shader will be invoked **4 times**.\\n\\n### Task\\n\\nGiven a set of four vertices. All vertices are located at the origin.\\n\\n<br>\\n\\nIndex Buffer: [0, 1, 2, 2, 3, 0].\\n\\n<br>\\n\\nWrite a vertex shader that utilizes the vertex index to appropriately translate each vertex to produce a square on the screen. The centre of the square should be at the origin, with width and height equal to 1.\\n\\n<br>\\n\\nBecause of the aspect ratio, visually the parameters of the square may be distorted (ignore this).","hints":[],"restrictions":[],"order":3,"cost":5,"threshold":99,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"attribute int index;\\n\\nvoid main() {\\n  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":162,"slug":"perspective-division","moduleId":9,"name":"Perspective division","order":4,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":162,"slug":"perspective-division","moduleId":9,"name":"Perspective division","vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nconst float dx[4] = float[](-0.5,  0.5, 0.5, -0.5);\\nconst float dy[4] = float[](-0.5, -0.5, 0.5,  0.5);\\n\\nvoid main() {\\n  vec2 pos = vec2(dx[index], dy[index]);\\n\\n  float t = -cos(iTime) * 0.25 + 1.25;\\n  float dw[4] = float[](1.0 / t, 1.0 / t, t, t);\\n  \\n  gl_Position = vec4(pos, 0.0, dw[index]);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nconst float dx[4] = float[](-0.5,  0.5, 0.5, -0.5);\\nconst float dy[4] = float[](-0.5, -0.5, 0.5,  0.5);\\n\\nvoid main() {\\n  vec2 pos = vec2(dx[index], dy[index]);\\n  \\n  gl_Position = vec4(pos, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":\\"-1\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"9\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"**Perspective division** is the process of converting 4D coordinates into 3D normalised device coordinates. The conversion is done by dividing the *x*, *y* and *z* coordinates by the *w* coordinate:\\n\\n```\\n      |x / w|\\nout = |y / w|\\n      |z / w|\\n```\\n\\nAs a result, we can observe the effect of perspective if the value of *w* varies with distance.\\n\\n<br>\\n\\n![](/files/perspective-division-distance.png)\\n\\n<br>\\n\\n**Perspective division** is performed automatically after *face culling* and passing the vertices to the next rendering stage.\\n\\n<br>\\n\\n![](/files/perspective-division-pipeline.png)\\n\\n### Task\\nWrite a vertex shader that utilizes the vertex index to change the perspective division parameter in time. The parameter `w` for the top vertices should change from `1.0` to `1.5`, for the bottom vertices from `1.0` to `(1.0 / 1.5)`. For animation use cosine or sine.","hints":[],"restrictions":[],"order":4,"cost":5,"threshold":99,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":12,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nconst float dx[4] = float[](-0.5,  0.5, 0.5, -0.5);\\nconst float dy[4] = float[](-0.5, -0.5, 0.5,  0.5);\\n\\nvoid main() {\\n  vec2 pos = vec2(dx[index], dy[index]);\\n  \\n  gl_Position = vec4(pos, 0.0, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nconst float dx[4] = float[](-0.5,  0.5, 0.5, -0.5);\\nconst float dy[4] = float[](-0.5, -0.5, 0.5,  0.5);\\n\\nvoid main() {\\n  vec2 pos = vec2(dx[index], dy[index]);\\n  \\n  gl_Position = vec4(pos, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":125,"slug":"rasterizer","moduleId":9,"name":"Rasterizer","order":5,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":125,"slug":"rasterizer","moduleId":9,"name":"Rasterizer","vertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  vec3 delta = vec3(0.5 * sin(iTime), 0.0, 0.0);\\n  \\n  gl_Position =  vec4(position + delta, 1.0);\\n}","fragmentShader":"uniform float iTime;\\n\\nvoid main() {\\n  float t = sin(iTime) * 0.5 + 0.5;\\n  vec3 fromColor = vec3(1.0, 0.0, 0.0);\\n  vec3 toColor = vec3(0.0, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(fromColor, toColor, t), 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  vec3 delta = vec3(0.5 * sin(iTime), 0.0, 0.0);\\n  \\n  gl_Position =  vec4(position + delta, 1.0);\\n}","defaultFragmentShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"75\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"0\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"If the coordinates of primitives, after passing through the *vertex shader*, *face culling*, and *perspective division*, fall within the clip space range [-1.0, 1.0], they are sent to the **rasterizer**.\\n\\n<br>\\n\\n![Image 1 - Pipeline](/files/rasterizer-pipeline.png)\\n\\n<br>\\n\\nThe **rasterizer** then generates fragments (pixels) for each primitive that intersects with a screen pixel.\\n\\n<br>\\n\\n![Image 2 - Rasterization](/files/rasterizer.png)\\n\\n<br>\\n\\nEach fragment is then processed by the **fragment shader**, which determines its final color. The output of the fragment shader is then sent to the frame buffer for display on the screen.\\n\\n### Task\\nCreate a shader program that smoothly changes the color of the triangle over time using sine function, so that when the triangle is on the left side of the screen it is red, and when it is on the right it is blue.","hints":[],"restrictions":[],"order":5,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  vec3 delta = vec3(0.5 * sin(iTime), 0.0, 0.0);\\n  \\n  gl_Position =  vec4(position + delta, 1.0);\\n}","fragmentShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  vec3 delta = vec3(0.5 * sin(iTime), 0.0, 0.0);\\n  \\n  gl_Position =  vec4(position + delta, 1.0);\\n}","defaultFragmentShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":126,"slug":"varying","moduleId":9,"name":"Varying","order":6,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":126,"slug":"varying","moduleId":9,"name":"Varying","vertexShader":"uniform float iTime;\\n\\nvarying vec3 fragPos;\\n\\nvoid main() {\\n  fragPos = position + vec3(0.5 * sin(iTime), 0.5 * cos(iTime), 0.0);\\n  gl_Position = vec4(fragPos, 1.0);\\n}","fragmentShader":"varying vec3 fragPos;\\n\\nvoid main() {\\n  gl_FragColor = vec4(fragPos * 0.5 + 0.5, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  vec3 fragPos = position + vec3(0.5 * sin(iTime), 0.5 * cos(iTime), 0.0);\\n  gl_Position = vec4(fragPos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"1\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"75\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"0\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"In OpenGL, **varyings** are variables that are used to pass data from the *vertex shader* to the *fragment shader*. These variables can store information such as color, texture coordinates, normals, and other attributes that are specific to each vertex of a mesh.\\n\\n<br>\\n\\nWhen a mesh is rendered, the vertex shader processes each vertex and outputs its varying data. For example, in image 1, each vertex has its own color value (black, green and red).\\n\\n<br>\\n\\n![Image 1 - Vertices Color Data](/files/varying-interpolation.png)\\n\\n<br>\\n\\nIf we output the color using varying, then it will be **interpolated** across the surface of the mesh to determine the values for each fragment (or pixel) that is shaded by the fragment shader.\\n\\n<br>\\n\\n![Image 2 - Color Interpolation](/files/varying-geometry.png)\\n\\n<br>\\n\\nThe type of interpolation used for varyings in OpenGL can be specified using qualifiers in the shader code. The default interpolation mode is `smooth`, which blends the values of adjacent vertices smoothly across the surface of the mesh. Other interpolation modes include `flat`, which uses the value of the nearest vertex for all fragments in a primitive.\\n\\n<br>\\n\\n### How to Use Varyings\\n\\n<br>\\n\\nVaryings are declared in the vertex shader using the `varying` keyword followed by the data type and variable name:\\n\\n```\\nsmooth varying vec3 fragColor;\\n\\nvoid main() {\\n   fragColor = vertexColor;\\n   ...\\n}\\n```\\n\\nit declares a varying variable named `fragColor` of type `vec3` that will be passed from the vertex shader to the fragment shader.\\n\\n<br>\\n\\nTo use a varying in the fragment shader, it must also be declared with the same data type and variable name:\\n\\n```\\nsmooth varying vec3 fragColor;\\n\\nvoid main() {\\n   gl_FragColor = fragColor;\\n}\\n```\\n\\nAs a result, the color will be smoothly interpolated across the entire surface of the triangle.\\n\\n### Task\\nWrite a shader program that uses the position of a fragment on the screen as the color of the triangle fragment. Since screen coordinates in [-1, 1] range, you need to map these values to the [0, 1] range before outputting the color.","hints":[],"restrictions":[],"order":6,"cost":5,"threshold":95,"likes":2,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  vec3 fragPos = position + vec3(0.5 * sin(iTime), 0.5 * cos(iTime), 0.0);\\n  gl_Position = vec4(fragPos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  vec3 fragPos = position + vec3(0.5 * sin(iTime), 0.5 * cos(iTime), 0.0);\\n  gl_Position = vec4(fragPos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":148,"slug":"vertex-attributes","moduleId":9,"name":"Vertex Attributes","order":8,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":148,"slug":"vertex-attributes","moduleId":9,"name":"Vertex Attributes","vertexShader":"// Already availabe:\\n// attribute vec3 position;\\n// attribute vec3 uv;\\n\\nattribute int  index;\\nattribute vec3 nextPosition;\\n\\nconst float widthHalf = 0.3;\\n\\nvoid main() {\\n  vec2 ratio = vec2(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0);\\n  \\n  vec3 dir = normalize(nextPosition - position);\\n  vec2 n = vec2(-dir.y, dir.x);\\n  if (index % 2 == 1) {\\n    n *= -1.0;  \\n  }\\n  \\n  gl_Position = vec4(position.xy * ratio + n * widthHalf * ratio, 0.0, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","defaultVertexShader":"// Already availabe:\\n// attribute vec3 position;\\n// attribute vec3 uv;\\n\\nconst float widthHalf = 0.3;\\n\\nvoid main() {\\n  vec2 ratio = vec2(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0);\\n  \\n  gl_Position = vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"4\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"The vertex array containing an object\'s geometry is made up of one or more vertex attributes. At a minimum, there is one attribute that holds the position of each vertex, typically as a 3D vector of object-space x, y, and z coordinates. Most of the time, the vertex array contains several more attributes holding additional per-vertex information such as per-vertex color, normal vector, and 2D texture coordinates.\\n\\n<br>\\n\\n![Image 1 - Vertex Attributes](/files/vertex-attributes.png)\\n\\n<br>\\n\\nVertex attributes can hold various types of data, including scalar values (`float`, `int`), vectors (`vec2`, `vec3`, `vec4`), matrices (`mat2`, `mat3`, `mat4`), and custom data types.\\n\\n<br>\\n\\nTo access vertex attributes in a shader program, you need to define input variables in the vertex shader that correspond to the vertex attributes. This is typically done using the ‘attribute’ keyword in the vertex shader. For example:\\n\\n```\\nattribute vec3 position; // Vertex attribute for position\\n\\nvoid main() {\\n    gl_Position = vec4(position, 1.0); // Set the position of the vertex\\n}\\n```\\n\\n\\nIn the above code snippet, `position` is a vertex attribute that holds a 3D vector representing the position of the vertex.\\n\\n### Task\\nGiven a quad object defined by 4 vertices. A quad has length and direction, but no width: \\n\\n<br>\\n\\n![Image 1 - Collapsed Quad](/files/vertex-attributes-task-given.png) \\n\\n<br>\\n\\nYou need to add width to the quad by moving the vertices apart, taking into account the direction of the quad.\\n\\n<br>\\n\\n![Image 2 - Vertex Attributes](/files/vertex-attributes-task-expected.png)\\n\\n<br>\\n\\nVertices 0 and 1 have information about the initial position of vertices 2 and 3 (`nextPosition`), and vice versa. Also, each vertex is given a serial number (`index`) of integer type. Here the structure of the attributes:\\n\\n<br>\\n\\n![Image 3 - Vertex Attributes](/files/vertex-attributes-task-attributes.png)\\n\\n<br>\\n\\nYou also need to consider the aspect ratio.\\n\\n<br>\\n\\n**Note**: All values such as vertex position and calculations are performed in NDC","hints":[],"restrictions":[],"order":8,"cost":5,"threshold":99,"likes":2,"dislikes":3,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"// Already availabe:\\n// attribute vec3 position;\\n// attribute vec3 uv;\\n\\nconst float widthHalf = 0.3;\\n\\nvoid main() {\\n  vec2 ratio = vec2(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0);\\n  \\n  gl_Position = vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","defaultVertexShader":"// Already availabe:\\n// attribute vec3 position;\\n// attribute vec3 uv;\\n\\nconst float widthHalf = 0.3;\\n\\nvoid main() {\\n  vec2 ratio = vec2(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0);\\n  \\n  gl_Position = vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":151,"slug":"vertex-attributes-circle","moduleId":9,"name":"Vertex Attributes - Circle","order":9,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":151,"slug":"vertex-attributes-circle","moduleId":9,"name":"Vertex Attributes - Circle","vertexShader":"// Already availabe:\\n// attribute vec3 position;\\n// attribute vec3 uv;\\n\\nattribute vec3 nextPosition;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec2 ratio = vec2(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0);\\n\\n  vec2 dir = nextPosition.xy - position.xy;\\n  vec2 tang = normalize(dir);\\n  vec2 norm = vec2(-tang.y, tang.x);\\n  norm *= sign((uv.x - 0.5) * (uv.y - 0.5));\\n\\n  vec2 dudv = (dir * 0.5 + norm * 0.25);\\n  \\n  gl_Position = vec4(position.xy * ratio + dudv * ratio, 0.0, 1.0);\\n}\\n\\n","fragmentShader":"varying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(vUv, 0.0, 1.0);\\n}\\n","defaultVertexShader":"// Already availabe:\\n// attribute vec3 position;\\n// attribute vec2 uv;\\n\\nattribute vec3 nextPosition;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec2 ratio = vec2(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0);\\n\\n  vec2 dudv = vUv * 2.0 - 1.0;\\n  dudv *= 0.1;\\n  \\n  gl_Position = vec4(position.xy * ratio + dudv * ratio, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"varying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(vUv, 0.0, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"75\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"6\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"### Task\\nGiven N quads located on a circle. Vertices 0 and 1 of each quad store the position of the next point on the circle in the `nextPosition` variable, vertices 2 and 3 store the position of the previous point on the circle. It is necessary to calculate the displacement vector for each vertex of the quads to connect all quads to form the circle. The width of the circle is equal to 0.5.\\n\\n<br>\\n\\n![](/files/vertex-attributes-circle.png)\\n\\n<br>","hints":[],"restrictions":[],"order":9,"cost":10,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"// Already availabe:\\n// attribute vec3 position;\\n// attribute vec2 uv;\\n\\nattribute vec3 nextPosition;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec2 ratio = vec2(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0);\\n\\n  vec2 dudv = vUv * 2.0 - 1.0;\\n  dudv *= 0.1;\\n  \\n  gl_Position = vec4(position.xy * ratio + dudv * ratio, 0.0, 1.0);\\n}\\n","fragmentShader":"varying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(vUv, 0.0, 1.0);\\n}\\n","defaultVertexShader":"// Already availabe:\\n// attribute vec3 position;\\n// attribute vec2 uv;\\n\\nattribute vec3 nextPosition;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec2 ratio = vec2(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0);\\n\\n  vec2 dudv = vUv * 2.0 - 1.0;\\n  dudv *= 0.1;\\n  \\n  gl_Position = vec4(position.xy * ratio + dudv * ratio, 0.0, 1.0);\\n}\\n","defaultFragmentShader":"varying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(vUv, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":149,"slug":"texture-coordinates","moduleId":9,"name":"Texture coordinates","order":10,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":149,"slug":"texture-coordinates","moduleId":9,"name":"Texture coordinates","vertexShader":"// Already available:\\n// attribute vec3 position;\\n// attribute vec2 uv;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 ratio = vec3(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0, 1.0);\\n  vUv = uv;\\n  gl_Position = vec4(position * ratio, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = texture2D(iChannel0, vUv);\\n}\\n","defaultVertexShader":"// Already available:\\n// attribute vec3 position;\\n// attribute vec2 uv;\\n\\nvoid main() {\\n  vec3 ratio = vec3(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0, 1.0);\\n  gl_Position = vec4(position * ratio, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"1\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"Texture coordinates range from (0,0) for the lower left corner of the texture image to (1,1) for the upper right corner of the texture image.\\n\\n<br>\\n\\n![Image 1 - Texture Coordinates](/files/texture-coordinates-tex-coords.png)\\n\\n<br>\\n\\nIn order to map a texture to the triangle we need to tell each vertex of the triangle which part of the texture it corresponds to. Each vertex should thus have a texture coordinate associated with them that specifies what part of the texture image to sample from:\\n\\n<br>\\n\\n![Image 2 - Geometry](/files/texture-coordinates-geometry.png)\\n\\n<br>\\n\\nFragment interpolation then does the rest for the other fragments: \\n\\n<br>\\n\\n![Image 3 - Interpolation](/files/texture-coordinates-interpolation.png)\\n\\n<br>\\n\\nTo access the texture that is attached to a shader program, you need declare a `uniform` of `sampler2D` type:\\n\\n```\\nuniform sampler2D <Name>\\n```\\n\\nTo sample the color of the texture, use the built-in `texture` function that takes a `sampler2D` as its first argument and the corresponding texture coordinates as its second argument:\\n\\n```\\nvec4 color = texture(<Name>, texCoord);\\n```\\n\\n### Task\\nGiven a quad object defined by 4 vertices, bind the texture from iChannel0 to the quad.\\n\\n<br>\\n\\nThe `uv` variable is a vertex attribute that contains texture coordinates of the vertex. It is available in the vertex shader as a global variable.","hints":[],"restrictions":[],"order":10,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"// Already available:\\n// attribute vec3 position;\\n// attribute vec2 uv;\\n\\nvoid main() {\\n  vec3 ratio = vec3(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0, 1.0);\\n  gl_Position = vec4(position * ratio, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"// Already available:\\n// attribute vec3 position;\\n// attribute vec2 uv;\\n\\nvoid main() {\\n  vec3 ratio = vec3(projectionMatrix[0][0] / projectionMatrix[1][1], 1.0, 1.0);\\n  gl_Position = vec4(position * ratio, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":96,"slug":"uniform-scale","moduleId":9,"name":"Uniform Scale","order":11,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":96,"slug":"uniform-scale","moduleId":9,"name":"Uniform Scale","vertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  float scale = sin(iTime + 3.14 / 2.0) * 0.5 + 0.5;\\n  \\n  gl_Position =  vec4(position * vec3(scale), 1.0);\\n}","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_Position = vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"0\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"A scaling operation is called **uniform** if the scaling factor is the same for each axis. \\n\\n<br>\\n\\n![](/files/uniform-scale.png)\\n\\n<br>\\n\\nWhen we scale a vector uniformly, we increase its length while keeping its direction the same:\\n\\n```\\nV\' = V * Scale = (Vx * Scale, Vy * Scale, Vz * Scale);\\n```\\n\\n\\n### Task\\nApply the uniform scale to the triangle\'s vertices in the vertex shader so that the size of the triangle decreases from the initial value to 0 and back. Use sine function for animation.","hints":[],"restrictions":[],"order":11,"cost":5,"threshold":98,"likes":2,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_Position = vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_Position = vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":98,"slug":"non-uniform-scale","moduleId":9,"name":"Non-uniform Scale","order":12,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":98,"slug":"non-uniform-scale","moduleId":9,"name":"Non-uniform Scale","vertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  float scaleX = sin(iTime + 1.57) * 0.5 + 0.5;\\n  \\n  gl_Position =  vec4(position * vec3(scaleX, 1.0, 1.0), 1.0);\\n}","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_Position = vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"0\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"The scaling operation is called **non-uniform** if the scaling factor is not the same for each axis.\\n\\n<br>\\n\\n![](/files/non-uniform-scale.png)\\n\\n<br>\\n\\nWhen a vector is scaled non-uniformly, its direction may change. This happens because different vector components are multiplied by different scaling factors:\\n\\n```\\nV\' = V * S = (Vx * Sx, Vy * Sy, Vz * Sz)\\n\\n```\\n\\n As a result, if one component of a vector increases more than another, the vector leans toward that component.\\n\\n<br>\\n\\n![](/files/non-uniform-scale-vector-direction.png)\\n\\n### Task\\nApply the non-uniform scale to the triangle\'s vertices in the vertex shader so that the width of the triangle decreases from the initial value to 0 and back. Use `sin` or `cos` function for animation.","hints":[],"restrictions":[],"order":12,"cost":5,"threshold":98,"likes":0,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_Position = vec4(position, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid main() {\\n  gl_Position = vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":105,"slug":"scale-matrix","moduleId":9,"name":"Scale Matrix","order":13,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":105,"slug":"scale-matrix","moduleId":9,"name":"Scale Matrix","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 worldPos = transform * position;\\n  vPos = worldPos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(worldPos, 1.0);\\n}\\n\\nvoid main() {\\n  float delta = sin(iTime - 1.57) * 0.5 + 0.5;\\n  \\n  vec3 r1 = vec3(1.0 + delta * 2.0, 0.0, 0.0);\\n  vec3 r2 = vec3(0.0, 1.0 - delta, 0.0);\\n  vec3 r3 = vec3(0.0, 0.0, 1.0 + delta * 2.0);\\n  \\n  mat3 transform = transpose(mat3(r1, r2, r3));\\n  setPosition3D(transform);\\n}","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 2.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 worldPos = transform * position;\\n  vPos = worldPos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(worldPos, 1.0);\\n}\\n\\nvoid main() {\\n  vec3 r1 = vec3(1.0, 0.0, 0.0);\\n  vec3 r2 = vec3(0.0, 1.0, 0.0);\\n  vec3 r3 = vec3(0.0, 0.0, 1.0);\\n\\n  // We need to transpose the matrix because OpenGL\'s mat3 accepts column vectors\\n  mat3 transform = transpose(mat3(r1, r2, r3));\\n  setPosition3D(transform);\\n}","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 2.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"1.5\\",\\"y\\":\\"1.25\\",\\"z\\":\\"2.5\\"},\\"rotation\\":{\\"x\\":\\"-0.4\\",\\"y\\":\\"0.5\\",\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":\\"0\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"**Scale matrix** is a specific type of transformation matrix used to scale objects. The general form of a 3x3 scale matrix is:\\n\\n\\n```\\n|sx,  0,  0|\\n| 0, sy,  0| \\n| 0,  0, sz|\\n```\\n\\nWhere:\\n<br>\\n• **sx** is the scaling factor along the x-axis.\\n<br>\\n• **sy** is the scaling factor along the y-axis.\\n<br>\\n• **sz** is the scaling factor along the z-axis.\\n\\n<br>\\n\\n### How It Works\\n\\n<br>\\n\\nWhen you multiply a 3D point **P** by this scale matrix **M**, the point is scaled by the factors **sx**, **sy** and **sz**:\\n```\\n             |sx,  0,  0| |Px|   |sx * Px|\\nP\' = M * P = | 0, sy,  0|*|Py| = |sy * Py|\\n             | 0,  0, sz| |Pz|   |sz * Pz|\\n```\\n\\n### Task\\nCreate a scaling matrix that adjusts the cube\'s dimensions according to the following specifications:\\n1. Increase the size of the cube along the *X* and *Z* axes from 1 to 3, and vice versa.\\n2. Decrease the size of the cube along the *Y*-axis from 1 to 0, and vice versa.\\n\\n<br>\\n\\nThe adjustments on all axes should be made simultaneously and take 6.28 seconds, which is equivalent to one sine period. The resulting transformation matrix should then be passed to the `setPosition3D` function.","hints":[],"restrictions":[],"order":13,"cost":5,"threshold":98,"likes":3,"dislikes":3,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 worldPos = transform * position;\\n  vPos = worldPos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(worldPos, 1.0);\\n}\\n\\nvoid main() {\\n  vec3 r1 = vec3(1.0, 0.0, 0.0);\\n  vec3 r2 = vec3(0.0, 1.0, 0.0);\\n  vec3 r3 = vec3(0.0, 0.0, 1.0);\\n\\n  // We need to transpose the matrix because OpenGL\'s mat3 accepts column vectors\\n  mat3 transform = transpose(mat3(r1, r2, r3));\\n  setPosition3D(transform);\\n}","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 2.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 worldPos = transform * position;\\n  vPos = worldPos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(worldPos, 1.0);\\n}\\n\\nvoid main() {\\n  vec3 r1 = vec3(1.0, 0.0, 0.0);\\n  vec3 r2 = vec3(0.0, 1.0, 0.0);\\n  vec3 r3 = vec3(0.0, 0.0, 1.0);\\n\\n  // We need to transpose the matrix because OpenGL\'s mat3 accepts column vectors\\n  mat3 transform = transpose(mat3(r1, r2, r3));\\n  setPosition3D(transform);\\n}","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 2.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":99,"slug":"90-degree-rotation","moduleId":9,"name":"90-Degree Rotation","order":14,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":99,"slug":"90-degree-rotation","moduleId":9,"name":"90-Degree Rotation","vertexShader":"void setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(vec2(-position.y, position.x));\\n}","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"0\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"We can perform a 90-degree counterclockwise rotation of a 2D vector in the *x-y* plane by exchanging the *x* and *y* coordinates and negating the new *x* coordinate:\\n\\n<br>\\n\\n![90-Degree Rotation](/files/90-degree-rotation.png)\\n\\n<br>\\n\\n### Task\\nPerform a 90-degree counterclockwise rotation of the triangle. Pass the transformed vertex\'s *x* and *y* coordinates to the `setPosition2D` function. For now, you can ignore it\'s content.","hints":[],"restrictions":[],"order":14,"cost":5,"threshold":98,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":97,"slug":"rotation","moduleId":9,"name":"Rotation","order":15,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":97,"slug":"rotation","moduleId":9,"name":"Rotation","vertexShader":"uniform float iTime;\\n\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  float angle = (sin(iTime) * 0.5 + 0.5) * 6.28;\\n  \\n  float x = position.x * cos(angle) - position.y * sin(angle);\\n  float y = position.x * sin(angle) + position.y * cos(angle);\\n  \\n  setPosition2D(vec2(x, y));\\n}","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"75\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":\\"0.0\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"1\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"We can express 2D position **P** in the polar form:\\n\\n<br>\\n\\n![](/files/rotation-radial-coordinates.png)\\n\\n<br>\\n\\n```\\nPx = r * cos(φ)\\nPy = r * sin(φ)\\n```\\n\\nTo rotate the coordinates, we need to add an offset angle to the current:\\n\\n<br>\\n\\n![](/files/rotation-offset-angle.png)\\n\\n<br>\\n\\n```\\nP\'x = r * cos(φ + Δ)\\nP\'y = r * sin(φ + Δ)\\n```\\n\\n### Task\\nPerform a 360-degree counterclockwise rotation of the rect. Use sin function for animation. Pass the transformed vertex\'s *x* and *y* coordinates to the `setPosition2D `function. For now, you can ignore it\'s content.","hints":[],"restrictions":[],"order":15,"cost":5,"threshold":99,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":101,"slug":"rotation-about-a-point","moduleId":9,"name":"Rotation About a Point","order":16,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":101,"slug":"rotation-about-a-point","moduleId":9,"name":"Rotation About a Point","vertexShader":"uniform float iTime;\\n\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  vec2 origin = position.xy + vec2(0.0, 2.0);\\n  vec2 rotationCenter = vec2(0.0, 0.0);\\n  \\n  float angle = iTime;\\n  \\n  vec2 dir = origin - rotationCenter;\\n  float dx = dir.x * cos(angle) - dir.y * sin(angle);\\n  float dy = dir.x * sin(angle) + dir.y * cos(angle);\\n\\n  setPosition2D(rotationCenter + vec2(dx, dy));\\n}","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"4\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":\\"2\\",\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"To perform a rotation of an object **P** around a specific origin **O**, we can calculate the displacement vector of the object from the origin and then apply the rotation transformation to this vector, as previously learned.\\n\\n<br>\\n\\n![Rotation About a Point](/files/rotation-about-point.png)\\n\\n<br>\\n\\n### Task\\nPerform a 360-degree counterclockwise rotation of the rect around the point `(0.0, 0.0)` with a radius of `2.0`. Calculate the new *x* and *y* coordinates of the transformed vertex and pass them to the `setPosition2D` function. For now, you can ignore its content.","hints":[],"restrictions":[],"order":16,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvoid setPosition2D(vec2 pos) {\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  setPosition2D(position.xy);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.55, 0.55, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":100,"slug":"rotation-about-an-arbitrary-axis","moduleId":9,"name":"Rotation About an Arbitrary Axis","order":17,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":100,"slug":"rotation-about-an-arbitrary-axis","moduleId":9,"name":"Rotation About an Arbitrary Axis","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(vec3 pos) {\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float angle = iTime;\\n  vec3 axis = normalize(vec3(1.0, 1.0, 0.0));\\n  vec3 p0 = position.xyz + vec3(1.0, -1.0, 0.0);\\n\\n  vec3 projPosAxis = axis * dot(axis, p0);\\n  vec3 perpPosAxis = p0 - projPosAxis;\\n  vec3 perp = cross(axis, perpPosAxis);\\n\\n  vec3 p1 = perp * sin(angle) + perpPosAxis * cos(angle) + projPosAxis;\\n  setPosition3D(p1);\\n}","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(vec3 pos) {\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float angle = iTime;\\n  vec3 axis = normalize(vec3(1.0, 1.0, 0.0));\\n  vec3 p0 = position.xyz + vec3(1.0, -1.0, 0.0);\\n\\n  setPosition3D(p0);  \\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"5\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"scale\\":{\\"x\\":\\"1\\",\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"To rotate a vector **v** by an angle **θ** around an arbitrary unit vector **n**, we first decompose **v** into its parallel **v∥** and perpendicular **v⊥** components with respect to **n**:\\n\\n<br>\\n\\n![](/files/rotation-about-axis-decompose.png)\\n\\n```\\nv∥ = (n ⋅ v) * n\\nv⊥ = v - v∥\\n```\\n\\nNext, we need to rotate the perpendicular component **v⊥** about **n** by the angle **θ** in the plane perpendicular to the axis. \\n\\n<br>\\n\\n![](/files/rotation-about-axis-perp-rotate.png)\\n\\n<br>\\n\\nTo do this, we first perform the cross product of **v⊥** and **n**:\\n\\n<br>\\n\\n![](/files/rotation-about-axis-perp-cross.png)\\n\\n<br>\\n\\nAs a result, we obtain two perpendicular vectors, which lie in the plane perpendicular to the rotation axis and declare a rectangular coordinate system:\\n\\n<br>\\n\\n![](/files/rotation-about-axis-perp-system.png)\\n\\n<br>\\n\\nNow we can express the rotated perpendicular component as a linear combination:\\n```\\nv\'⊥ = v⊥ * cos(θ) + (n × v⊥) * sin(θ)\\n```\\n\\nFinally, we add the parallel component **v∥** to the rotated perpendicular component **v\'⊥** to get the final rotated vector:\\n\\n<br>\\n\\n![](/files/rotation-about-axis-final.png)\\n\\n<br>\\n\\n```\\nv\' = v∥ + v\'⊥\\n```\\n\\n### Task\\nPerform a 360-degree counterclockwise rotation of the cube around the axis `(1.0, 1.0, 0.0)`. Calculate the new coordinates of the transformed vertex and pass them to the `setPosition3D` function. For now, you can ignore its content.","hints":[],"restrictions":[],"order":17,"cost":5,"threshold":98,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(vec3 pos) {\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float angle = iTime;\\n  vec3 axis = normalize(vec3(1.0, 1.0, 0.0));\\n  vec3 p0 = position.xyz + vec3(1.0, -1.0, 0.0);\\n\\n  setPosition3D(p0);  \\n}\\n","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(vec3 pos) {\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float angle = iTime;\\n  vec3 axis = normalize(vec3(1.0, 1.0, 0.0));\\n  vec3 p0 = position.xyz + vec3(1.0, -1.0, 0.0);\\n\\n  setPosition3D(p0);  \\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":122,"slug":"rotation-matrix","moduleId":9,"name":"Rotation Matrix","order":18,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":122,"slug":"rotation-matrix","moduleId":9,"name":"Rotation Matrix","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 pos = transform * position.xyz;\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float progress = abs(cos(iTime * 0.5) * 0.5 - 0.5);\\n  progress *= 3.0 * 3.14;\\n  \\n  float angleX = clamp(progress, 3.14 * 0.0, 3.14 * 1.0);\\n  float angleY = clamp(progress, 3.14 * 1.0, 3.14 * 2.0);\\n  float angleZ = clamp(progress, 3.14 * 2.0, 3.14 * 3.0);\\n  \\n  mat3 rotateX = transpose(mat3(\\n    vec3(1, 0, 0),\\n    vec3(0, cos(angleX), -sin(angleX)),\\n    vec3(0, sin(angleX), cos(angleX))\\n  ));\\n\\n  mat3 rotateY = transpose(mat3(\\n    vec3(cos(angleY), 0, sin(angleY)),\\n    vec3(0, 1, 0),\\n    vec3(-sin(angleY), 0, cos(angleY))\\n  ));\\n\\n  mat3 rotateZ = transpose(mat3(\\n    vec3(cos(angleZ), -sin(angleZ), 0),\\n    vec3(sin(angleZ), cos(angleZ), 0),\\n    vec3(0, 0, 1)\\n  ));\\n\\n  setPosition3D(rotateZ * rotateY * rotateX);\\n}\\n","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 pos = transform * position.xyz;\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float progress = abs(cos(iTime * 0.5) * 0.5 - 0.5);\\n\\n  setPosition3D(mat3(1.0));\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2.5\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"A rotation matrix is a 3x3 matrix that describes the rotation of an object.\\n\\n<br>\\n\\nFor rotation around the x-axis: \\n```\\n| 1   0          0           | \\n| 0   cos(theta) -sin(theta) |\\n| 0   sin(theta) cos(theta)  |\\n```\\n\\nFor rotation around the y-axis:\\n```\\n| cos(theta)   0   sin(theta) |\\n| 0            1   0          |\\n| -sin(theta)  0   cos(theta) |\\n```\\n\\nFor rotation around the z-axis:\\n```\\n| cos(theta) -sin(theta) 0 |\\n| sin(theta) cos(theta)  0 |\\n| 0          0           1 |\\n```\\n\\nMultiply the rotation matrix with the object\'s coordinates: Once you have created the rotation matrix, you need to multiply it with the object\'s coordinates to apply the rotation. This can be done using matrix multiplication.\\n\\n<br>\\n\\nNote that if you want to perform multiple rotations on an object (for example, rotating it first around the x-axis and then around the y-axis), you need to multiply the rotation matrices in the order in which you want to apply them.\\n\\n### Task\\nSequentially rotate an object 180 degrees along the X, Y, and Z axes, follow these steps:\\n1. Divide the `progress` into three equal parts.\\n2. In the first part, rotate the object 180 degrees along the X axis.\\n3. In the second part, rotate the object 180 degrees along the Y axis.\\n4. In the third part, rotate the object 180 degrees along the Z axis.","hints":[],"restrictions":[],"order":18,"cost":5,"threshold":98,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":12,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 pos = transform * position.xyz;\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float progress = abs(cos(iTime * 0.5) * 0.5 - 0.5);\\n\\n  setPosition3D(mat3(1.0));\\n}\\n","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat3 transform) {\\n  vec3 pos = transform * position.xyz;\\n  vPos = pos;\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n\\nvoid main() {\\n  float progress = abs(cos(iTime * 0.5) * 0.5 - 0.5);\\n\\n  setPosition3D(mat3(1.0));\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":123,"slug":"homogeneous-coordinates","moduleId":9,"name":"Homogeneous Coordinates","order":19,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":123,"slug":"homogeneous-coordinates","moduleId":9,"name":"Homogeneous Coordinates","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat4 transform) {\\n  vec4 pos = transform * vec4(position, 1.0);\\n  vPos = pos.xyz;\\n  gl_Position = projectionMatrix * viewMatrix * pos;\\n}\\n\\nvoid main() {\\n  mat4 transform = transpose(mat4(\\n    vec4(cos(iTime), 0, sin(iTime), cos(iTime)),\\n    vec4(0, 1, 0, sin(iTime)),\\n    vec4(-sin(iTime), 0, cos(iTime), 0),\\n    vec4(0, 0, 0, 1)\\n  ));\\n\\n  setPosition3D(transform);\\n}","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat4 transform) {\\n  vec4 pos = transform * vec4(position, 1.0);\\n  vPos = pos.xyz;\\n  gl_Position = projectionMatrix * viewMatrix * pos;\\n}\\n\\nvoid main() {\\n  mat4 transform = transpose(mat4(\\n    vec4(1, 0, 0, 0),\\n    vec4(0, 1, 0, 0),\\n    vec4(0, 0, 1, 0),\\n    vec4(0, 0, 0, 1)\\n  ));\\n\\n  setPosition3D(transform);\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":false,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"5\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"To transform a point **P** from one coordinate system to another, we typically use the equation:\\n\\n```\\nP\' = MP + T (1)\\n```\\n\\nHere, **M** is a 3x3 matrix that can scale and rotate the object. **T** is a 3D translation vector.\\n\\n<br>\\n\\nTo represent these transformations using a single mathematical entity, we can extend our vectors to four-dimensional homogeneous coordinates and use 4×4 matrices to transform them. We extend a 3D point **P** to four dimensions by setting its fourth coordinate, which we call the \\"**w**\\" coordinate, equal to 1. We then construct a 4×4 transformation matrix **F** that corresponds to the 3×3 matrix **M** and the 3D translation **T** as follows:\\n\\n```\\nF = | M, T |\\n    | 0, 1 |\\n```\\n\\nMultiplying the matrix **F** by the vector *<Px, Py, Pz, 1>* transforms the **x**, **y**, and **z** coordinates of the vector in exactly the same way as Equation (1) and leaves a 1 in the **w** coordinate:\\n\\n```\\n| m00, m01, m02, t0 |   |Px|\\n| m10, m11, m12, t1 |   |Py|\\n| m20, m21, m22, t2 | * |Pz|\\n|   0,   0,   0,  1 |   |1 |\\n\\n=\\n\\n| m00 * Px + m01 * Py + m02 * Pz + t0 * 1 |\\n| m10 * Px + m11 * Py + m12 * Pz + t1 * 1 |\\n| m20 * Px + m21 * Py + m22 * Pz + t2 * 1 |\\n|   0 * Px +   0 * Py +   0 * Pz +  1 * 1 |\\n\\n```\\n\\n### Task\\nDefine a matrix that rotates an object about the y-axis counterclockwise in the local object space:\\n\\n<br>\\n\\n![](/files/homogeneous-coordinates-task-y.png)\\n\\n<br>\\n\\nand moves the object in a counterclockwise circular path in the X-Y plane:\\n\\n<br>\\n\\n![](/files/homogeneous-coordinates-task-z.png)\\n\\n<br>\\n\\nThe resulting transformation matrix should be passed to the `setPosition2D` function.","hints":[],"restrictions":[],"order":19,"cost":5,"threshold":98,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat4 transform) {\\n  vec4 pos = transform * vec4(position, 1.0);\\n  vPos = pos.xyz;\\n  gl_Position = projectionMatrix * viewMatrix * pos;\\n}\\n\\nvoid main() {\\n  mat4 transform = transpose(mat4(\\n    vec4(1, 0, 0, 0),\\n    vec4(0, 1, 0, 0),\\n    vec4(0, 0, 1, 0),\\n    vec4(0, 0, 0, 1)\\n  ));\\n\\n  setPosition3D(transform);\\n}\\n","fragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\n\\nvoid setPosition3D(mat4 transform) {\\n  vec4 pos = transform * vec4(position, 1.0);\\n  vPos = pos.xyz;\\n  gl_Position = projectionMatrix * viewMatrix * pos;\\n}\\n\\nvoid main() {\\n  mat4 transform = transpose(mat4(\\n    vec4(1, 0, 0, 0),\\n    vec4(0, 1, 0, 0),\\n    vec4(0, 0, 1, 0),\\n    vec4(0, 0, 0, 1)\\n  ));\\n\\n  setPosition3D(transform);\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\n\\nconst vec3 lightPos = vec3(0.0, 0.0, 5.0);\\n\\nvoid main() {\\n  vec3 dx = dFdx(vPos);\\n  vec3 dy = dFdy(vPos);\\n  vec3 normal = normalize(cross(dx, dy));\\n\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  float t = dot(normal, lightDir) * 0.75 + 0.25;\\n  \\n  gl_FragColor = vec4(vec3(0.0, 0.55, 0.55) * t, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":103,"slug":"normal-transform","moduleId":9,"name":"Normal Transform","order":20,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":103,"slug":"normal-transform","moduleId":9,"name":"Normal Transform","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vNormal;\\nvarying vec3 vPos;\\n\\nvec3 getNormal() {\\n  return  normal; // vertex attribute\\n}\\n\\nvoid main() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), -sin(angle), 0.0, 0.0);\\n  vec4 r2 = vec4(sin(angle), cos(angle), 0.0, 0.0);\\n  vec4 r3 = vec4(0.0, 0.0, 1.0, 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  vNormal = normalize(mat3(modelMatrix * transform) * getNormal());\\n\\n  mat4 mvp = projectionMatrix * viewMatrix * modelMatrix;\\n  gl_Position = mvp * transform * vec4(position, 1.0);\\n}","fragmentShader":"varying vec3 vNormal;\\n\\nvoid main() {\\n  vec3 fragNormal = normalize(vNormal); \\n  gl_FragColor = vec4(fragNormal, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvec3 getNormal() {\\n  return  normal; // vertex attribute\\n}\\n\\nvoid main() {\\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":\\"0.5\\",\\"y\\":\\"0.5\\",\\"z\\":0},\\"scale\\":{\\"x\\":\\"1\\",\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"In addition to its position in space, a vertex belonging to a polygonal model usually carries additional information about how it fits into the surrounding surface. In particular, a vertex may have a *normal* vector associated with it. And when we transform a model, we need to transform not only the vertex positions, but these vectors as well.\\n\\n<br>\\n\\nLet **F** is a 4×4 matrix with which we transform a vertex position:\\n\\n```\\nF = | M, T |\\n    | 0, 1 |\\n```\\n\\nHere, **M** is a 3x3 matrix that can scale and rotate the position. **T** is a 3D translation vector.\\n\\n<br>\\n\\nWe can use the matrix **F** to correctly transform the normal vector. But we must consider that the normal vectors are only direction vectors and do not represent a specific position in space. This means that translations should not have any effect on it.\\n\\n<br>\\n\\nTo skip the translation when transforming the normal vector we can:\\n1. limit the matrix **F** to the matrix **M**;\\n2. extend normal vector to four dimensions by setting its fourth coordinate to 0.\\n\\nMultiplying the matrix **F** by the vector *<Nx, Ny, Nz, 0>* scales and rotates the **x**, **y**, and **z** coordinates with no translation and leaves a 0 in the **w** coordinate:\\n\\n```\\n| m00, m01, m02, t0 |   |Nx|\\n| m10, m11, m12, t1 |   |Ny|\\n| m20, m21, m22, t2 | * |Nz|\\n|   0,   0,   0,  1 |   |0 |\\n\\n=\\n\\n| m00 * Nx + m01 * Ny + m02 * Nz + t0 * 0 |\\n| m10 * Nx + m11 * Ny + m12 * Nz + t1 * 0 |\\n| m20 * Nx + m21 * Ny + m22 * Nz + t2 * 0 |\\n|   0 * Nx +   0 * Ny +   0 * Nz +  0 * 0 |\\n```\\n\\n### Task\\nDefine a matrix that rotates an object about the z-axis counterclockwise in the local object space using time as the angle:\\n\\n<br>\\n\\n![](/files/normal-transform-task-z.png)\\n\\n<br>\\n\\nThen apply the transformation (including `modelMatrix`) to the normal vector as well:\\n\\n<br>\\n\\n![](/files/normal-transform-task-normal.png)\\n\\n<br>\\n\\nUsing the `varying`, pass the normal value to the fragment shader and use it as the fragment color.\\n\\n<br>\\n\\nThe `normal` variable, like the `position`, is a vertex attribute, but contains information about the surface normal. It is available in the vertex shader as a global variable.","hints":[],"restrictions":[],"order":20,"cost":5,"threshold":98,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvec3 getNormal() {\\n  return  normal; // vertex attribute\\n}\\n\\nvoid main() {\\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvec3 getNormal() {\\n  return  normal; // vertex attribute\\n}\\n\\nvoid main() {\\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":104,"slug":"normal-in-non-uniform-scale","moduleId":9,"name":"Normal in Non-uniform Scale","order":21,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":104,"slug":"normal-in-non-uniform-scale","moduleId":9,"name":"Normal in Non-uniform Scale","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vNormal;\\n\\nvec3 getNormal() {\\n  return  normal; // vertex attribute\\n}\\n\\nmat4 getModel() {\\n  vec4 r1 = vec4(cos(iTime) + 2.0, 0.0, 0.0, 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(0.0, 0.0, 1.0, 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * getNormal());\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}","fragmentShader":"varying vec3 vNormal;\\n\\nvoid main() {\\n  vec3 fragNormal = normalize(vNormal);\\n  gl_FragColor = vec4(fragNormal, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vNormal;\\n\\nvec3 getNormal() {\\n  return  normal; // vertex attribute\\n}\\n\\nmat4 getModel() {\\n  vec4 r1 = vec4(cos(iTime) + 2.0, 0.0, 0.0, 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(0.0, 0.0, 1.0, 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vNormal = normalize(mat3(model) * getNormal());\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"varying vec3 vNormal;\\n\\nvoid main() {\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  gl_FragColor = vec4(fragNormal, 1.0);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"1.25\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"3\\"},\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"If **M** is a *3x3* matrix with which we transform a vertex position, then the same matrix **M** can be used to correctly transform the *normal* vector at that vertex.\\n\\n<br>\\n\\nHowever, if the **M** performs non-uniform scaling, it is not orthonormal anymore. And the transformed *normal* can often end up pointing in a direction that is not perpendicular to the transformed surface:\\n\\n<br>\\n\\n![](/files/normal-in-non-uniform-scale.png)\\n\\n<br>\\n\\nIn this case the *normal* vector must be transformed using the *inverse transpose* of the **M**:\\n\\n```\\nn\' = transpose(inverse(M)) * n\\n```\\n\\nVectors that must be transformed in this way are called *covariant* vectors, and vectors that are transformed in the ordinary fashion using the matrix **M** (such as points) are called *contravariant* vectors.\\n\\n<br>\\n\\nIf the **M** is orthogonal, then:\\n```\\ninverse(M) == transpose(M)\\n```\\nAnd thus\\n```\\ntranspose(inverse(M)) == M\\n```\\n\\nTherefore, the *inverse transpose* operation required to transform *normal* vectors can be avoided when **M** is known to be orthogonal.\\n\\n### Task\\nConvert the normal vector correctly from model space to world using the `model` matrix.","hints":[],"restrictions":[],"order":21,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vNormal;\\n\\nvec3 getNormal() {\\n  return  normal; // vertex attribute\\n}\\n\\nmat4 getModel() {\\n  vec4 r1 = vec4(cos(iTime) + 2.0, 0.0, 0.0, 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(0.0, 0.0, 1.0, 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vNormal = normalize(mat3(model) * getNormal());\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"varying vec3 vNormal;\\n\\nvoid main() {\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  gl_FragColor = vec4(fragNormal, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vNormal;\\n\\nvec3 getNormal() {\\n  return  normal; // vertex attribute\\n}\\n\\nmat4 getModel() {\\n  vec4 r1 = vec4(cos(iTime) + 2.0, 0.0, 0.0, 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(0.0, 0.0, 1.0, 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vNormal = normalize(mat3(model) * getNormal());\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"varying vec3 vNormal;\\n\\nvoid main() {\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  gl_FragColor = vec4(fragNormal, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":150,"slug":"clip-plane","moduleId":9,"name":"Clip Plane","order":25,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":150,"slug":"clip-plane","moduleId":9,"name":"Clip Plane","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec4 vClipPlane;\\n\\nvoid main() {\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  \\n  vPos = worldPos.xyz;\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n\\n  vClipPlane = vec4(normalize(modelMatrix[0].xyz * -1.0), (-cos(iTime) * 1.5));\\n  \\n  gl_Position = projectionMatrix * viewMatrix * worldPos;\\n}\\n","fragmentShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec4 vClipPlane;\\n\\nconst vec4 color = vec4(0.38, 0.12, 0.93, 1.0);\\n\\nvec4 applyLight(vec4 color);\\n\\nvoid main() {\\n  float clipDistance = dot(vec4(vPos, 1.0), vClipPlane);\\n  float alpha = mix(0.2, 1.0, step(0.0, clipDistance));\\n  \\n  gl_FragColor = applyLight(vec4(color.rgb, alpha));\\n}\\n\\n///////////////////////\\n//////// UTILS ////////\\n///////////////////////\\n\\nvec4 applyLight(vec4 color) {\\n  vec3  lightPos = vec3(-0.75, 0.25, 3.0);\\n  vec3  normal   = normalize(vNormal);\\n  vec3  lightDir = normalize(lightPos - vPos);\\n  float diffuse  = dot(normalize(vNormal), lightDir) * 0.5 + 0.5;\\n\\n  return vec4(color.rgb * diffuse, color.a);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  \\n  vPos = worldPos.xyz;\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n\\n  float clipPlaneDistance = -cos(iTime) * 1.5;\\n  vec4  clipPlane = vec4(0.0, 0.0, 0.0, clipPlaneDistance);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * worldPos;\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nconst vec4 color = vec4(0.38, 0.12, 0.93, 1.0);\\n\\nvec4 applyLight(vec4 color);\\n\\nvoid main() {\\n  gl_FragColor = applyLight(color);\\n}\\n\\n///////////////////////\\n//////// UTILS ////////\\n///////////////////////\\n\\nvec4 applyLight(vec4 color) {\\n  vec3  lightPos = vec3(-0.75, 0.25, 3.0);\\n  vec3  normal   = normalize(vNormal);\\n  vec3  lightDir = normalize(lightPos - vPos);\\n  float diffuse  = dot(normalize(vNormal), lightDir) * 0.5 + 0.5;\\n\\n  return vec4(color.rgb * diffuse, color.a);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":2.8},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0.3,\\"y\\":0.05,\\"z\\":0},\\"rotation\\":{\\"x\\":\\"0.5\\",\\"y\\":0.75,\\"z\\":0},\\"scale\\":{\\"x\\":\\"3\\",\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"In computer graphics, a clip plane is a mathematical construct that defines a boundary in 3D space beyond which geometry is not rendered. It is commonly used to control the visibility of objects by clipping away portions of the scene that fall outside the specified plane. Clip planes are essential for various rendering techniques, such as culling, slicing, and creating cross-section views of 3D objects.\\n\\n<br>\\n\\nMathematically, a clip plane is represented by a plane equation in the form:\\n\\n<br>\\n\\n*Ax + By + Cz + D* = 0, \\n\\n<br>\\n\\nwhere *A*, *B*, and *C* are the *x*, *y*, and *z* components of the normal vector **N**, and\\n*D* = −**N** ⋅ **P** is the distance from the origin. The normal vector **N** determines the orientation of the plane, while the distance *D* controls its position in space.\\n\\n<br>\\n\\n![Image 1 - Plane](/files/clip-plane-1.png)\\n\\n<br>\\n\\nThe normal vector **N** is often normalized to unit length because in that case the equation\\n\\n<br>\\n\\n*d* = **N** ⋅ **Q** + *D*\\n\\n<br>\\n\\ngives the signed distance from the plane to an arbitrary point **Q**:\\n\\n<br>\\n\\n![Image 2 - Signed Distance](/files/normal-plane-point.png)\\n\\n1. If *d* = 0, then the point **Q** lies in the plane. \\n2. If *d* > 0, then the point **Q** lies on the positive side of the plane since **Q** would be on the side in which the normal vector **N** points. \\n3. if *d* < 0, then the point **Q** lies on the negative side of the plane.\\n\\nThe plane can also be defined by a point **P** and a normal vector **N**:\\n\\n<br>\\n\\n**N** ⋅ (**Q** − **P**) = 0,\\n\\n<br>\\n\\nwhere **Q** is the set of points on the plane.\\n\\n<br>\\n\\n![Image 3 - Plane is defined by the set of points](/files/clip-plane-0.png)\\n\\n### Task\\nUse the inverted right (left) vector from the model matrix to establish the orientation of the clipping plane. The clipping distance is specified in the code and the value changes over time.\\n\\n<br>\\n\\nDetermine the position of 3D model fragments in relation to the clipping plane. If the fragment falls outside the plane, set its transparency to 20%.","hints":[],"restrictions":[],"order":25,"cost":10,"threshold":99,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":12,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  \\n  vPos = worldPos.xyz;\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n\\n  float clipPlaneDistance = -cos(iTime) * 1.5;\\n  vec4  clipPlane = vec4(0.0, 0.0, 0.0, clipPlaneDistance);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * worldPos;\\n}\\n","fragmentShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nconst vec4 color = vec4(0.38, 0.12, 0.93, 1.0);\\n\\nvec4 applyLight(vec4 color);\\n\\nvoid main() {\\n  gl_FragColor = applyLight(color);\\n}\\n\\n///////////////////////\\n//////// UTILS ////////\\n///////////////////////\\n\\nvec4 applyLight(vec4 color) {\\n  vec3  lightPos = vec3(-0.75, 0.25, 3.0);\\n  vec3  normal   = normalize(vNormal);\\n  vec3  lightDir = normalize(lightPos - vPos);\\n  float diffuse  = dot(normalize(vNormal), lightDir) * 0.5 + 0.5;\\n\\n  return vec4(color.rgb * diffuse, color.a);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  \\n  vPos = worldPos.xyz;\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n\\n  float clipPlaneDistance = -cos(iTime) * 1.5;\\n  vec4  clipPlane = vec4(0.0, 0.0, 0.0, clipPlaneDistance);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * worldPos;\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nconst vec4 color = vec4(0.38, 0.12, 0.93, 1.0);\\n\\nvec4 applyLight(vec4 color);\\n\\nvoid main() {\\n  gl_FragColor = applyLight(color);\\n}\\n\\n///////////////////////\\n//////// UTILS ////////\\n///////////////////////\\n\\nvec4 applyLight(vec4 color) {\\n  vec3  lightPos = vec3(-0.75, 0.25, 3.0);\\n  vec3  normal   = normalize(vNormal);\\n  vec3  lightDir = normalize(lightPos - vPos);\\n  float diffuse  = dot(normalize(vNormal), lightDir) * 0.5 + 0.5;\\n\\n  return vec4(color.rgb * diffuse, color.a);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":152,"slug":"clip-plane-dissolve","moduleId":9,"name":"Clip Plane - Dissolve","order":26,"cost":20,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":152,"slug":"clip-plane-dissolve","moduleId":9,"name":"Clip Plane - Dissolve","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec4 vClipPlane;\\n\\nvoid main() {\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  \\n  vPos = worldPos.xyz;\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n\\n  vClipPlane = vec4(normalize(modelMatrix[0].xyz * -1.0), (cos(iTime * 0.8) * 2.0));\\n  \\n  gl_Position = projectionMatrix * viewMatrix * worldPos;\\n}\\n","fragmentShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec4 vClipPlane;\\n\\nconst vec4 color1 = vec4(0.38, 0.12, 0.93, 1.0);\\nconst vec4 color2 = vec4(1.00, 0.90, 0.30, 1.0);\\nconst vec4 color3 = vec4(1.00, 0.30, 0.30, 1.0);\\n\\nvec4 applyLight(vec4 color);\\nfloat noise(vec2 st);\\n\\nvoid main() {\\n  float noiseValue   = noise(vPos.xy * 5.0);\\n  float clipDistance = dot(vec4(vPos, 1.0), vClipPlane) - noiseValue;\\n\\n  vec4 color = applyLight(color1);\\n  if (clipDistance <= 0.2) {\\n    color = mix(color2, color3, clipDistance / 0.2);\\n  }\\n  color.a = step(0.0, clipDistance);\\n  \\n  gl_FragColor = color;\\n}\\n\\n///////////////////////\\n//////// UTILS ////////\\n///////////////////////\\n\\nvec4 applyLight(vec4 color) {\\n  vec3  lightPos = vec3(-0.75, 0.25, 3.0);\\n  vec3  normal   = normalize(vNormal);\\n  vec3  lightDir = normalize(lightPos - vPos);\\n  float diffuse  = dot(normalize(vNormal), lightDir) * 0.5 + 0.5;\\n\\n  return vec4(color.rgb * diffuse, color.a);\\n}\\n\\nvec2 random2(vec2 st) {\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec2 st) {\\n  vec2 i = floor(st);\\n  vec2 f = fract(st);\\n\\n  vec2 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0));\\n  float d2 = dot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\\n  float d3 = dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\\n  float d4 = dot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0));\\n  return mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  \\n  vPos = worldPos.xyz;\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n\\n  float clipPlaneDistance = cos(iTime * 0.8) * 2.0;\\n  vec4  clipPlane = vec4(0.0, 0.0, 0.0, clipPlaneDistance);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * worldPos;\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nconst vec4 color1 = vec4(0.38, 0.12, 0.93, 1.0);\\nconst vec4 color2 = vec4(1.00, 0.90, 0.30, 1.0);\\nconst vec4 color3 = vec4(1.00, 0.30, 0.30, 1.0);\\n\\nvec4 applyLight(vec4 color);\\nfloat noise(vec2 st);\\n\\nvoid main() {\\n  float noiseValue = noise(vPos.xy * 5.0);\\n\\n  vec4 color = applyLight(color1);\\n  \\n  gl_FragColor = color;\\n}\\n\\n///////////////////////\\n//////// UTILS ////////\\n///////////////////////\\n\\nvec4 applyLight(vec4 color) {\\n  vec3  lightPos = vec3(-0.75, 0.25, 3.0);\\n  vec3  normal   = normalize(vNormal);\\n  vec3  lightDir = normalize(lightPos - vPos);\\n  float diffuse  = dot(normalize(vNormal), lightDir) * 0.5 + 0.5;\\n\\n  return vec4(color.rgb * diffuse, color.a);\\n}\\n\\nvec2 random2(vec2 st) {\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec2 st) {\\n  vec2 i = floor(st);\\n  vec2 f = fract(st);\\n\\n  vec2 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0));\\n  float d2 = dot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\\n  float d3 = dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\\n  float d4 = dot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0));\\n  return mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n}\\n","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":2.8},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0.3,\\"y\\":0.05,\\"z\\":0},\\"rotation\\":{\\"x\\":\\"0.5\\",\\"y\\":0.75,\\"z\\":0},\\"scale\\":{\\"x\\":\\"3\\",\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"In computer graphics, a clip plane is a mathematical construct that defines a boundary in 3D space beyond which geometry is not rendered. It is commonly used to control the visibility of objects by clipping away portions of the scene that fall outside the specified plane. Clip planes are essential for various rendering techniques, such as culling, slicing, and creating cross-section views of 3D objects.\\n\\n<br>\\n\\nMathematically, a clip plane is represented by a plane equation in the form:\\n\\n<br>\\n\\n*Ax + By + Cz + D* = 0, \\n\\n<br>\\n\\nwhere *A*, *B*, and *C* are the *x*, *y*, and *z* components of the normal vector **N**, and\\n*D* = −**N** ⋅ **P** is the distance from the origin. The normal vector **N** determines the orientation of the plane, while the distance *D* controls its position in space.\\n\\n<br>\\n\\n![Image 1 - Plane](/files/clip-plane-1.png)\\n\\n<br>\\n\\nThe normal vector **N** is often normalized to unit length because in that case the equation\\n\\n<br>\\n\\n*d* = **N** ⋅ **Q** + *D*\\n\\n<br>\\n\\ngives the signed distance from the plane to an arbitrary point **Q**:\\n\\n<br>\\n\\n![Image 2 - Signed Distance](/files/normal-plane-point.png)\\n\\n1. If *d* = 0, then the point **Q** lies in the plane. \\n2. If *d* > 0, then the point **Q** lies on the positive side of the plane since **Q** would be on the side in which the normal vector **N** points. \\n3. if *d* < 0, then the point **Q** lies on the negative side of the plane.\\n\\nThe plane can also be defined by a point **P** and a normal vector **N**:\\n\\n<br>\\n\\n**N** ⋅ (**Q** − **P**) = 0,\\n\\n<br>\\n\\nwhere **Q** is the set of points on the plane.\\n\\n<br>\\n\\n![Image 3 - Plane is defined by the set of points](/files/clip-plane-0.png)\\n\\n### Task\\nUse the inverted right (left) vector from the model matrix to establish the orientation of the clipping plane. The clipping distance is specified in the code and the value changes over time.\\n\\nDetermine the position of 3D model fragments in relation to the clipping plane: \\n\\n1. If the fragment falls outside the plane, set its transparency to 0%.\\n\\n2. If the fragment is inside the clipping plane, and the distance of the fragment from the plane is in the interval [0.0; 0.2], fill in the fragments with a linear gradient using the `color2` and `color3` variables provided in the fragment code. Do not apply lighting to this segment.\\n\\n\\n![Image 1 - Boundary Gradient](/files/clip-plane-dissolve-gradient.png)\\n\\n\\n3. Distort the fragment\'s distance from the clipping plane using the noise value to bend clipping boundary. Play with the noise sign to reproduce the effect.","hints":[],"restrictions":[],"order":26,"cost":20,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  \\n  vPos = worldPos.xyz;\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n\\n  float clipPlaneDistance = cos(iTime * 0.8) * 2.0;\\n  vec4  clipPlane = vec4(0.0, 0.0, 0.0, clipPlaneDistance);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * worldPos;\\n}\\n","fragmentShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nconst vec4 color1 = vec4(0.38, 0.12, 0.93, 1.0);\\nconst vec4 color2 = vec4(1.00, 0.90, 0.30, 1.0);\\nconst vec4 color3 = vec4(1.00, 0.30, 0.30, 1.0);\\n\\nvec4 applyLight(vec4 color);\\nfloat noise(vec2 st);\\n\\nvoid main() {\\n  float noiseValue = noise(vPos.xy * 5.0);\\n\\n  vec4 color = applyLight(color1);\\n  \\n  gl_FragColor = color;\\n}\\n\\n///////////////////////\\n//////// UTILS ////////\\n///////////////////////\\n\\nvec4 applyLight(vec4 color) {\\n  vec3  lightPos = vec3(-0.75, 0.25, 3.0);\\n  vec3  normal   = normalize(vNormal);\\n  vec3  lightDir = normalize(lightPos - vPos);\\n  float diffuse  = dot(normalize(vNormal), lightDir) * 0.5 + 0.5;\\n\\n  return vec4(color.rgb * diffuse, color.a);\\n}\\n\\nvec2 random2(vec2 st) {\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec2 st) {\\n  vec2 i = floor(st);\\n  vec2 f = fract(st);\\n\\n  vec2 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0));\\n  float d2 = dot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\\n  float d3 = dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\\n  float d4 = dot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0));\\n  return mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  \\n  vPos = worldPos.xyz;\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n\\n  float clipPlaneDistance = cos(iTime * 0.8) * 2.0;\\n  vec4  clipPlane = vec4(0.0, 0.0, 0.0, clipPlaneDistance);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * worldPos;\\n}\\n","defaultFragmentShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nconst vec4 color1 = vec4(0.38, 0.12, 0.93, 1.0);\\nconst vec4 color2 = vec4(1.00, 0.90, 0.30, 1.0);\\nconst vec4 color3 = vec4(1.00, 0.30, 0.30, 1.0);\\n\\nvec4 applyLight(vec4 color);\\nfloat noise(vec2 st);\\n\\nvoid main() {\\n  float noiseValue = noise(vPos.xy * 5.0);\\n\\n  vec4 color = applyLight(color1);\\n  \\n  gl_FragColor = color;\\n}\\n\\n///////////////////////\\n//////// UTILS ////////\\n///////////////////////\\n\\nvec4 applyLight(vec4 color) {\\n  vec3  lightPos = vec3(-0.75, 0.25, 3.0);\\n  vec3  normal   = normalize(vNormal);\\n  vec3  lightDir = normalize(lightPos - vPos);\\n  float diffuse  = dot(normalize(vNormal), lightDir) * 0.5 + 0.5;\\n\\n  return vec4(color.rgb * diffuse, color.a);\\n}\\n\\nvec2 random2(vec2 st) {\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec2 st) {\\n  vec2 i = floor(st);\\n  vec2 f = fract(st);\\n\\n  vec2 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0));\\n  float d2 = dot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\\n  float d3 = dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\\n  float d4 = dot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0));\\n  return mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for developers who want to deepen their knowledge of vertex shaders and the graphics pipeline. You will learn how vertex shaders work, how geometry is processed, and what transformations are applied in space to render a complete scene with objects. Each topic includes theoretical material and a practical task that can be completed directly on the website.","skillsDesc":"how vertex shaders work and their role in the graphics pipeline.<br>the main stages of the graphics pipeline and their interactions.<br>how complex objects are formed from polygons and how to use them to create detailed models.<br>how to work with geometry, including creating and manipulating vertices and primitives.<br>transformation techniques such as translation, scaling, and rotation.","importanceDesc":"Understanding the workings of vertex shaders and the graphics pipeline is crucial for creating complex and realistic 3D scenes. This knowledge will help you effectively work with geometry, apply various transformations, and optimize the rendering process. It is essential for game development, animation, data visualization, and other graphical applications.","certifiable":false,"images":["img-1.png","img-2.png","img-3.png","img-4.png","img-5.png"]}},{"id":6,"slug":"lighting-basics","name":"Lighting Basics","description":"Study fundamental lighting models used in computer graphics to simulate realistic lighting effects.","tasks":19,"acceptedTasks":0,"isOpen":false,"order":3,"locked":false,"cover":true,"child":{"id":6,"slug":"lighting-basics","name":"Lighting Basics","description":"Study fundamental lighting models used in computer graphics to simulate realistic lighting effects.","order":3,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":58,"slug":"colors","moduleId":6,"name":"Colors","order":0,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":58,"slug":"colors","moduleId":6,"name":"Colors","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 lightColor = vec3(1.0, 1.0, 0.0);\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n\\n  gl_FragColor = vec4(objectColor * lightColor, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":\\"-0.15\\",\\"z\\":0},\\"rotation\\":{\\"x\\":\\"-0.4\\",\\"y\\":\\"0\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\"},\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"The color of an object we see in real life is not the color it actually has, but is the color reflected from the object. The white sunlight is a collection of all the visible colors and the object absorbs a large portion of them. It reflects only those colors that represent the object\'s color, and we perceive their combination.\\n\\n<br>\\n\\n![](/files/colors-white-light.png)\\n\\n<br>\\n\\nIf we remove from the light the components that are reflected from the illuminated object, the color of the object perceived by the observer will change.\\n\\n<br>\\n\\n![](/files/colors-green-light.png)\\n\\n<br>\\n\\n<br>\\nWe get the resulting color vector by doing a component-wise multiplication between the light and object color vectors:\\n\\n```\\nReflectedColor = LightColor * ObjectColor\\n```\\n\\n### Task\\nGiven a cube, bind the texture from `iChannel0` to the object and calculate the color perceived by an observer. The light color is `(1.0, 1.0, 0.0)`.\\n\\n<br>\\n\\nHere you can learn how to bind a texture to an object: [texture coordinates](https://shader-learning.com/module-training/9/task/149)\\n\\n<br>","hints":[],"restrictions":[],"order":0,"cost":5,"threshold":95,"likes":3,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":108,"slug":"ambient-lighting","moduleId":6,"name":"Ambient Lighting","order":1,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":108,"slug":"ambient-lighting","moduleId":6,"name":"Ambient Lighting","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.0);\\n  \\n  float ambient = 0.5;\\n  \\n  gl_FragColor = vec4(ambient * objectColor * lightColor, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":\\"-0.15\\",\\"z\\":0},\\"rotation\\":{\\"x\\":\\"-0.4\\",\\"y\\":\\"0\\",\\"z\\":\\"0\\"},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"Ambient Light is simplistic model of global illumination. It gives the impression that there is always some **scattered light**, even if there is no direct light source.\\n\\n<br>\\n\\n![](/files/ambient-lighting.png)\\n\\n<br>\\n\\n*Scattered light is lighting that is obtained by reflection of light rays from different surfaces: ceiling, floor, walls. Such light evenly and equally illuminates all surfaces of the object, as a result of which there are no shadows, glare and reflexes on them.*\\n\\n<br>\\n\\nTo add ambient lighting to the scene, we calculate the product of the light, the object color and the ambient light factor. Usually the ambient light factor is a small value less than 1.0\\n\\n### Task\\nGiven a cube. It is necessary to bind the texture from `iChannel0` to the object and apply ambient lighting. The light color is `(1.0, 1.0, 0.0)`, ambient factor is `0.5`.","hints":[],"restrictions":[],"order":1,"cost":5,"threshold":95,"likes":1,"dislikes":1,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":109,"slug":"diffuse-lighting","moduleId":6,"name":"Diffuse Lighting","order":3,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":109,"slug":"diffuse-lighting","moduleId":6,"name":"Diffuse Lighting","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;  \\n  float diffuse = dot(fragNormal, lightDir);\\n\\n  vec3 result = lightColor * (ambient + diffuse) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  \\n  float ambient = 0.2;\\n  \\n  vec3 result = lightColor * ambient * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":\\"-0.15\\",\\"z\\":0},\\"rotation\\":{\\"x\\":\\"-0.4\\",\\"y\\":\\"0\\",\\"z\\":0},\\"scale\\":{\\"x\\":\\"1\\",\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"Diffuse lighting simulates the directional impact a light source has on an object. The diffuse illumination intensity increases when the direction of light rays tends to the plane normal.\\n\\n<br>\\n\\n![](/files/diffuse-lighting.png)\\n\\n<br>\\n\\nTo get diffuse light component we need calculate the angular distance between the light direction **L** and the plane normal **N**:\\n\\n```\\ndiffuse = dot(N, L)\\n```\\n\\n### Task\\nWe\'re looking at the cube in the direction of `(0.0, 0.0, -1.0)`. The point light source is located at `(-1.0, 2.0, 2.0)` and it\'s color is `(1.0, 1.0, 0.75)`. Ambient factor is `0.2`. Try to add diffuse lighting to the object.\\n\\n<br>\\n\\nThe position of the cube fragment in the world space is available through the `vPos` varying. The `vNormal` varying holds the fragment\'s normal vector.","hints":[],"restrictions":[],"order":3,"cost":10,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":6,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  \\n  float ambient = 0.2;\\n  \\n  vec3 result = lightColor * ambient * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  \\n  float ambient = 0.2;\\n  \\n  vec3 result = lightColor * ambient * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":110,"slug":"specular-lighting","moduleId":6,"name":"Specular Lighting","order":5,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":110,"slug":"specular-lighting","moduleId":6,"name":"Specular Lighting","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 result = lightColor * (ambient + diffuse) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":\\"-0.1\\",\\"z\\":0},\\"rotation\\":{\\"x\\":\\"-0.4\\",\\"y\\":\\"-0.6\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"The specular lighting simulates the bright spot of a light that appears on shiny objects:\\n\\n<br>\\n\\n![](/files/specular-lighting-spot.png)\\n\\n<br>\\n\\nTo get specular light component we need to calculate a reflection vector **L\'** by reflecting the light direction **L** around the object\'s normal vector **N**:\\n\\n<br>\\n\\n![](/files/specular-lighting-reflect.png)\\n\\n<br>\\n\\nThen we calculate the angular distance between the reflection vector **L\'** and the view direction **V** (make sure it\'s not negative):\\n\\n<br>\\n\\n![](/files/specular-lighting-eye.png)\\n\\n<br>\\n\\n```\\nspecular = dot(V, L`)\\n```\\n\\nThe closer the angle between **L\'** and **V**, the greater the impact of the specular light.\\n\\n### Task\\nWe\'re looking at the cube in the direction of `(0.0, 0.0, -1.0)` from `(0.0, 0.0, 2.5)` view position. The point light source is located at `(-1.0, 2.0, 2.0)` and it\'s color is `(1.0, 1.0, 0.75)`. Ambient factor is `0.2`. Try to add specular lighting to the scene.\\n\\n<br>\\n\\nRaise the specular parameter you calculated to the power of `32` for a more visually pronounced effect.\\n\\n<br>\\n\\n**Hint**: GLSL has a built in function to calculate reflection: \\n```\\nreflectDir = reflect(dir, normal);\\n```","hints":[],"restrictions":[],"order":5,"cost":10,"threshold":95,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":6,"animationStepTime":100,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 result = lightColor * (ambient + diffuse) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - vPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 result = lightColor * (ambient + diffuse) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":65,"slug":"light-attenuation","moduleId":6,"name":"Light Attenuation","order":6,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":65,"slug":"light-attenuation","moduleId":6,"name":"Light Attenuation","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  mat4 rotate = transpose(mat4(\\n    vec4(cos(angle), 0.0, sin(angle), 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(-sin(angle), 0.0, cos(angle), 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n\\n  mat4 move = transpose(mat4(\\n    vec4(1.0, 0.0, 0.0, 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(0.0, 0.0, 1.0, (cos(iTime * 0.75) - 1.0) * 3.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n  \\n  return move * modelMatrix * rotate;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75) * 3.0;\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n\\n  float kc = 1.0;\\n  float kl = 0.0;\\n  float kq = 0.1;\\n  float dist = distance(vPos, lightPos);\\n  float attenuation = 1.0 / (kc + kl * dist + kq * (dist * dist));\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  result *= attenuation;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  mat4 rotate = transpose(mat4(\\n    vec4(cos(angle), 0.0, sin(angle), 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(-sin(angle), 0.0, cos(angle), 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n\\n  mat4 move = transpose(mat4(\\n    vec4(1.0, 0.0, 0.0, 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(0.0, 0.0, 1.0, (cos(iTime * 0.75) - 1.0) * 3.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n  \\n  return move * modelMatrix * rotate;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75) * 3.0;\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":\\"-0.1\\",\\"z\\":0},\\"rotation\\":{\\"x\\":\\"-0.4\\",\\"y\\":\\"-0.6\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"**Attenuation** refers to the decrease in light intensity over the distance a light ray travels.\\n\\n<br>\\n\\n### Real-World Observation\\n\\n<br>\\n\\n• Light sources appear very bright when close by.\\n\\n<br>\\n\\n• The brightness decreases rapidly with distance.\\n\\n<br>\\n\\n• The remaining light intensity decreases more slowly as the distance increases.\\n\\n<br>\\n\\n### Formula \\n\\n<br>\\n\\nThe attenuation value based on a fragment’s distance to the light source is calculated using the formula:\\n```\\nAttenuation = 1.0 / (Kc + Kl * Distance + Kq * Distance * Distance)\\n```\\n\\n### Components\\n\\n<br>\\n\\n**• Kc (Constant Term)** is typically set to 1.0 to ensure the denominator never gets smaller than 1, preventing an unrealistic boost in intensity at certain distances.\\n\\n<br>\\n\\n**• Kl (Linear Term)** is multiplied by the distance, reducing intensity linearly.\\n\\n<br>\\n\\n**• Kq (Quadratic Term)** is multiplied by the square of the distance, causing a quadratic decrease in intensity. This term is less significant at short distances but becomes more impactful as the distance increases.\\n\\n<br>\\n\\n### Considerations\\n\\n<br>\\n\\nThe values of **Kc**, **Kl**, and **Kq** depend on various factors such as the environment, the desired light coverage distance, and the type of light source.\\n\\n### Task\\nApply attenuation with the following constants: \\n```\\nKc = 1.0;\\nKl = 0.0;\\nKq = 0.1;\\n```","hints":[],"restrictions":[],"order":6,"cost":10,"threshold":95,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":16,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  mat4 rotate = transpose(mat4(\\n    vec4(cos(angle), 0.0, sin(angle), 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(-sin(angle), 0.0, cos(angle), 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n\\n  mat4 move = transpose(mat4(\\n    vec4(1.0, 0.0, 0.0, 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(0.0, 0.0, 1.0, (cos(iTime * 0.75) - 1.0) * 3.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n  \\n  return move * modelMatrix * rotate;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75) * 3.0;\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  mat4 rotate = transpose(mat4(\\n    vec4(cos(angle), 0.0, sin(angle), 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(-sin(angle), 0.0, cos(angle), 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n\\n  mat4 move = transpose(mat4(\\n    vec4(1.0, 0.0, 0.0, 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(0.0, 0.0, 1.0, (cos(iTime * 0.75) - 1.0) * 3.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n  \\n  return move * modelMatrix * rotate;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75) * 3.0;\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":62,"slug":"shininess","moduleId":6,"name":"Shininess","order":8,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":62,"slug":"shininess","moduleId":6,"name":"Shininess","vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nfloat getProgress() {\\n  float m = mod(iTime * 0.5, 2.0);\\n  float t = fract(m);\\n  if (m > 1.0) {\\n    t = 1.0 - t;\\n  }\\n  return pow(2.0, 10.0 * t - 10.0);\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = vec3(0.75, 0.45, 0.45);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, mix(1.0, 256.0, getProgress()));\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nfloat getProgress() {\\n  float m = mod(iTime * 0.5, 2.0);\\n  float t = fract(m);\\n  if (m > 1.0) {\\n    t = 1.0 - t;\\n  }\\n  return pow(2.0, 10.0 * t - 10.0);\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = vec3(0.75, 0.45, 0.45);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"1.4\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"3\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"The **shininess** value of an object determines how sharply it reflects light, affecting the size and intensity of the highlight.\\n\\n<br>\\n\\n### Key Points\\n\\n<br>\\n\\n• **Higher Shininess Value.** Results in a smaller, more intense highlight as the object reflects light more precisely rather than scattering it.\\n\\n<br>\\n\\n• **Lower Shininess Value.** Leads to a larger, more diffused highlight due to increased scattering of light.\\n\\n<br>\\n\\n### Implementation Steps\\n\\n<br>\\n\\n1\\\\. **Calculate Specular Component.** Compute the dot product between the view direction and the reflection direction. *Ensure the result is not negative*.\\n\\n<br>\\n\\n2\\\\. **Apply Shininess.** Raise the calculated specular component to the power of the shininess value to achieve the desired effect.\\n\\n### Task\\nWe\'re looking at the sphere of color `(0.75, 0.45, 0.45)` in the direction of `(0.0, 0.0, -1.0)` from `(0.0, 0.0, 2.5)` view position. The point light source is located at `(-2.0, 2.0, 2.0)` and it\'s color is `(1.0, 1.0, 0.75)`. Ambient factor is `0.2`.\\n\\n<br>\\n\\nChange the shininess value from `1.0` to `256.0` using the value of the `getProgress` function as the mix parameter.","hints":[],"restrictions":[],"order":8,"cost":10,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":300,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nfloat getProgress() {\\n  float m = mod(iTime * 0.5, 2.0);\\n  float t = fract(m);\\n  if (m > 1.0) {\\n    t = 1.0 - t;\\n  }\\n  return pow(2.0, 10.0 * t - 10.0);\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = vec3(0.75, 0.45, 0.45);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nfloat getProgress() {\\n  float m = mod(iTime * 0.5, 2.0);\\n  float t = fract(m);\\n  if (m > 1.0) {\\n    t = 1.0 - t;\\n  }\\n  return pow(2.0, 10.0 * t - 10.0);\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = vec3(0.75, 0.45, 0.45);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":84,"slug":"halfway-vector","moduleId":6,"name":"Halfway Vector","order":9,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":84,"slug":"halfway-vector","moduleId":6,"name":"Halfway Vector","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  mat4 rotate = transpose(mat4(\\n    vec4(cos(angle), 0.0, sin(angle), 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(-sin(angle), 0.0, cos(angle), 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n\\n  mat4 move = transpose(mat4(\\n    vec4(1.0, 0.0, 0.0, 0.0),\\n    vec4(0.0, 1.0, 0.0, -0.5),\\n    vec4(0.0, 0.0, 1.0, 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n  \\n  return move * modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 2.0, 2.0);\\n  \\n  vec3 objectColor = vec3(0.5);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 0.75, 0.75);\\n  vec3 lightPos = vec3(0.0, sin(iTime) * 2.0 + 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(lightDir + viewDir);\\n  float specular = max(dot(fragNormal, halfwayDir), 0.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  mat4 rotate = transpose(mat4(\\n    vec4(cos(angle), 0.0, sin(angle), 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(-sin(angle), 0.0, cos(angle), 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n\\n  mat4 move = transpose(mat4(\\n    vec4(1.0, 0.0, 0.0, 0.0),\\n    vec4(0.0, 1.0, 0.0, -0.5),\\n    vec4(0.0, 0.0, 1.0, 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n  \\n  return move * modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 2.0, 2.0);\\n  \\n  vec3 objectColor = vec3(0.5);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 0.75, 0.75);\\n  vec3 lightPos = vec3(0.0, sin(iTime) * 2.0 + 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":\\"0\\",\\"z\\":\\"-3\\"},\\"rotation\\":{\\"x\\":\\"0.25\\",\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":\\"5\\",\\"y\\":\\"0.1\\",\\"z\\":\\"4\\"},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"Phong\'s specular reflections can fail under certain conditions, particularly when the specular area becomes large.\\n\\n<br>\\n\\n### Issue with Phong Specular Reflections\\n\\n<br>\\n\\nWhen the angle between the view **V** and reflection vectors **L\'** exceeds 90 degrees, the resulting dot product becomes negative. This leads to a specular factor of 0.0, creating a sharply defined border in the specular reflection area.\\n\\n<br>\\n\\n![](/files/halfway-vector-specular-issue.png)\\n\\n<br>\\n\\n### Halfway Vector\\n\\n<br>\\n\\nSo instead of relying on the reflection vector we can use a **halfway vector (H)**, that is a unit vector that lies exactly halfway between the view direction **V** and the light direction **L**. The closer this halfway vector aligns with the surface\'s normal **N**, the higher the specular contribution. The angle between the halfway vector and the surface normal never exceeds 90 degrees, ensuring a smoother and more consistent specular contribution.\\n\\n<br>\\n\\n![](/files/halfway-vector.png)\\n\\n<br>\\n\\n### Implementation\\n\\n<br>\\n\\nAdd the light direction vector **L** and the view direction vector **V**, then normalize the result to get the halfway vector **H**:\\n```\\nHalfwayDir = normalize(LightDir + ViewDir);\\n```\\n\\n### Task\\nReplace Phong\'s specular calculation with a halfway vector approach.","hints":[],"restrictions":[],"order":9,"cost":5,"threshold":99,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  mat4 rotate = transpose(mat4(\\n    vec4(cos(angle), 0.0, sin(angle), 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(-sin(angle), 0.0, cos(angle), 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n\\n  mat4 move = transpose(mat4(\\n    vec4(1.0, 0.0, 0.0, 0.0),\\n    vec4(0.0, 1.0, 0.0, -0.5),\\n    vec4(0.0, 0.0, 1.0, 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n  \\n  return move * modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 2.0, 2.0);\\n  \\n  vec3 objectColor = vec3(0.5);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 0.75, 0.75);\\n  vec3 lightPos = vec3(0.0, sin(iTime) * 2.0 + 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  mat4 rotate = transpose(mat4(\\n    vec4(cos(angle), 0.0, sin(angle), 0.0),\\n    vec4(0.0, 1.0, 0.0, 0.0),\\n    vec4(-sin(angle), 0.0, cos(angle), 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n\\n  mat4 move = transpose(mat4(\\n    vec4(1.0, 0.0, 0.0, 0.0),\\n    vec4(0.0, 1.0, 0.0, -0.5),\\n    vec4(0.0, 0.0, 1.0, 0.0),\\n    vec4(0.0, 0.0, 0.0, 1.0)\\n  ));\\n  \\n  return move * modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 2.0, 2.0);\\n  \\n  vec3 objectColor = vec3(0.5);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 0.75, 0.75);\\n  vec3 lightPos = vec3(0.0, sin(iTime) * 2.0 + 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  \\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":63,"slug":"specular-map","moduleId":6,"name":"Specular Map","order":10,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":63,"slug":"specular-map","moduleId":6,"name":"Specular Map","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);\\n\\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":\\"-0.1\\",\\"z\\":\\"0\\"},\\"rotation\\":{\\"x\\":\\"-0.4\\",\\"y\\":\\"-0.6\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\"},\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"The surface of an object can consist of different types of materials: wood, metal, leather and etc. Each such material interacts with light differently depending on its physical properties. For example, when light interacts with wood, it scatters and does not give such a mirror-like shine as when it interacts with metal.\\n\\n<br>\\n\\n![Image 1 - Object Materials](/files/specular-map-materials.png)\\n\\n<br>\\n\\nIn order to control the specular intensity of each part of the object, we can use additional texture that is usually referred to as **specular map**. Each pixel of such texture is a color vector. In the fragment shader we sample the corresponding color value and multiply this value with the light\'s specular intensity. The more \'white\' a pixel is, the higher the result of the multiplication and thus the brighter the specular component of an object becomes.\\n\\n<br>\\n\\n![Image 2 - Specular Map](/files/specular-map.png)\\n\\n<br>\\n\\n**Note**. Previously we multiplied the light\'s specular component by the color value from the *diffuse map*, now we need to use the color value from the *specular map*.\\n\\n### Task\\nSample the specular map form `Channel1` to retrieve the fragment\'s corresponding specular intensity.\\n\\n","hints":[],"restrictions":[],"order":10,"cost":10,"threshold":98,"likes":1,"dislikes":3,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1}],"animated":true,"animationSteps":12,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);\\n\\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-1.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);\\n\\n  vec3 result = lightColor * (ambient + diffuse + specular) * objectColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":64,"slug":"normal-map","moduleId":6,"name":"Normal Map","order":11,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":64,"slug":"normal-map","moduleId":6,"name":"Normal Map","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\n\\nvec3 getLightPos(vec3 ratio) {\\n  vec2 delta = vec2(cos(iTime * 1.5), 0.0);\\n  return vec3(0.5, 0.5, 1.0) * ratio + vec3(delta, 0.0) * ratio;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n    \\n  vec3 viewPos = vec3(0.5, 0.5, 1.0) * ratio;\\n  \\n  vec3 objectDiffuse = texture2D(iChannel0, uv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, uv).rgb;\\n  \\n  vec3 fragNormal = texture2D(iChannel2, uv).rgb;\\n  // transforms from [-1,1] to [0,1]\\n  fragNormal = normalize(fragNormal * 2.0 - 1.0); \\n  vec3 fragPos = vec3(uv, 0.0) * ratio;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = getLightPos(ratio);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambientFactor = 0.1;\\n  float diffuseFactor = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specularFactor = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\\n\\n  vec3 result = vec3(0.0);\\n  result += ambientFactor * objectDiffuse;\\n  result += diffuseFactor * objectDiffuse;\\n  result += specularFactor * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\n\\nvec3 getLightPos(vec3 ratio) {\\n  vec2 delta = vec2(cos(iTime * 1.5), 0.0);\\n  return vec3(0.5, 0.5, 1.0) * ratio + vec3(delta, 0.0) * ratio;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n  \\n  vec3 viewPos = vec3(0.5, 0.5, 1.0) * ratio;\\n  \\n  vec3 objectDiffuse = texture2D(iChannel0, uv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, uv).rgb;\\n  \\n  vec3 fragNormal = vec3(0.0, 0.0, 1.0);\\n  vec3 fragPos = vec3(uv, 0.0) * ratio;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = getLightPos(ratio);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambientFactor = 0.1;\\n  float diffuseFactor = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specularFactor = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambientFactor * objectDiffuse;\\n  result += diffuseFactor * objectDiffuse;\\n  result += specularFactor * objectSpecular;\\n  result *= lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"We can use a 2D texture to store per-fragment normal data. This way we can sample a 2D texture to get a normal vector for that specific fragment.\\n\\n<br>\\n\\nColor vectors in a texture are represented as a 3D vector with an **r**, **g**, and **b** component. To store the normal vector in the texture, you need to map the components of the normal vector from [-1, 1] to [0,1]:\\n```\\nvec3 rgb = normal * 0.5 + 0.5; // transforms from [-1,1] to [0,1] \\n```\\nThus, if we want to get the normal vector from the normal map, we need to perform the inverse transformation:\\n```\\n// obtain normal from normal map in range [0,1]\\nnormal = texture(normalMap, texCoords).rgb;\\n\\n// transforms from [0,1] to [-1,1] \\nnormal = normalize(normal * 2.0 - 1.0);\\n```\\n\\n*A normal vector written to a normal map is usually normalized. However, when writing a value to a texture and then reading it from the texture, rounding or conversion errors may occur, causing the vector to be greater or less than one unit in length. Applying normalization ensures that the vector is accurately normalized and does not cause unexpected artefacts or visualisation errors.*\\n\\n<br>\\n\\nNow the sampled normal vector can be used for upcoming lighting calculations.\\n\\n### Task\\nSample the normal map - `Channel2` - to retrieve the fragment\'s corresponding normal vector.","hints":[],"restrictions":[],"order":11,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1},{"index":2}],"animated":true,"animationSteps":5,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\n\\nvec3 getLightPos(vec3 ratio) {\\n  vec2 delta = vec2(cos(iTime * 1.5), 0.0);\\n  return vec3(0.5, 0.5, 1.0) * ratio + vec3(delta, 0.0) * ratio;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n  \\n  vec3 viewPos = vec3(0.5, 0.5, 1.0) * ratio;\\n  \\n  vec3 objectDiffuse = texture2D(iChannel0, uv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, uv).rgb;\\n  \\n  vec3 fragNormal = vec3(0.0, 0.0, 1.0);\\n  vec3 fragPos = vec3(uv, 0.0) * ratio;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = getLightPos(ratio);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambientFactor = 0.1;\\n  float diffuseFactor = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specularFactor = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambientFactor * objectDiffuse;\\n  result += diffuseFactor * objectDiffuse;\\n  result += specularFactor * objectSpecular;\\n  result *= lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\n\\nvec3 getLightPos(vec3 ratio) {\\n  vec2 delta = vec2(cos(iTime * 1.5), 0.0);\\n  return vec3(0.5, 0.5, 1.0) * ratio + vec3(delta, 0.0) * ratio;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n  \\n  vec3 viewPos = vec3(0.5, 0.5, 1.0) * ratio;\\n  \\n  vec3 objectDiffuse = texture2D(iChannel0, uv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, uv).rgb;\\n  \\n  vec3 fragNormal = vec3(0.0, 0.0, 1.0);\\n  vec3 fragPos = vec3(uv, 0.0) * ratio;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = getLightPos(ratio);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambientFactor = 0.1;\\n  float diffuseFactor = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specularFactor = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambientFactor * objectDiffuse;\\n  result += diffuseFactor * objectDiffuse;\\n  result += specularFactor * objectSpecular;\\n  result *= lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":82,"slug":"spot-light","moduleId":6,"name":"Spot Light","order":12,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":82,"slug":"spot-light","moduleId":6,"name":"Spot Light","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 getSpotLightDir() {\\n  float dx = cos(iTime) * 0.25;\\n  float dy = sin(iTime) * 0.25;\\n  return normalize(vec3(0.0, 0.0, -1.0) + vec3(dx, dy, 0.0));\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(-4.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(0.0, 0.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n\\n  vec3 spotLightDir = getSpotLightDir();\\n  float theta = dot(spotLightDir, -lightDir);\\n  float cutOff = cos(radians(12.0));\\n  float intensity = step(cutOff, theta);\\n\\n  diffuse *= intensity;\\n  specular *= intensity;\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 getSpotLightDir() {\\n  float dx = cos(iTime) * 0.25;\\n  float dy = sin(iTime) * 0.25;\\n  return normalize(vec3(0.0, 0.0, -1.0) + vec3(dx, dy, 0.0));\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(-4.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(0.0, 0.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":\\"0\\",\\"z\\":0},\\"rotation\\":{\\"x\\":\\"0.0\\",\\"y\\":\\"-0.6\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\"},\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"A spotlight is a light source that is located somewhere in the environment that, instead of shooting light rays in all directions, only shoots them in a specific direction. The result is that only the objects within a certain radius of the spotlight\'s direction are lit and everything else stays dark.\\n\\n<br>\\n\\n![](/files/spot-light.png)\\n\\n<br>\\n\\nA spotlight is represented by a position **P**, a direction **L** and a cutoff angle **φ** that specifies the radius of the spotlight.\\n\\n<br>\\n\\nTo determine whether the fragment is illuminated, we need to find the angle between the spotlight direction **L** and the direction from the spotlight position to the position of the fragment **F**. If this angle **θ** is greater than the cutoff angle **φ**, the fragment is not illuminated.\\n\\n### Task\\nFor each fragment calculate if the fragment is between the spotlight\'s cutoff directions and if so, lit the fragment with specular and diffused light. Leave ambient light unchanged. Spot light direction is defined by `getSpotLightDir` function, cutoff angle is `12` degrees.","hints":[],"restrictions":[],"order":12,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1}],"animated":true,"animationSteps":12,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 getSpotLightDir() {\\n  float dx = cos(iTime) * 0.25;\\n  float dy = sin(iTime) * 0.25;\\n  return normalize(vec3(0.0, 0.0, -1.0) + vec3(dx, dy, 0.0));\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(-4.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(0.0, 0.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 getSpotLightDir() {\\n  float dx = cos(iTime) * 0.25;\\n  float dy = sin(iTime) * 0.25;\\n  return normalize(vec3(0.0, 0.0, -1.0) + vec3(dx, dy, 0.0));\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(-4.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(0.0, 0.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":83,"slug":"spot-light-soft-edges","moduleId":6,"name":"Spot Light - Soft edges","order":13,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":83,"slug":"spot-light-soft-edges","moduleId":6,"name":"Spot Light - Soft edges","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 getSpotLightDir() {\\n  float dx = cos(iTime) * 0.25;\\n  float dy = sin(iTime) * 0.25;\\n  return normalize(vec3(0.0, 0.0, -1.0) + vec3(dx, dy, 0.0));\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(-4.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(0.0, 0.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n\\n  vec3 spotLightDir = getSpotLightDir();\\n  float theta = dot(spotLightDir, -lightDir);\\n  float cutOff = cos(radians(10.0));\\n  float outerCutOff = cos(radians(12.0));\\n  float epsilon = cutOff - outerCutOff;\\n  float intensity = clamp((theta - outerCutOff) / epsilon, 0.0, 1.0);\\n\\n  diffuse *= intensity;\\n  specular *= intensity;\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 getSpotLightDir() {\\n  float dx = cos(iTime) * 0.25;\\n  float dy = sin(iTime) * 0.25;\\n  return normalize(vec3(0.0, 0.0, -1.0) + vec3(dx, dy, 0.0));\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(-4.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(0.0, 0.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":\\"-0.6\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772}","description":"To simulate a spotlight with smooth edges, we use an inner and an outer cone. The outer cone gradually fades the light from the inner cone to the edges of the outer cone.\\n\\n<br>\\n\\n### Implementaion Steps\\n\\n<br>\\n\\n1\\\\. Define the angles for the inner and outer cones relative to the spotlight\'s direction vector:\\n\\n- • **Inner cone** represents the core area of the spotlight where the light intensity is at its maximum.\\n\\n- • **Outer cone** represents the area where the light gradually fades to zero.\\n\\n2\\\\. Determine light intensity:\\n\\n- • **Inside inner cone**. If a fragment is within the inner cone, its light intensity is 1.0.\\n\\n- • **Outside outer cone**. If a fragment is outside the outer cone, its light intensity is 0.0.\\n\\n- • **Between cones**. If a fragment is between the inner and outer cones, calculate an intensity value between 0.0 and 1.0 based on its position.\\n\\n### Task\\nFor each fragment calculate if the fragment is between the spotlight\'s cutoff directions and if so, lit the fragment with specular and diffused light. If the fragment is between the inner and the outer cutoff, calculate an intensity value between 0.0 and 1.0. \\n\\n<br>\\n\\nThe Spot light direction is defined by `getSpotLightDir` function, inner cutoff angle is `10` degrees, outer is `12`.","hints":[],"restrictions":[],"order":13,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1}],"animated":true,"animationSteps":12,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 getSpotLightDir() {\\n  float dx = cos(iTime) * 0.25;\\n  float dy = sin(iTime) * 0.25;\\n  return normalize(vec3(0.0, 0.0, -1.0) + vec3(dx, dy, 0.0));\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(-4.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(0.0, 0.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 getSpotLightDir() {\\n  float dx = cos(iTime) * 0.25;\\n  float dy = sin(iTime) * 0.25;\\n  return normalize(vec3(0.0, 0.0, -1.0) + vec3(dx, dy, 0.0));\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(-4.0, 0.0, 2.5);\\n  \\n  vec3 objectColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 objectSpecular = texture2D(iChannel1, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 fragPos = vPos;\\n  \\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(0.0, 0.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  \\n  float ambient = 0.2;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 reflectDir = reflect(-lightDir, fragNormal);  \\n  float specular = max(dot(viewDir, reflectDir), 0.0);\\n  specular = pow(specular, 32.0);\\n  \\n  vec3 result = vec3(0.0);\\n  result += ambient * objectColor;\\n  result += diffuse * objectColor;\\n  result += specular * objectSpecular;\\n  result *= lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":91,"slug":"metallic","moduleId":6,"name":"Metallic","order":17,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":91,"slug":"metallic","moduleId":6,"name":"Metallic","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\n\\nvec3 getLightPos(vec3 ratio) {\\n  vec2 delta = vec2(cos(iTime * 1.0), 0.0);\\n  return vec3(0.5, 0.5, 1.0) * ratio + vec3(delta, 0.0) * ratio;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n  \\n  vec3 viewPos = vec3(0.5, 0.5, 1.0) * ratio;\\n  \\n  vec3 fragDiffuse = pow(texture2D(iChannel0, uv).rgb, vec3(2.2));\\n  vec3 fragNormal = normalize(texture2D(iChannel1, uv).rgb * 2.0 - 1.0);\\n  float fragMetallic = texture2D(iChannel2, uv).r;\\n  \\n  vec3 fragPos = vec3(uv, 0.0) * ratio;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = getLightPos(ratio);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float diffuseFactor = dot(fragNormal, lightDir);\\n  float specularFactor = pow(max(dot(fragNormal, halfwayDir), 0.0), 32.0);\\n\\t\\n  vec3 surfaceReflectance = vec3(0.04);\\n  surfaceReflectance = mix(surfaceReflectance, fragDiffuse, fragMetallic);\\n  \\n  vec3 surfaceDiffuse = vec3(1.0) - surfaceReflectance;\\n  surfaceDiffuse *= 1.0 - fragMetallic;\\n  \\n  vec3 specular = surfaceReflectance * specularFactor;\\n  vec3 diffuse = surfaceDiffuse * diffuseFactor * fragDiffuse;\\n  \\n  vec3 result = (diffuse + specular) * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\n\\nvec3 getLightPos(vec3 ratio) {\\n  vec2 delta = vec2(cos(iTime * 1.0), 0.0);\\n  return vec3(0.5, 0.5, 1.0) * ratio + vec3(delta, 0.0) * ratio;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n    \\n  vec3 viewPos = vec3(0.5, 0.5, 1.0) * ratio;\\n  \\n  vec3 fragDiffuse = pow(texture2D(iChannel0, uv).rgb, vec3(2.2));\\n  vec3 fragNormal = normalize(texture2D(iChannel1, uv).rgb * 2.0 - 1.0);\\n  vec3 fragSpecular = texture2D(iChannel2, uv).rgb;\\n  \\n  vec3 fragPos = vec3(uv, 0.0) * ratio;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = getLightPos(ratio);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float diffuseFactor = dot(fragNormal, lightDir);\\n  float specularFactor = pow(max(dot(fragNormal, halfwayDir), 0.0), 32.0);\\n  \\n  vec3 result = (diffuseFactor * fragDiffuse + specularFactor * fragSpecular) * lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"### Interaction with Light\\n\\n<br>\\n\\nMetal surfaces interact with light differently than non-metal (dielectric) surfaces. While both obey the laws of refraction and reflection, metals absorb all refracted light without scattering, leaving only specularly reflected light. This means metal surfaces do not have a diffuse color.\\n\\n<br>\\n\\n### Metallicity Map\\n\\n<br>\\n\\nSimilar to specular or color maps, a metallicity map indicates the metallicity of each fragment of an object. When a metallicity map is available, specular maps are typically not used. Instead, the specular parameter is calculated based on the fragment\'s metallicity.\\n\\n<br>\\n\\nBefore calculating the specular reflection of a surface, it is necessary to determine its basic reflectivity:\\n```\\nvec3 F0 = vec3(0.04);\\nF0 = mix(F0, surfaceColor.rgb, metalness);\\n```\\n\\nBased on how metallic a surface is, we either take the dielectric base reflectivity `F0` or the surface color. Because metallic surfaces absorb all refracted light, they have no diffuse reflections and we can directly use the surface color texture as their base reflectivity.\\n\\n<br>\\n\\nFor most dielectrics, the base reflectance is kept at `0.04` and gives physically plausible results without the need to specify an additional surface parameter.\\n\\n<br>\\n\\n*Theoretically, the metallicity of a surface takes only two values: it is either a metal or it is not; the surface cannot be both. However, most render pipelines allow you to adjust the metallicity of a surface linearly between 0.0 and 1.0. This is necessary to create a surface, for example, with small particles of dust and sand, scratches on the metal surface.*\\n\\n<br>\\n\\nWe can use the `F0` value to denote the contribution of the source to the specular reflection `kS` of the surface. From the quantity we can also get the refractive index `kD`:\\n\\n```\\nvec3 kS = F;\\nvec3 kD = vec3(1.0) - kS;\\n  \\nkD *= 1.0 - metallic;\\t\\n```\\n\\nSince we consider the value `kS` to represent the amount of light energy reflected by the surface, then subtracting it from `1.0`, we get the energy of refracted light `kD`. Also, since metals do not refract light and do not have a diffuse component of re-emitted light, the `kD` component will be modulated to be zero for a completely metallic material.\\n\\n### Task\\nUse the metallic map from `iChannel2` to calculate the specular and diffuse components of light.","hints":[],"restrictions":[],"order":17,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1},{"index":2}],"animated":true,"animationSteps":6,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\n\\nvec3 getLightPos(vec3 ratio) {\\n  vec2 delta = vec2(cos(iTime * 1.0), 0.0);\\n  return vec3(0.5, 0.5, 1.0) * ratio + vec3(delta, 0.0) * ratio;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n    \\n  vec3 viewPos = vec3(0.5, 0.5, 1.0) * ratio;\\n  \\n  vec3 fragDiffuse = pow(texture2D(iChannel0, uv).rgb, vec3(2.2));\\n  vec3 fragNormal = normalize(texture2D(iChannel1, uv).rgb * 2.0 - 1.0);\\n  vec3 fragSpecular = texture2D(iChannel2, uv).rgb;\\n  \\n  vec3 fragPos = vec3(uv, 0.0) * ratio;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = getLightPos(ratio);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float diffuseFactor = dot(fragNormal, lightDir);\\n  float specularFactor = pow(max(dot(fragNormal, halfwayDir), 0.0), 32.0);\\n  \\n  vec3 result = (diffuseFactor * fragDiffuse + specularFactor * fragSpecular) * lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\n\\nvec3 getLightPos(vec3 ratio) {\\n  vec2 delta = vec2(cos(iTime * 1.0), 0.0);\\n  return vec3(0.5, 0.5, 1.0) * ratio + vec3(delta, 0.0) * ratio;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n    \\n  vec3 viewPos = vec3(0.5, 0.5, 1.0) * ratio;\\n  \\n  vec3 fragDiffuse = pow(texture2D(iChannel0, uv).rgb, vec3(2.2));\\n  vec3 fragNormal = normalize(texture2D(iChannel1, uv).rgb * 2.0 - 1.0);\\n  vec3 fragSpecular = texture2D(iChannel2, uv).rgb;\\n  \\n  vec3 fragPos = vec3(uv, 0.0) * ratio;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = getLightPos(ratio);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float diffuseFactor = dot(fragNormal, lightDir);\\n  float specularFactor = pow(max(dot(fragNormal, halfwayDir), 0.0), 32.0);\\n  \\n  vec3 result = (diffuseFactor * fragDiffuse + specularFactor * fragSpecular) * lightColor;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":92,"slug":"roughness-normal-distribution-function","moduleId":6,"name":"Roughness - Normal distribution function","order":18,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":92,"slug":"roughness-normal-distribution-function","moduleId":6,"name":"Roughness - Normal distribution function","vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 fragDiffuse = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragRoughness = 0.01 + (sin(iTime * 0.5) * 0.5 + 0.5) * 0.99;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float specular = distributionGGX(fragNormal, halfwayDir, fragRoughness);\\n    \\n  vec3 result = specular * fragDiffuse * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 fragDiffuse = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float ambient = 0.2;\\n  \\n  float t = 1.0 - (sin(iTime * 0.5) * 0.5 + 0.5) * 0.99;\\n  float shininess = 256.0 * t;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n    \\n  vec3 result = specular * fragDiffuse * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"1.4\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"The **Normal Distribution Function (NDF)** statistically approximates the relative surface area of microfacets that are exactly aligned with the halfway vector. \\n\\n<br>\\n\\n![](/files/ndf-microfacets-normals.png)\\n\\n<br>\\n\\nThese *microfacets* are tiny surface elements that collectively determine the overall roughness and reflective properties of a material. The **NDF** helps calculate how light interacts with a surface at the microscopic level, influencing the resulting shading and highlights.\\n\\n<br>\\n\\n### Mathematical Definition\\n\\n<br>\\n\\nOne commonly used NDF is the **Trowbridge-Reitz GGX**:\\n\\n$$\\n\\\\text{NDF} = \\\\frac{r^2}{\\\\pi \\\\left( ( \\\\mathbf{n} \\\\cdot \\\\mathbf{h} )^2 \\\\times (r^2 - 1) + 1 \\\\right)^2}\\n$$\\n\\n$r$ - surface roughness value, $\\\\mathbf{n}$ - surface normal, $\\\\mathbf{h}$ - the halfway vector.\\n\\n<br>\\n\\n### Roughness\\n\\n<br>\\n\\nThe roughness parameter $r$ is a key factor in the **NDF** and directly affects the appearance of a material\'s surface. Roughness controls the spread of microfacet orientations:\\n\\n<br>\\n\\n![](/files/roughness.png)\\n\\n<br>\\n\\nWhen the *roughness is low* (the surface is smooth), a highly concentrated number of microfacets are aligned to halfway vectors over a small radius. Due to this high concentration, the **NDF** displays a very bright spot.\\n\\n<br>\\n\\nWhen the *roughness is high*, the microfacets are aligned in much more random directions, you\'ll find a much larger number of halfway vectors **H** somewhat aligned to the microfacets (but less concentrated), giving us the more faded results.\\n\\n### Task\\nReplace the given specular reflection calculation with the **Trowbridge-Reitz GGX** normal distribution function. Vary surface roughness values from `0.01` to `1.0` over time `sin(iTime * 0.5)`.","hints":[],"restrictions":[],"order":18,"cost":5,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 fragDiffuse = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float ambient = 0.2;\\n  \\n  float t = 1.0 - (sin(iTime * 0.5) * 0.5 + 0.5) * 0.99;\\n  float shininess = 256.0 * t;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n    \\n  vec3 result = specular * fragDiffuse * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 fragDiffuse = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float ambient = 0.2;\\n  \\n  float t = 1.0 - (sin(iTime * 0.5) * 0.5 + 0.5) * 0.99;\\n  float shininess = 256.0 * t;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n    \\n  vec3 result = specular * fragDiffuse * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":93,"slug":"roughness-geometry-function","moduleId":6,"name":"Roughness - Geometry function","order":19,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":93,"slug":"roughness-geometry-function","moduleId":6,"name":"Roughness - Geometry function","vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragRoughness = 0.01 + (sin(iTime * 0.5) * 0.5 + 0.5) * 0.99;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n  \\n  float shininess = 2.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n\\n  float k = pow(fragRoughness + 1.0, 2.0) / 8.0;\\n  specular *= geometrySmith(fragNormal, viewDir, lightDir, k);\\n  \\n  vec3 result = specular * fragColor * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragRoughness = 0.01 + (sin(iTime * 0.5) * 0.5 + 0.5) * 0.99;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  float shininess = 2.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  \\n  vec3 result = specular * fragColor * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":0,\\"z\\":1.4},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"CCCCCC\\",\\"background\\":13421772,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"The **Geometry Function** describes the attenuation of light due to the microfacets blocking (shadowing) and being blocked (masking) by other microfacets. This function ensures that the amount of reflected light is consistent with the physical behavior of rough surfaces.\\n\\n<br>\\n\\n![](/files/geometry-function-microfacets-shadowing.png)\\n\\n<br>\\n\\nThe geometry function is a factor ranging from 0.0 to 1.0. White (or a value of 1.0) indicates no shadowing of the microfacets, while black (or a value of 0.0) signifies complete shadowing of the microfacets. *Note that this function is applicable only to the specular light component.*\\n\\n<br>\\n\\n### Mathematical Definition\\n\\n<br>\\n\\nOne of the widely used geometry functions in computer graphics is the **Smith GGX** geometry function:\\n\\n$$\\nG(L, V) = G_1(L) \\\\cdot G_1(V)\\n$$\\n\\n\\\\- $G(L, V)$ is the combined geometry function for the light direction and the view direction.\\n<br>\\n\\\\- $G1(L)$ is the geometry function for the light direction.\\n<br>\\n\\\\- $G1(V)$ is the geometry function for the view direction.\\n\\n<br>\\n\\nThe individual geometry terms `G1` for the **GGX** model are given by:\\n\\n$$\\nG(n, x, k) = \\\\frac{(\\\\mathbf{n} \\\\cdot \\\\mathbf{x})}{(\\\\mathbf{n} \\\\cdot \\\\mathbf{x}) \\\\cdot (1 - k) + k}\\n$$\\n\\n\\\\- $\\\\mathbf{n}$ is the surface normal.\\n<br>\\n\\\\- $\\\\mathbf{x}$ can be either the light direction or the view direction.\\n<br>\\n\\\\- $k$ is the roughness transformation function.\\n\\n<br>\\n\\nSince we use the geometry function for direct illumination the transformation function will be as follows:\\n\\n$$\\nk = \\\\frac{(r + 1)^2}{8}\\n$$\\n\\n\\\\- $r$ is the roughness parameter, controlling the spread of the microfacet normals.\\n\\n<br>\\n\\nOn the following graphs, you can see how the value of the geometry function changes with the angle between the normal and the view/light direction.\\n\\n<br>\\n\\n![](/files/geometry-function-change-value.png)\\n\\n<br>\\n\\nThe first graph might raise questions since it is unclear why self-shadowing appears on an absolutely smooth surface. However, in the case of image based lighting (IBL), we consistently get a value of 1 regardless of the viewing angle for an absolutely smooth surface. For IBL we use a slightly different roughness transformation function:\\n\\n$$\\nk_\\\\text{IBL} = \\\\frac{r^2}{2}\\n$$\\n\\nIt\'s not necessary to dive into the topic of IBL right now, as it will be covered in future tasks.\\n\\n### Task\\nIn this task, you need to implement specular light attenuation due to self-shadowing of microfacets using the **Smith** geometry function. `fragRoughness` variable is defined.","hints":[],"restrictions":[],"order":19,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragRoughness = 0.01 + (sin(iTime * 0.5) * 0.5 + 0.5) * 0.99;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  float shininess = 2.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  \\n  vec3 result = specular * fragColor * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vec3 viewPos = vec3(0.0, 0.0, 2.5);\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragRoughness = 0.01 + (sin(iTime * 0.5) * 0.5 + 0.5) * 0.99;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 0.75);\\n  vec3 lightPos = vec3(-2.0, 2.0, 2.0);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  float shininess = 2.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  \\n  vec3 result = specular * fragColor * lightColor;\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":214,"slug":"fresnel-reflectance","moduleId":6,"name":"Fresnel Reflectance","order":20,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":214,"slug":"fresnel-reflectance","moduleId":6,"name":"Fresnel Reflectance","vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3 viewPos = getViewPos();\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.0;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 lightPos = vec3(0.0, 0.5, -0.6);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  // Phong Specular Component\\n  float shininess = 8.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  float NoL = dot(fragNormal, lightDir);\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  // Fresnel-Schlick Approximation\\n  vec3 kS = fresnelSchlick(max(dot(halfwayDir, viewDir), 0.0), F0);\\n  vec3 kD = vec3(1.0) - kS;\\n\\n  vec3 d = fragColor * NoL * lightColor * kD;\\n  vec3 s = specular * lightColor * kS;\\n  \\n  gl_FragColor = vec4(d + s, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3 viewPos = getViewPos();\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.0;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 lightPos = vec3(0.0, 0.5, -0.6);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  float shininess = 8.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  float NoL = dot(fragNormal, lightDir);\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  gl_FragColor = vec4(fragColor * NoL * lightColor + specular * lightColor, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.2,\\"z\\":2.7},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":1,\\"z\\":0},\\"scale\\":{\\"x\\":2,\\"y\\":0.25,\\"z\\":2},\\"geometry\\":\\"2\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null},{\\"position\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":-0.6},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":0.25,\\"y\\":0.25,\\"z\\":0.25},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":1}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[{\\"vertex\\":\\"\\\\nvoid main() {\\\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\\\n}\\\\n\\",\\"fragment\\":\\"void main() {\\\\n  gl_FragColor = vec4(1.0);\\\\n}\\\\n\\",\\"properties\\":\\"\\"}],\\"actions\\":[{\\"type\\":1,\\"time\\":3000,\\"distance\\":{\\"x\\":0,\\"y\\":3,\\"z\\":-2},\\"pivot\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0}}],\\"backgroundRGBA\\":\\"4080A0\\",\\"background\\":4227232,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"Let\'s make a clear distinction between the light components. The moment a beam of light reaches a surface, it splits into reflected and refracted components. The **reflected** component is the light reflected directly and does not penetrate the surface, we know it as the *specular* component of light.\\n\\n$$\\nL_{\\\\text{in}} = L_{\\\\text{refracted}} + L_{\\\\text{reflected}}\\n$$\\n\\nThe **refracted** component is light that penetrates and is absorbed by a surface. In general, not all the energy is absorbed, and the light continues to diffuse in (mostly) random directions, where it again collides with other particles until it runs out of energy, or it leaves the surface again. Thus the surface starts to re-emit light rays, contributing to the observed (*diffuse*) color of the surface.\\n\\n<br>\\n\\n### Reflection Equation\\n\\n<br>\\n\\nThe **Fresnel equation** describes the ratio of reflected to refracted light, which depends on the viewing angle. When light hits a surface, the Fresnel equation gives the percentage of light reflected based on the angle. The Fresnel equation is quite complex, but it can be simplified using the **Fresnel-Schlick** approximation:\\n\\n$$\\nF = F_0 + (1 - F_0) \\\\times (1 - (\\\\mathbf{V} \\\\cdot \\\\mathbf{H}))^5\\n$$\\n\\n\\\\- $F$ is the reflectance coefficient.\\n<br>\\n\\\\- $F_0$ is the base reflectance at normal incidence.\\n<br>\\n\\\\- $V$ is the view direction vector.\\n<br>\\n\\\\- $H$ is the halfway vector between the light direction and the view direction.\\n\\n<br>\\n\\nLet\'s emphasize that the Fresnel equation helps determine **the proportion of reflected light relative to refracted light** based on the angle of incidence and the refractive indices of the media, but **it doesn\'t provide the specific amount of reflected light** that will be observed. It doesn\'t account for other factors, such as the intensity of the incident light or geometric aspects that may affect the amount of observed reflected light (surface normal, direction of reflected light).\\n\\n<br>\\n\\n### Base Reflectance\\n\\n<br>\\n\\nEvery surface or material has a base reflectance level $F_0$, observed when looking at the surface directly. However, when you view the surface at a 90-degree angle to the normal (parallel), reflections become more noticeable. In theory, all surfaces fully reflect light when viewed at a perfect 90-degree angle.\\n\\n<br>\\n\\nThe base reflectance $F_0$ at normal incidence can be found in large databases like [this one](https://refractiveindex.info/).\\n\\n<br>\\n\\n### Outgoing Light\\n\\n<br>\\n\\nAccording to the law of conservation of energy, the refracted part of the light equals the remaining energy:\\n\\n$$\\nL_o = L_{\\\\text{diffuse}} \\\\times (1 - F) + L_{\\\\text{specular}} \\\\times F\\n$$\\n\\nThis approach ensures that the total outgoing light (diffuse + specular) does not exceed the incoming light.\\n\\n\\n### Task\\nYour task is to use the **Fresnel-Schlick** approximation to correct the distribution of diffuse and specular light based on the viewing angle, ensuring that the total amount of outgoing light (diffuse + specular) does not exceed the incoming light.\\n","hints":[],"restrictions":[],"order":20,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3 viewPos = getViewPos();\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.0;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 lightPos = vec3(0.0, 0.5, -0.6);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  float shininess = 8.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  float NoL = dot(fragNormal, lightDir);\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  gl_FragColor = vec4(fragColor * NoL * lightColor + specular * lightColor, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3 viewPos = getViewPos();\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.0;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 lightPos = vec3(0.0, 0.5, -0.6);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  float shininess = 8.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  float NoL = dot(fragNormal, lightDir);\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  gl_FragColor = vec4(fragColor * NoL * lightColor + specular * lightColor, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":216,"slug":"matallic-reflectance","moduleId":6,"name":"Matallic Reflectance","order":21,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":0,"premium":false,"child":{"task":{"id":216,"slug":"matallic-reflectance","moduleId":6,"name":"Matallic Reflectance","vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3 viewPos = getViewPos();\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragMetallic = 1.0;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 lightPos = vec3(0.0, 0.5, -0.6);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  // Phong Specular Component\\n  float shininess = 8.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  float NoL = dot(fragNormal, lightDir);\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n  F0 = mix(F0, fragColor, fragMetallic);\\n\\n  // Fresnel-Schlick Approximation\\n  vec3 kS = fresnelSchlick(max(dot(halfwayDir, viewDir), 0.0), F0);\\n  vec3 kD = vec3(1.0) - kS;\\n  kD *= 1.0 - fragMetallic;\\n\\n  vec3 d = fragColor * NoL * lightColor * kD;\\n  vec3 s = specular * lightColor * kS;\\n  \\n  gl_FragColor = vec4(d + s, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3 viewPos = getViewPos();\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragMetallic = 1.0;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 lightPos = vec3(0.0, 0.5, -0.6);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  // Phong Specular Component\\n  float shininess = 8.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  float NoL = dot(fragNormal, lightDir);\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  // Fresnel-Schlick Approximation\\n  vec3 kS = fresnelSchlick(max(dot(halfwayDir, viewDir), 0.0), F0);\\n  vec3 kD = vec3(1.0) - kS;\\n\\n  vec3 d = fragColor * NoL * lightColor * kD;\\n  vec3 s = specular * lightColor * kS;\\n  \\n  gl_FragColor = vec4(d + s, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.2,\\"z\\":2.7},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":1,\\"z\\":0},\\"scale\\":{\\"x\\":2,\\"y\\":0.25,\\"z\\":2},\\"geometry\\":\\"2\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null},{\\"position\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":-0.6},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":0.25,\\"y\\":0.25,\\"z\\":0.25},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":1}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[{\\"vertex\\":\\"\\\\nvoid main() {\\\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\\\n}\\\\n\\",\\"fragment\\":\\"void main() {\\\\n  gl_FragColor = vec4(1.0);\\\\n}\\\\n\\",\\"properties\\":\\"\\"}],\\"actions\\":[{\\"type\\":1,\\"time\\":3000,\\"distance\\":{\\"x\\":0,\\"y\\":3,\\"z\\":-2},\\"pivot\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0}}],\\"backgroundRGBA\\":\\"4080A0\\",\\"background\\":4227232,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"In the following graphs, you can see how the value of the *Fresnel-Schlick* function changes depending on the basic reflectivity $F_0$ and the angle between the half-vector $H$ and the view vector $V$:\\n\\n<br>\\n\\n![](/files/fresnel-function-reflectance-value.png)\\n\\n<br>\\n\\nIn the third graph, you can see that the curve appears as a straight line equal to $F_0$ all the way through. This means the intensity of reflected light remains relatively stable regardless of the angle of light incidence and the viewing angle if the basic reflectivity is above 0.5. *Such high basic reflectivity is typically found only in metallic surfaces*.\\n\\n<br>\\n\\n### Light-Metal interaction\\n\\n<br>\\n\\nMetallic surfaces interact with light differently than non-metallic ones (dielectrics). When light (an electromagnetic wave) hits a metal, its electric field interacts with the electrons in the metal, causing them to accelerate. Free electrons in the metal move easily under the influence of this electric field. Under the light\'s electric field, the electrons begin to oscillate and accelerate. Since accelerated charges emit electromagnetic waves (according to the laws of classical electrodynamics), these oscillating electrons start emitting light. Because of this, the reflected light takes on a hue characteristic of the specific metal. For example, gold reflects light with a yellow hue, copper—with a reddish one.\\n\\n<br>\\n\\n### Reflection Equation\\n\\n<br>\\n\\nWe can use the same Fresnel-Schlick approximation for metallic and dielectric (non-metallic) surfaces, but we need to adjust the basic reflectivity if we have a metallic surface. Usually, we do this as follows:\\n\\n```\\nvec3 F0 = vec3(0.04);\\nF0 = mix(F0, surfaceColor, metalness);\\n```\\n\\nFor most dielectrics, the base reflectance $F_0$ is kept at `0.04` and gives physically plausible results without the need to specify an additional surface parameter.\\n\\n<br>\\n\\nBased on how metallic a surface is, we either take the dielectric base reflectivity $F_0$ or the surface color. Because metallic surfaces absorb all refracted light, they have no diffuse reflections and we can directly use the surface color texture as their base reflectivity.\\n\\n<br>\\n\\n*Theoretically, the metallicity of a surface takes only two values: it is either a metal or it is not; the surface cannot be both. However, most render pipelines allow you to adjust the metallicity of a surface linearly between 0.0 and 1.0. This is necessary to create a surface, for example, with small particles of dust and sand, scratches on the metal surface.*\\n\\n<br>\\n\\nAdditionally, since metals do not refract light and do not have a diffuse component of re-emitted light, for a fully metallic material, the diffuse component will be zero:\\n\\n$$\\nL_o = L_{\\\\text{diffuse}} \\\\cdot (1 - F) \\\\cdot (1 - \\\\text{metallic}) + L_{\\\\text{specular}} \\\\cdot F\\n$$\\n\\nThis highlights the unique reflective properties of metallic surfaces, distinguishing them from non-metallic materials.\\n\\n### Task\\nYou have already developed a lighting calculation system for rendering surfaces. However, it currently lacks the specific handling of metallic surfaces. Your task is to extend the existing system to include the accurate processing of metallic surfaces.","hints":[],"restrictions":[],"order":21,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3 viewPos = getViewPos();\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragMetallic = 1.0;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 lightPos = vec3(0.0, 0.5, -0.6);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  // Phong Specular Component\\n  float shininess = 8.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  float NoL = dot(fragNormal, lightDir);\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  // Fresnel-Schlick Approximation\\n  vec3 kS = fresnelSchlick(max(dot(halfwayDir, viewDir), 0.0), F0);\\n  vec3 kD = vec3(1.0) - kS;\\n\\n  vec3 d = fragColor * NoL * lightColor * kD;\\n  vec3 s = specular * lightColor * kS;\\n  \\n  gl_FragColor = vec4(d + s, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3 viewPos = getViewPos();\\n  \\n  vec3 fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3 fragNormal = normalize(vNormal);\\n  float fragMetallic = 1.0;\\n  \\n  vec3 fragPos = vPos;\\n  vec3 lightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 lightPos = vec3(0.0, 0.5, -0.6);\\n  vec3 lightDir = normalize(lightPos - fragPos);\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n  vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n  // Phong Specular Component\\n  float shininess = 8.0;\\n  float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n  float NoL = dot(fragNormal, lightDir);\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  // Fresnel-Schlick Approximation\\n  vec3 kS = fresnelSchlick(max(dot(halfwayDir, viewDir), 0.0), F0);\\n  vec3 kD = vec3(1.0) - kS;\\n\\n  vec3 d = fragColor * NoL * lightColor * kD;\\n  vec3 s = specular * lightColor * kS;\\n  \\n  gl_FragColor = vec4(d + s, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":219,"slug":"brdf","moduleId":6,"name":"BRDF","order":22,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":0,"premium":false,"child":{"task":{"id":219,"slug":"brdf","moduleId":6,"name":"BRDF","vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst float PI = 3.14159265359;\\n\\nstruct TLight { vec3 position; vec3 color; };\\n\\nTLight c_Lights[3] = TLight[3](\\n  TLight(vec3( 0.0, 5.0, 10.0), vec3(1.0, 1.0, 1.0)),\\n  TLight(vec3( 8.0, 5.0, -8.0), vec3(0.5, 1.0, 0.5)),\\n  TLight(vec3(-8.0, 5.0, -8.0), vec3(0.5, 0.5, 1.0))\\n);\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3  fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3  fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.8;\\n  float fragRoughness = 0.3;\\n  vec3  fragPos = vPos;\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n  F0 = mix(F0, fragColor, fragMetallic);\\n\\n  vec3 viewPos = getViewPos();\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n    \\n  vec3 result = vec3(0.0);\\n  for (int i= 0; i < 3; i++) {\\n    vec3 lightColor = c_Lights[i].color;\\n    vec3 lightPos = c_Lights[i].position;\\n    vec3 lightDir = normalize(lightPos - fragPos);\\n    vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n    float dist = distance(lightPos, fragPos);\\n    float attenuation = 1.0 / (dist * 0.01 + 1.0);\\n    lightColor *= attenuation;\\n    \\n    float NoL = dot(fragNormal, lightDir);\\n    if (NoL > 0.0) {\\n      float NoV = max(dot(fragNormal, viewDir), 0.0);\\n      float HoV = max(dot(halfwayDir, viewDir), 0.0);\\n\\n      float k = pow(fragRoughness + 1.0, 2.0) / 8.0;\\n      float G = geometrySmith(fragNormal, viewDir, lightDir, k);\\n      vec3  F = fresnelSchlick(HoV, F0);\\n      float D = distributionGGX(fragNormal, halfwayDir, fragRoughness);\\n  \\n      vec3 Lo = vec3(0.0);\\n      Lo += F * D * G / (4.0 * NoL * NoV);\\n      Lo *= lightColor * NoL;\\n  \\n      result += Lo;\\n    }\\n  }\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst float PI = 3.14159265359;\\n\\nstruct TLight { vec3 position; vec3 color; };\\n\\nTLight c_Lights[3] = TLight[3](\\n  TLight(vec3( 0.0, 5.0, 10.0), vec3(1.0, 1.0, 1.0)),\\n  TLight(vec3( 8.0, 5.0, -8.0), vec3(0.5, 1.0, 0.5)),\\n  TLight(vec3(-8.0, 5.0, -8.0), vec3(0.5, 0.5, 1.0))\\n);\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3  fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3  fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.8;\\n  float fragRoughness = 0.3;\\n  vec3  fragPos = vPos;\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  vec3 viewPos = getViewPos();\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n    \\n  vec3 result = vec3(0.0);\\n  for (int i = 0; i < 3; i++) {\\n    vec3 lightColor = c_Lights[i].color;\\n    vec3 lightPos = c_Lights[i].position;\\n    vec3 lightDir = normalize(lightPos - fragPos);\\n    vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n    float dist = distance(lightPos, fragPos);\\n    float attenuation = 1.0 / (dist * 0.01 + 1.0);\\n    lightColor *= attenuation;\\n\\n    float NoL = dot(fragNormal, lightDir);\\n    if (NoL > 0.0) {\\n      // Phong Specular Component\\n      float shininess = 32.0;\\n      float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n      \\n      result += specular * lightColor;\\n    }\\n  }  \\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":15,\\"z\\":20},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":2.5,\\"y\\":2.5,\\"z\\":2.5},\\"geometry\\":\\"10\\",\\"model\\":\\"rabbit.glb\\",\\"meshes\\":[{\\"name\\":\\"21941_Rabbit_v1_NEW\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null},{\\"position\\":{\\"x\\":0,\\"y\\":5,\\"z\\":10},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":2.5,\\"y\\":2.5,\\"z\\":2.5},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":1}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":16777215},{\\"position\\":{\\"x\\":8,\\"y\\":5,\\"z\\":-8},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":2.5,\\"y\\":2.5,\\"z\\":2.5},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":1}],\\"colorRGBA\\":\\"19FF19\\",\\"color\\":1703705},{\\"position\\":{\\"x\\":-8,\\"y\\":5,\\"z\\":-8},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":2.5,\\"y\\":2.5,\\"z\\":2.5},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":1}],\\"colorRGBA\\":\\"1919FF\\",\\"color\\":1645055}],\\"materials\\":[{\\"vertex\\":\\"attribute vec4 color;\\\\n\\\\nvarying vec4 vColor;\\\\n\\\\nvoid main() {\\\\n  vColor = color;\\\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\\\n}\\\\n\\",\\"fragment\\":\\"varying vec4 vColor;\\\\n\\\\nvoid main() {\\\\n  gl_FragColor = vColor * 5.0;\\\\n}\\\\n\\",\\"properties\\":\\"\\"}],\\"actions\\":[{\\"type\\":0,\\"speed\\":1,\\"pivot\\":{\\"x\\":0,\\"y\\":5,\\"z\\":0}}],\\"backgroundRGBA\\":\\"4080A0\\",\\"background\\":4227232,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"**Bidirectional Reflectance Distribution Function (BRDF)** approximates how much each individual light ray $\\\\omega_i$ contributes to the final reflected light $\\\\omega_r$ of an opaque surface given its material properties. \\n\\n<br>\\n\\nMathematically, it is expressed as:\\n\\n$$\\nf_r(\\\\omega_i, \\\\omega_r) = \\\\frac{dL_r(\\\\omega_r)}{dE_i(\\\\omega_i)}\\n$$\\n\\n\\\\- $\\\\omega_i$ is the incident light direction.\\n<br>\\n\\\\- $\\\\omega_r$ is the reflected light direction.\\n<br>\\n\\\\- $dL_r$ is the reflected radiance.\\n<br>\\n\\\\- $dE_i$ is the incident irradiance.\\n\\n<br>\\n\\n### Incident Irradiance\\n\\n<br>\\n\\nThe incident irradiance $E_i$ is the measure of the power of incoming light hitting a surface per unit area. It represents the intensity of light energy striking a surface from a specific direction. Different directions can contribute different amounts of irradiance.\\n\\n<br>\\n\\n### Reflected Radiance\\n\\n<br>\\n\\nReflected radiance $L_r$ is the measure of the intensity of light that is reflected from a surface in a specific direction. It represents the amount of light that is scattered or reflected by the surface and travels away from it. The amount of reflected radiance depends on the properties of the surface, such as its roughness, color, and material type.\\n\\n<br>\\n\\n### BRDF Models\\n\\n<br>\\n\\nthe Blinn-Fong model is considered to be a BRDF taking the same $w_i$ and $w_r$ as input. However, the Blinn-Fong model is not considered physically correct because it does not guarantee the law of conservation of energy.\\n\\n<br>\\n\\nOne of the most commonly used physically-based BRDF models is the **Cook-Torrance model**. This model is based on microfacet theory and includes several key components:\\n\\n<br>\\n\\n1\\\\. **Normal Distribution Function (N)**: Describes the distribution of microfacets on the surface.\\n<br>\\n2\\\\. **Geometry Function (G)**: Accounts for shadowing and masking effects.\\n<br>\\n3\\\\. **Fresnel Term (F)**: Describes how reflectance varies with the angle of incidence.\\n\\n<br>\\n\\nThe Cook-Torrance model ensures energy conservation and provides more realistic rendering by accurately modeling surface roughness and the angular dependence of reflectance:\\n\\n$$\\nf_r(\\\\omega_i, \\\\omega_r) = \\\\frac{D(\\\\omega_h) G(\\\\omega_i, \\\\omega_r) F(\\\\omega_i, \\\\omega_r)}{4 (\\\\omega_i \\\\cdot n) (\\\\omega_r \\\\cdot n)}\\n$$\\n\\n\\\\- $\\\\omega_i$ is the incident light direction.\\n<br>\\n\\\\- $\\\\omega_r$ is the reflected light direction.\\n<br>\\n\\\\- $\\\\omega_h$ is the half-vector between $\\\\omega_i$ and $\\\\omega_r$.\\n<br>\\n\\\\- $D$ is the microfacet normal distribution function.\\n<br>\\n\\\\- $G$ is the geometry function.\\n<br>\\n\\\\- $F$ is the Fresnel term.\\n\\n<br>\\n\\n### Surface Illumination\\n\\n<br>\\n\\nTo calculate the specular radiation (amount of specular light) from a surface point, we sum the BRDF from all directions of incoming light. For a given point $P$, the reflected radiance $L_r$ can be computed as:\\n\\n$$\\nL_r(P, \\\\omega_r) = \\\\sum_{\\\\text{light sources}} f_r(\\\\omega_i, \\\\omega_r) L_i(\\\\omega_i) (N \\\\cdot \\\\omega_i)\\n$$\\n\\n\\\\- $L_r(P, \\\\omega_r)$ is the outgoing radiance in the view direction $\\\\omega_r$.\\n<br>\\n\\\\- $f_r$ is BRDF.\\n<br>\\n\\\\- $L_i(\\\\omega_i)$ is the incoming radiance from the light source in direction $\\\\omega_i$.\\n<br>\\n\\\\- $(N \\\\cdot \\\\omega_i)$ is the cosine term accounting for the angle of incidence.\\n\\n\\n### Task\\nYou are required to replace the Blinn-Phong reflection model with the Cook-Torrance Bidirectional Reflectance Distribution Function (BRDF) to calculate the specular radiance at each point on the model in the scene. Additionally, ensure that metalness is considered when calculating the specular radiance.","hints":[],"restrictions":[],"order":22,"cost":5,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst float PI = 3.14159265359;\\n\\nstruct TLight { vec3 position; vec3 color; };\\n\\nTLight c_Lights[3] = TLight[3](\\n  TLight(vec3( 0.0, 5.0, 10.0), vec3(1.0, 1.0, 1.0)),\\n  TLight(vec3( 8.0, 5.0, -8.0), vec3(0.5, 1.0, 0.5)),\\n  TLight(vec3(-8.0, 5.0, -8.0), vec3(0.5, 0.5, 1.0))\\n);\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3  fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3  fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.8;\\n  float fragRoughness = 0.3;\\n  vec3  fragPos = vPos;\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  vec3 viewPos = getViewPos();\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n    \\n  vec3 result = vec3(0.0);\\n  for (int i = 0; i < 3; i++) {\\n    vec3 lightColor = c_Lights[i].color;\\n    vec3 lightPos = c_Lights[i].position;\\n    vec3 lightDir = normalize(lightPos - fragPos);\\n    vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n    float dist = distance(lightPos, fragPos);\\n    float attenuation = 1.0 / (dist * 0.01 + 1.0);\\n    lightColor *= attenuation;\\n\\n    float NoL = dot(fragNormal, lightDir);\\n    if (NoL > 0.0) {\\n      // Phong Specular Component\\n      float shininess = 32.0;\\n      float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n      \\n      result += specular * lightColor;\\n    }\\n  }  \\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst float PI = 3.14159265359;\\n\\nstruct TLight { vec3 position; vec3 color; };\\n\\nTLight c_Lights[3] = TLight[3](\\n  TLight(vec3( 0.0, 5.0, 10.0), vec3(1.0, 1.0, 1.0)),\\n  TLight(vec3( 8.0, 5.0, -8.0), vec3(0.5, 1.0, 0.5)),\\n  TLight(vec3(-8.0, 5.0, -8.0), vec3(0.5, 0.5, 1.0))\\n);\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3  fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3  fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.8;\\n  float fragRoughness = 0.3;\\n  vec3  fragPos = vPos;\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n\\n  vec3 viewPos = getViewPos();\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n    \\n  vec3 result = vec3(0.0);\\n  for (int i = 0; i < 3; i++) {\\n    vec3 lightColor = c_Lights[i].color;\\n    vec3 lightPos = c_Lights[i].position;\\n    vec3 lightDir = normalize(lightPos - fragPos);\\n    vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n    float dist = distance(lightPos, fragPos);\\n    float attenuation = 1.0 / (dist * 0.01 + 1.0);\\n    lightColor *= attenuation;\\n\\n    float NoL = dot(fragNormal, lightDir);\\n    if (NoL > 0.0) {\\n      // Phong Specular Component\\n      float shininess = 32.0;\\n      float specular = pow(max(dot(fragNormal, halfwayDir), 0.0),  shininess);\\n      \\n      result += specular * lightColor;\\n    }\\n  }  \\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":218,"slug":"lambert-diffuse-reflection","moduleId":6,"name":"Lambert Diffuse Reflection","order":23,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":0,"premium":false,"child":{"task":{"id":218,"slug":"lambert-diffuse-reflection","moduleId":6,"name":"Lambert Diffuse Reflection","vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst float PI = 3.14159265359;\\n\\nstruct TLight { vec3 position; vec3 color; };\\n\\nTLight c_Lights[3] = TLight[3](\\n  TLight(vec3( 0.0, 5.0, 10.0), vec3(3.0, 3.0, 3.0)),\\n  TLight(vec3( 8.0, 5.0, -8.0), vec3(1.5, 3.0, 1.5)),\\n  TLight(vec3(-8.0, 5.0, -8.0), vec3(1.5, 1.5, 3.0))\\n);\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3  fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3  fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.3;\\n  float fragRoughness = 0.4;\\n  vec3  fragPos = vPos;\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n  F0 = mix(F0, fragColor, fragMetallic);\\n\\n  vec3 viewPos = getViewPos();\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n    \\n  vec3 result = vec3(0.0);\\n  for (int i= 0; i < 3; i++) {\\n    vec3 lightColor = c_Lights[i].color;\\n    vec3 lightPos = c_Lights[i].position;\\n    vec3 lightDir = normalize(lightPos - fragPos);\\n    vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n    float dist = distance(lightPos, fragPos);\\n    float attenuation = 1.0 / (dist * 0.01 + 1.0);\\n    lightColor *= attenuation;\\n    \\n    float NoL = dot(fragNormal, lightDir);\\n    if (NoL > 0.0) {\\n      float NoV = max(dot(fragNormal, viewDir), 0.0);\\n      float HoV = max(dot(halfwayDir, viewDir), 0.0);\\n\\n      float k = pow(fragRoughness + 1.0, 2.0) / 8.0;\\n      float G = geometrySmith(fragNormal, viewDir, lightDir, k);\\n      vec3  F = fresnelSchlick(HoV, F0);\\n      float D = distributionGGX(fragNormal, halfwayDir, fragRoughness);\\n\\n      vec3 kD = vec3(1.0) - F;\\n      kD *= 1.0 - fragMetallic;\\n      \\n      vec3 Lo = vec3(0.0);\\n      Lo += kD * fragColor / PI; \\n      Lo += F * D * G / (4.0 * NoL * NoV);\\n      Lo *= lightColor * NoL;\\n  \\n      result += Lo;\\n    }\\n  }\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst float PI = 3.14159265359;\\n\\nstruct TLight { vec3 position; vec3 color; };\\n\\nTLight c_Lights[3] = TLight[3](\\n  TLight(vec3( 0.0, 5.0, 10.0), vec3(3.0, 3.0, 3.0)),\\n  TLight(vec3( 8.0, 5.0, -8.0), vec3(1.5, 3.0, 1.5)),\\n  TLight(vec3(-8.0, 5.0, -8.0), vec3(1.5, 1.5, 3.0))\\n);\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3  fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3  fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.3;\\n  float fragRoughness = 0.4;\\n  vec3  fragPos = vPos;\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n  F0 = mix(F0, fragColor, fragMetallic);\\n\\n  vec3 viewPos = getViewPos();\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n    \\n  vec3 result = vec3(0.0);\\n  for (int i= 0; i < 3; i++) {\\n    vec3 lightColor = c_Lights[i].color;\\n    vec3 lightPos = c_Lights[i].position;\\n    vec3 lightDir = normalize(lightPos - fragPos);\\n    vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n    float dist = distance(lightPos, fragPos);\\n    float attenuation = 1.0 / (dist * 0.01 + 1.0);\\n    lightColor *= attenuation;\\n    \\n    float NoL = dot(fragNormal, lightDir);\\n    if (NoL > 0.0) {\\n      float NoV = max(dot(fragNormal, viewDir), 0.0);\\n      float HoV = max(dot(halfwayDir, viewDir), 0.0);\\n\\n      float k = pow(fragRoughness + 1.0, 2.0) / 8.0;\\n      float G = geometrySmith(fragNormal, viewDir, lightDir, k);\\n      vec3  F = fresnelSchlick(HoV, F0);\\n      float D = distributionGGX(fragNormal, halfwayDir, fragRoughness);\\n      \\n      vec3 Lo = vec3(0.0);\\n      Lo += F * D * G / (4.0 * NoL * NoV);\\n      Lo *= lightColor * NoL;\\n  \\n      result += Lo;\\n    }\\n  }\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":15,\\"z\\":20},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":2.5,\\"y\\":2.5,\\"z\\":2.5},\\"geometry\\":\\"10\\",\\"model\\":\\"rabbit.glb\\",\\"meshes\\":[{\\"name\\":\\"21941_Rabbit_v1_NEW\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null},{\\"position\\":{\\"x\\":0,\\"y\\":5,\\"z\\":10},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":2.5,\\"y\\":2.5,\\"z\\":2.5},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":1}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":16777215},{\\"position\\":{\\"x\\":8,\\"y\\":5,\\"z\\":-8},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":2.5,\\"y\\":2.5,\\"z\\":2.5},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":1}],\\"colorRGBA\\":\\"19FF19\\",\\"color\\":1703705},{\\"position\\":{\\"x\\":-8,\\"y\\":5,\\"z\\":-8},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":2.5,\\"y\\":2.5,\\"z\\":2.5},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":1}],\\"colorRGBA\\":\\"1919FF\\",\\"color\\":1645055}],\\"materials\\":[{\\"vertex\\":\\"attribute vec4 color;\\\\n\\\\nvarying vec4 vColor;\\\\n\\\\nvoid main() {\\\\n  vColor = color;\\\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\\\n}\\\\n\\",\\"fragment\\":\\"varying vec4 vColor;\\\\n\\\\nvoid main() {\\\\n  gl_FragColor = vColor * 5.0;\\\\n}\\\\n\\",\\"properties\\":\\"\\"}],\\"actions\\":[{\\"type\\":0,\\"speed\\":1,\\"pivot\\":{\\"x\\":0,\\"y\\":5,\\"z\\":0}}],\\"backgroundRGBA\\":\\"4080A0\\",\\"background\\":4227232,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"The Cook-Torrance reflection model is mainly used to describe specular reflection, but for a complete lighting model, a diffuse component is often added. In the simplest case, diffuse reflection can be added using **Lambert\'s diffuse reflection** model:\\n\\n$$\\nf_\\\\text{lambert} = \\\\frac{c}{\\\\pi}\\n$$\\n\\nwhere $c$ is the albedo or color of the surface (diffuse texture of the surface). We divide the diffuse part by ${\\\\pi}$ in the lighting model to normalize the distribution of light over the hemisphere around the surface. This is because, in diffuse reflection, light is evenly scattered in all directions.\\n\\n<br>\\n\\nThen, the overall BRDF formula will look as follows:\\n\\n$$\\nfr(\\\\omega_i, \\\\omega_r) = \\\\frac{D(\\\\omega_h) G(\\\\omega_i, \\\\omega_r) F(\\\\omega_i, \\\\omega_r)}{4 (\\\\omega_i \\\\cdot n) (\\\\omega_r \\\\cdot n)} + (1 - F(\\\\omega_i, \\\\omega_r)) \\\\frac{c}{\\\\pi}\\n$$\\n\\n### Task\\nYou have a program that calculates specular radiance using the Cook-Torrance Bidirectional Reflectance Distribution Function (BRDF). Your task is to complete the lighting model by adding Lambert\'s diffuse reflection. Additionally, ensure that metalness is considered when calculating the diffuse reflection.","hints":[],"restrictions":[],"order":23,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst float PI = 3.14159265359;\\n\\nstruct TLight { vec3 position; vec3 color; };\\n\\nTLight c_Lights[3] = TLight[3](\\n  TLight(vec3( 0.0, 5.0, 10.0), vec3(3.0, 3.0, 3.0)),\\n  TLight(vec3( 8.0, 5.0, -8.0), vec3(1.5, 3.0, 1.5)),\\n  TLight(vec3(-8.0, 5.0, -8.0), vec3(1.5, 1.5, 3.0))\\n);\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3  fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3  fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.3;\\n  float fragRoughness = 0.4;\\n  vec3  fragPos = vPos;\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n  F0 = mix(F0, fragColor, fragMetallic);\\n\\n  vec3 viewPos = getViewPos();\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n    \\n  vec3 result = vec3(0.0);\\n  for (int i= 0; i < 3; i++) {\\n    vec3 lightColor = c_Lights[i].color;\\n    vec3 lightPos = c_Lights[i].position;\\n    vec3 lightDir = normalize(lightPos - fragPos);\\n    vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n    float dist = distance(lightPos, fragPos);\\n    float attenuation = 1.0 / (dist * 0.01 + 1.0);\\n    lightColor *= attenuation;\\n    \\n    float NoL = dot(fragNormal, lightDir);\\n    if (NoL > 0.0) {\\n      float NoV = max(dot(fragNormal, viewDir), 0.0);\\n      float HoV = max(dot(halfwayDir, viewDir), 0.0);\\n\\n      float k = pow(fragRoughness + 1.0, 2.0) / 8.0;\\n      float G = geometrySmith(fragNormal, viewDir, lightDir, k);\\n      vec3  F = fresnelSchlick(HoV, F0);\\n      float D = distributionGGX(fragNormal, halfwayDir, fragRoughness);\\n      \\n      vec3 Lo = vec3(0.0);\\n      Lo += F * D * G / (4.0 * NoL * NoV);\\n      Lo *= lightColor * NoL;\\n  \\n      result += Lo;\\n    }\\n  }\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  vUv = uv;\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\nuniform sampler2D iChannel2;\\nuniform mat4 inverseViewMatrix;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst float PI = 3.14159265359;\\n\\nstruct TLight { vec3 position; vec3 color; };\\n\\nTLight c_Lights[3] = TLight[3](\\n  TLight(vec3( 0.0, 5.0, 10.0), vec3(3.0, 3.0, 3.0)),\\n  TLight(vec3( 8.0, 5.0, -8.0), vec3(1.5, 3.0, 1.5)),\\n  TLight(vec3(-8.0, 5.0, -8.0), vec3(1.5, 1.5, 3.0))\\n);\\n\\nfloat geometryGGX(float NdotV, float k) {\\n    float nom   = NdotV;\\n    float denom = NdotV * (1.0 - k) + k;\\n\\t\\n    return nom / denom;\\n}\\n  \\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float k) {\\n    float NdotV = max(dot(N, V), 0.0);\\n    float NdotL = max(dot(N, L), 0.0);\\n    float ggx1 = geometryGGX(NdotV, k);\\n    float ggx2 = geometryGGX(NdotL, k);\\n\\t\\n    return ggx1 * ggx2;\\n}\\n\\nfloat distributionGGX(vec3 N, vec3 H, float a) {\\n    float a2     = a*a;\\n    float NdotH  = max(dot(N, H), 0.0);\\n    float NdotH2 = NdotH*NdotH;\\n\\t\\n    float nom    = a2;\\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\\n    denom        = 3.14 * denom * denom;\\n\\t\\n    return nom / denom;\\n}\\n\\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\\n}\\n\\nvec3 getViewPos() {\\n  return (inverseViewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;  \\n}\\n\\nvoid main() {\\n  vec3  fragColor = vec3(1.0, 0.6, 0.6);\\n  vec3  fragNormal = normalize(vNormal);\\n  float fragMetallic = 0.3;\\n  float fragRoughness = 0.4;\\n  vec3  fragPos = vPos;\\n\\n  // Base Reflectance\\n  vec3 F0 = vec3(0.04);\\n  F0 = mix(F0, fragColor, fragMetallic);\\n\\n  vec3 viewPos = getViewPos();\\n  vec3 viewDir = normalize(viewPos - fragPos);\\n    \\n  vec3 result = vec3(0.0);\\n  for (int i= 0; i < 3; i++) {\\n    vec3 lightColor = c_Lights[i].color;\\n    vec3 lightPos = c_Lights[i].position;\\n    vec3 lightDir = normalize(lightPos - fragPos);\\n    vec3 halfwayDir = normalize(viewDir + lightDir);\\n\\n    float dist = distance(lightPos, fragPos);\\n    float attenuation = 1.0 / (dist * 0.01 + 1.0);\\n    lightColor *= attenuation;\\n    \\n    float NoL = dot(fragNormal, lightDir);\\n    if (NoL > 0.0) {\\n      float NoV = max(dot(fragNormal, viewDir), 0.0);\\n      float HoV = max(dot(halfwayDir, viewDir), 0.0);\\n\\n      float k = pow(fragRoughness + 1.0, 2.0) / 8.0;\\n      float G = geometrySmith(fragNormal, viewDir, lightDir, k);\\n      vec3  F = fresnelSchlick(HoV, F0);\\n      float D = distributionGGX(fragNormal, halfwayDir, fragRoughness);\\n      \\n      vec3 Lo = vec3(0.0);\\n      Lo += F * D * G / (4.0 * NoL * NoV);\\n      Lo *= lightColor * NoL;\\n  \\n      result += Lo;\\n    }\\n  }\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":221,"slug":"equirectangular-texture","moduleId":6,"name":"Equirectangular texture","order":25,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":0,"premium":false,"child":{"task":{"id":221,"slug":"equirectangular-texture","moduleId":6,"name":"Equirectangular texture","vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\n\\nconst float PI = 3.14;\\n\\nvarying vec3 vPos;\\n\\nvoid main() {\\n  vec3 P = normalize(vPos);\\n\\n  float phi = atan(P.x, P.z);\\n  float theta = asin(P.y);\\n\\n  float u = (phi + PI) / (2.0 * PI);\\n  float v = (theta + PI * 0.5) / (PI);\\n  \\n  gl_FragColor = texture(iChannel0, vec2(u, v));\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 3.14;\\n\\nvarying vec3 vPos;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  gl_FragColor = texture(iChannel0, uv);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0.9},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"3\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[{\\"type\\":0,\\"speed\\":0.5,\\"pivot\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0}}],\\"backgroundRGBA\\":\\"333333\\",\\"background\\":3355443,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"**Equirectangular texture** represents a spherical projection where the top and bottom parts of the image correspond to the poles, while the central part represents the equator.\\n\\n<br>\\n\\n![](/files/equirectangular_earth.jpg)\\n\\n<br>\\n\\nEach pixel of an equirectangular map represents a specific direction in space. To properly map the texture onto an object\'s surface, the surface normal is used. When projecting the map onto a sphere centered at the origin, the direction can be found by normalizing the position of the sphere fragment:\\n\\n```\\nP = normalize(pos)\\n```\\n\\nThis creates a unit sphere (with a radius of 1). Therefore, the vector from the sphere\'s center to the point $P$ on its surface will always have a length of 1.\\n\\n<br>\\n\\n![](/files/equirectangular_sphere.png)\\n\\n<br>\\n\\nFirst, we look at the plane formed by the $Y$ axis and the vector pointing to $P$. In this plane, the angle $\\\\phi$ is irrelevant.\\n\\n<br>\\n\\n![](/files/equirectangular_yp.png)\\n\\n<br>\\n\\nThe cross-section of the sphere in this plane is half of the unit circle (only half because we are interested in the interval $\\\\left[-\\\\frac{\\\\pi}{2}, \\\\frac{\\\\pi}{2}\\\\right]$ ). The position along the $Y$ axis is equal to the sine of the angle $\\\\theta$:\\n\\n$$\\ny = sin(\\\\theta)\\n$$\\n\\nTo find $\\\\theta$, we use the arcsine function:\\n\\n$$\\n\\\\theta  = asin(y)\\n$$\\n\\nThe value of $\\\\theta$ lies within the interval $\\\\left[-\\\\frac{\\\\pi}{2}, \\\\frac{\\\\pi}{2}\\\\right]$. To normalize it to the range $[0, 1]$ for use as the $v$ component of the texture coordinates:\\n\\n$$\\nv = \\\\frac{(\\\\theta + \\\\frac{\\\\pi}{2})}{π}\\n$$\\n\\nNext, let’s examine the $XZ$ plane:\\n\\n<br>\\n\\n![](/files/equirectangular_xz.png)\\n\\n<br>\\n\\nHere, the cross-section of the sphere is a full unit circle (covering the interval $\\\\left[0, 2\\\\pi\\\\right]$ ), where:\\n\\n$$\\nx = sin(\\\\phi) \\\\qquad z = cos(\\\\phi)\\n$$\\n\\nIn this case, point $P\'$ is the same as point $P$, but with the $y$ component set to 0:\\n\\n$$\\nP\' = (P_x, 0, P_z)\\n$$\\n\\nHowever, the projection $OP\'$ is not always a unit vector. To calculate the angle, we use the tangent (the ratio of $x$ to $z$ ):\\n\\n$$\\ntan(\\\\phi) = P_x/P_z\\n$$\\n\\n$$\\n\\\\phi = arctan(P_x/P_z)\\n$$\\n\\nHere, $\\\\phi$ is within the interval $\\\\left[-\\\\pi, \\\\pi\\\\right]$. To normalize it to the range $\\\\left[0, 1\\\\right]$ for the $u$ texture coordinate:\\n\\n$$\\nu = \\\\frac{\\\\phi + \\\\pi}{2\\\\pi}\\n$$\\n\\n### Task\\nYou are given an equirectangular texture representing the Earth map. This is a two-dimensional image of the spherical projection. Write a shader that maps the given equirectangular texture onto a sphere located at the center of the scene.\\n","hints":[],"restrictions":[],"order":25,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":6,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 3.14;\\n\\nvarying vec3 vPos;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  gl_FragColor = texture(iChannel0, uv);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"varying vec3 vPos;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n  vPos = vec3(modelMatrix * vec4(position, 1.0));\\n  vNormal = normalize(mat3(transpose(inverse(modelMatrix))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 3.14;\\n\\nvarying vec3 vPos;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  gl_FragColor = texture(iChannel0, uv);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for developers who want to master the basics of lighting in computer graphics. You will learn about the Blinn-Phong lighting model, different types of light sources, texture maps and the fundamentals of Physically Based Rendering (PBR). Each topic includes theoretical material and a practical task that can be completed directly on the website.","skillsDesc":"the Blinn-Phong lighting model and how it is applied in computer graphics.<br>different types of light sources, such as point, directional, and ambient lights.<br>master working with diffuse, specular and normal maps to add surface detail.<br>what metallicity is and how it affects the appearance of objects.<br>the basics of Physically Based Rendering (PBR) and its application for creating photorealistic images.","importanceDesc":"Lighting plays a crucial role in creating realistic and visually appealing 3D scenes. Understanding the basics of lighting allows developers to create scenes with proper light and shadow distribution, making objects appear more three-dimensional and lifelike.","certifiable":false,"images":["img-1.png","img-2.png","img-3.png","img-4.png","img-5.png","img-6.png"]}},{"id":12,"slug":"shadow-map","name":"Shadow Map","description":"Shadow mapping is a technique used in computer graphics to create realistic shadows in real-time rendering","tasks":8,"acceptedTasks":0,"isOpen":false,"order":4,"locked":false,"cover":true,"child":{"id":12,"slug":"shadow-map","name":"Shadow Map","description":"Shadow mapping is a technique used in computer graphics to create realistic shadows in real-time rendering","order":4,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":164,"slug":"shadow-map-view","moduleId":12,"name":"Shadow Map - View","order":0,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":164,"slug":"shadow-map-view","moduleId":12,"name":"Shadow Map - View","vertexShader":"attribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  vec3 front = -lightDir;\\n  vec3 up = vec3(0.0, 1.0, 0.0);\\n  vec3 right = normalize(cross(up, front));\\n  vec3 fixedUp = normalize(cross(front, right));\\n\\n  // column major\\n  mat4 lightView;\\n  \\n  // row 0 = dot(right, vertex_pos)\\n  lightView[0][0] = right.x;\\n  lightView[1][0] = right.y;\\n  lightView[2][0] = right.z;\\n  lightView[3][0] = -dot(lightPos, right);\\n\\n  // row 1 = dot(fixedUp, vertex_pos)\\n  lightView[0][1] = fixedUp.x;\\n  lightView[1][1] = fixedUp.y;\\n  lightView[2][1] = fixedUp.z;\\n  lightView[3][1] = -dot(lightPos, fixedUp);\\n\\n  // row 2 = dot(-front, vertex_pos)\\n  lightView[0][2] = front.x;\\n  lightView[1][2] = front.y;\\n  lightView[2][2] = front.z;\\n  lightView[3][2] = -dot(lightPos, front);\\n\\n  //row 3\\n  lightView[0][3] = 0.0;\\n  lightView[1][3] = 0.0;\\n  lightView[2][3] = 0.0;\\n  lightView[3][3] = 1.0;\\n\\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"attribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.75,\\"z\\":3.5},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":-1,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":8,\\"y\\":8,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"4080A0\\",\\"color\\":4227232},{\\"position\\":{\\"x\\":0,\\"y\\":-0.25,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"008080\\",\\"color\\":32896}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"The idea behind shadow maps is as follows: we additionally draw the scene from the light source point of view. The view for the shadow map is aligned with the light\'s local coordinate system. Everything that is visible is illuminated, the rest is in shadow.\\n\\n<br>\\n\\n![](/files/shadow-map-overview.png)\\n\\n<br>\\n\\nTo implement the algorithm we first need to figure out how to form a new view matrix having the direction vector **F** in a right-handed coordinate system (OpenGL is right-handed). Follow these steps:\\n\\n1. Normalize and flip the direction vector **F**, since the Z-axis must be pointing towards the camera in the right-handed coordinate system.\\n\\n<br>\\n\\n![](/files/shadow-map-view-flip-front.png)\\n\\n<br>\\n\\n2. Take up vector **U** in world space, it is typically `(0, 1, 0)`.\\n3. Compute the right vector **R**. The right vector **R** is perpendicular to the direction vector **-F** and the up vector **U**. You can compute it using the cross product: **R** = **U** x **-F**\\n\\n<br>\\n\\n![](/files/shadow-map-view-right.png)\\n\\n<br>\\n\\n4. Compute the new Up vector. We know for sure that vectors **-F** and **R** are perpendicular, but we cannot guarantee that **-F** and **U** are perpendicular since their values were taken independently of each other. Therefore, we need to calculate a new vector **U\'** that completes the orthogonal system: **U\'** = **-F** x **R**.\\n\\n<br>\\n\\n![](/files/shadow-map-view-up.png)\\n\\n<br>\\n\\n5. Create the View Matrix. The view matrix is a 4x4 matrix that combines the right, up, and direction vectors. It looks like this:\\n\\n```\\n    | Rx   Ry   Rz  0|\\n    | U`x  U`y  U`z 0|\\n    |-Fx  -Fy  -Fz  0|\\n    | 0    0    0   1|\\n```\\n\\n6. Add Translation. To translate an object from world space coordinates to view space coordinates, we must subtract the position of view **P** from the position of the object. This can be represented as a matrix:\\n\\n```\\n    | 1 0 0 -Px|\\n    | 0 1 0 -Py|\\n    | 0 0 1 -Pz|\\n    | 0 0 0  1 |\\n```\\n\\nWe can add the translation to our view matrix by matrix multiplication:\\n\\n```\\n    | Rx   Ry   Rz  0|   | 1 0 0 -Px|\\n    | U`x  U`y  U`z 0| X | 0 1 0 -Py|\\n    |-Fx  -Fy  -Fz  0|   | 0 0 1 -Pz|\\n    | 0    0    0   1|   | 0 0 0  1 |\\n```\\n\\n7. If rendering system expects column-major matrices (like OpenGL), transpose the matrix.\\n\\n### Task\\n\\nCalculate a new view matrix (also known as a light view matrix) that transforms the scene to the light source’s space. This allows us to see the scene as if we were looking directly from the light source.","hints":[],"restrictions":[],"order":0,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"attribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"attribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":165,"slug":"shadow-map-orthographic-projection","moduleId":12,"name":"Shadow Map - Orthographic Projection","order":1,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":165,"slug":"shadow-map-orthographic-projection","moduleId":12,"name":"Shadow Map - Orthographic Projection","vertexShader":"uniform vec2 iResolution;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float ratio = iResolution.x / iResolution.y;\\n  float size = 2.0;\\n  float left = -size * ratio;\\n  float right = size * ratio;\\n  float top = size;\\n  float bottom = -size;\\n  float far = 8.0;\\n  float near = 0.1;\\n  \\n  mat4 lightProjection;\\n  \\n  lightProjection[0][0] = 2.0 / (right - left);\\n  lightProjection[1][0] = 0.0;\\n  lightProjection[2][0] = 0.0;\\n  lightProjection[3][0] = -(right + left) / (right - left);\\n\\n  lightProjection[0][1] = 0.0;\\n  lightProjection[1][1] = 2.0 / (top - bottom);\\n  lightProjection[2][1] = 0.0;\\n  lightProjection[3][1] = -(top + bottom) / (top - bottom);\\n\\n  lightProjection[0][2] = 0.0;\\n  lightProjection[1][2] = 0.0;\\n  lightProjection[2][2] = -2.0 / (far - near);\\n  lightProjection[3][2] = -(far + near) / (far - near);\\n\\n  lightProjection[0][3] = 0.0;\\n  lightProjection[1][3] = 0.0;\\n  lightProjection[2][3] = 0.0;\\n  lightProjection[3][3] = 1.0;\\n\\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  vec3 front = -lightDir;\\n  vec3 up = vec3(0.0, 1.0, 0.0);\\n  vec3 right = normalize(cross(up, front));\\n  vec3 fixedUp = normalize(cross(front, right));\\n\\n  // column major\\n  mat4 lightView;\\n  \\n  // row 0 = dot(right, vertex_pos)\\n  lightView[0][0] = right.x;\\n  lightView[1][0] = right.y;\\n  lightView[2][0] = right.z;\\n  lightView[3][0] = -dot(lightPos, right);\\n\\n  // row 1 = dot(fixedUp, vertex_pos)\\n  lightView[0][1] = fixedUp.x;\\n  lightView[1][1] = fixedUp.y;\\n  lightView[2][1] = fixedUp.z;\\n  lightView[3][1] = -dot(lightPos, fixedUp);\\n\\n  // row 2 = dot(-front, vertex_pos)\\n  lightView[0][2] = front.x;\\n  lightView[1][2] = front.y;\\n  lightView[2][2] = front.z;\\n  lightView[3][2] = -dot(lightPos, front);\\n\\n  //row 3\\n  lightView[0][3] = 0.0;\\n  lightView[1][3] = 0.0;\\n  lightView[2][3] = 0.0;\\n  lightView[3][3] = 1.0;\\n\\n  gl_Position = getLightProjection() * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.75,\\"z\\":3.5},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":-1,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":8,\\"y\\":8,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"4080A0\\",\\"color\\":4227232},{\\"position\\":{\\"x\\":0,\\"y\\":-0.25,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"008080\\",\\"color\\":32896}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"We are modelling a directional light source, so all light rays are parallel. \\n\\n<br>\\n\\n![](/files/shadow-map-directed-light.png)\\n\\n<br>\\n\\nFor this reason, we are going to use an orthographic projection matrix for the light source as there is no perspective distortion and all rays remain parallel. \\n\\n<br>\\n\\n![](/files/shadow-map-ortho-vs-persp.png)\\n\\n<br>\\n\\nIn orthographic projection camera-space points are always mapped to the projection plane by casting rays that are parallel to the camera’s viewing direction.\\n\\n<br>\\n\\nTo create an orthogonal projection matrix, you will need the following parameters:\\n1. Left (**L**), Right (**R**): The extents of the view volume along the X-axis.\\n2. Bottom (**B**), Top (**T**): The extents along the Y-axis.\\n3. Near plane distance (**N**): The closest distance from the camera where objects are visible.\\n4. Far plane distance (**F**): The farthest distance where objects are still visible.\\n\\nThe orthogonal projection matrix maps the x and y coordinates from the ranges [**L**, **R**] and [**B**, **T**] to the range [−1,1]:\\n\\n```\\nx` = (x-L)/(R-L) * 2 - 1 = x*[2/(R-L)] + [-(R+L)/(R-L)]\\ny` = (y-B)/(T-B) * 2 - 1 = y*[2/(T-B)] + [-(T+B)/(T-B)]\\n```\\n\\nIn a similar manner, but negating z since we use the right-handed coordinate system where the Z-axis is directed into the camera:\\n\\n```\\nz` = (-z-N)/(F-N) * 2 - 1 = z*[-2/(F-N)] + [-(F+N)/(F-N)]\\n```\\n\\nWe purposely emphasised the multiplicative and aditive parts of the coordinate transformation to make it easier to represent the transformation in matrix form:\\n\\n```\\n| 2/(R-L)    0        0    -(R+L)/(R-L)|\\n|    0    2/(T-B)     0    -(T+B)/(T-B)|\\n|    0       0    -2/(F-N) -(F+N)/(F-N)|\\n|    0       0        0          1     |\\n```\\n\\nDon\'t forget to transpose the matrix if the rendering system expects column-major matrices (like OpenGL).\\n\\n### Task\\n\\nDraw the scene from the light source point of view using orthogonal projection. When forming the projection matrix, take into account the aspect ratio of the screen.","hints":[],"restrictions":[],"order":1,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform vec2 iResolution;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":166,"slug":"shadow-map-depth-buffer","moduleId":12,"name":"Shadow Map - Depth Buffer","order":2,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":166,"slug":"shadow-map-depth-buffer","moduleId":12,"name":"Shadow Map - Depth Buffer","vertexShader":"uniform vec2 iResolution;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\n\\nmat4 getLightProjection() {\\n  float ratio = iResolution.x / iResolution.y;\\n  float size = 2.0;\\n  float left = -size * ratio;\\n  float right = size * ratio;\\n  float top = size;\\n  float bottom = -size;\\n  float far = 8.0;\\n  float near = 0.1;\\n  \\n  mat4 lightProjection;\\n  \\n  lightProjection[0][0] = 2.0 / (right - left);\\n  lightProjection[1][0] = 0.0;\\n  lightProjection[2][0] = 0.0;\\n  lightProjection[3][0] = -(right + left) / (right - left);\\n\\n  lightProjection[0][1] = 0.0;\\n  lightProjection[1][1] = 2.0 / (top - bottom);\\n  lightProjection[2][1] = 0.0;\\n  lightProjection[3][1] = -(top + bottom) / (top - bottom);\\n\\n  lightProjection[0][2] = 0.0;\\n  lightProjection[1][2] = 0.0;\\n  lightProjection[2][2] = -2.0 / (far - near);\\n  lightProjection[3][2] = -(far + near) / (far - near);\\n\\n  lightProjection[0][3] = 0.0;\\n  lightProjection[1][3] = 0.0;\\n  lightProjection[2][3] = 0.0;\\n  lightProjection[3][3] = 1.0;\\n\\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  vec3 front = -lightDir;\\n  vec3 up = vec3(0.0, 1.0, 0.0);\\n  vec3 right = normalize(cross(up, front));\\n  vec3 fixedUp = normalize(cross(front, right));\\n\\n  // column major\\n  mat4 lightView;\\n  \\n  // row 0 = dot(right, vertex_pos)\\n  lightView[0][0] = right.x;\\n  lightView[1][0] = right.y;\\n  lightView[2][0] = right.z;\\n  lightView[3][0] = -dot(lightPos, right);\\n\\n  // row 1 = dot(fixedUp, vertex_pos)\\n  lightView[0][1] = fixedUp.x;\\n  lightView[1][1] = fixedUp.y;\\n  lightView[2][1] = fixedUp.z;\\n  lightView[3][1] = -dot(lightPos, fixedUp);\\n\\n  // row 2 = dot(-front, vertex_pos)\\n  lightView[0][2] = front.x;\\n  lightView[1][2] = front.y;\\n  lightView[2][2] = front.z;\\n  lightView[3][2] = -dot(lightPos, front);\\n\\n  //row 3\\n  lightView[0][3] = 0.0;\\n  lightView[1][3] = 0.0;\\n  lightView[2][3] = 0.0;\\n  lightView[3][3] = 1.0;\\n\\n  vec4 pos = getLightProjection() * lightView * modelMatrix * vec4(position, 1.0);\\n  gl_Position = pos;\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vPos = pos;\\n}\\n","fragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\n\\nvoid main() {\\n  // float ambient = 0.2;  \\n  // float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  // gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n\\n  float depth = vPos.z * 0.5 + 0.5;\\n  gl_FragColor = vec4(depth, depth, depth, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.75,\\"z\\":3.5},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":-1,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":8,\\"y\\":8,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"4080A0\\",\\"color\\":4227232},{\\"position\\":{\\"x\\":0,\\"y\\":-0.25,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"008080\\",\\"color\\":32896}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"A **depth map** is a texture with depth values rendered from the perspective of a light source. Each pixel in the depth map stores the distance from the camera to the corresponding point in the scene. In a view space the Z-coordinate of a fragment corresponds directly to its distance from the camera. \\n\\n<br>\\n\\n![](/files/shadow-map-depth-buffer.png)\\n\\n<br>\\n\\nThe distance are usually normalized in the range **[0, 1]**. A value of **0** typically corresponds to the near plane (closest to the camera), and a value of **1** corresponds to the far plane (farthest visible distance). Intermediate values represent depths between these planes.\\n\\n### Task\\n\\nDraw the scene depth from the light source point of view using orthogonal projection. When forming the projection matrix, take into account the aspect ratio of the screen.","hints":[],"restrictions":[],"order":2,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform vec2 iResolution;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"varying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":167,"slug":"shadow-map-render-passes","moduleId":12,"name":"Shadow Map - Render Passes","order":3,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":167,"slug":"shadow-map-render-passes","moduleId":12,"name":"Shadow Map - Render Passes","vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\nattribute int id;\\n\\nflat varying int vId;\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec2 vUv;\\n\\nmat4 getLightProjection() {\\n  float ratio = iResolution.x / iResolution.y;\\n  float size = 2.0;\\n  float left = -size * ratio;\\n  float right = size * ratio;\\n  float top = size;\\n  float bottom = -size;\\n  float far = 8.0;\\n  float near = 0.1;\\n  \\n  mat4 lightProjection;\\n  \\n  lightProjection[0][0] = 2.0 / (right - left);\\n  lightProjection[1][0] = 0.0;\\n  lightProjection[2][0] = 0.0;\\n  lightProjection[3][0] = -(right + left) / (right - left);\\n\\n  lightProjection[0][1] = 0.0;\\n  lightProjection[1][1] = 2.0 / (top - bottom);\\n  lightProjection[2][1] = 0.0;\\n  lightProjection[3][1] = -(top + bottom) / (top - bottom);\\n\\n  lightProjection[0][2] = 0.0;\\n  lightProjection[1][2] = 0.0;\\n  lightProjection[2][2] = -2.0 / (far - near);\\n  lightProjection[3][2] = -(far + near) / (far - near);\\n\\n  lightProjection[0][3] = 0.0;\\n  lightProjection[1][3] = 0.0;\\n  lightProjection[2][3] = 0.0;\\n  lightProjection[3][3] = 1.0;\\n\\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  vec3 front = -lightDir;\\n  vec3 up = vec3(0.0, 1.0, 0.0);\\n  vec3 right = normalize(cross(up, front));\\n  vec3 fixedUp = normalize(cross(front, right));\\n\\n  // column major\\n  mat4 lightView;\\n  \\n  // row 0 = dot(right, vertex_pos)\\n  lightView[0][0] = right.x;\\n  lightView[1][0] = right.y;\\n  lightView[2][0] = right.z;\\n  lightView[3][0] = -dot(lightPos, right);\\n\\n  // row 1 = dot(fixedUp, vertex_pos)\\n  lightView[0][1] = fixedUp.x;\\n  lightView[1][1] = fixedUp.y;\\n  lightView[2][1] = fixedUp.z;\\n  lightView[3][1] = -dot(lightPos, fixedUp);\\n\\n  // row 2 = dot(-front, vertex_pos)\\n  lightView[0][2] = front.x;\\n  lightView[1][2] = front.y;\\n  lightView[2][2] = front.z;\\n  lightView[3][2] = -dot(lightPos, front);\\n\\n  //row 3\\n  lightView[0][3] = 0.0;\\n  lightView[1][3] = 0.0;\\n  lightView[2][3] = 0.0;\\n  lightView[3][3] = 1.0;\\n\\n  mat4 projView;\\n  if (iDepthPass == 1) {\\n    projView = getLightProjection() * lightView;\\n  } else {\\n    projView = projectionMatrix * viewMatrix;\\n  }\\n\\n  vec4 pos = projView * modelMatrix * vec4(position, 1.0);\\n  gl_Position = pos;\\n\\n  vId = id;\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vPos = pos;\\n  vUv = uv;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nflat varying int vId;\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  // float ambient = 0.2;  \\n  // float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  // gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n\\n  // float depth = vPos.z * 0.5 + 0.5;\\n  // gl_FragColor = vec4(depth, depth, depth, 1.0);\\n\\n\\n  if (iDepthPass == 1) {\\n    if (vId == 2) discard;\\n    \\n    float depth = vPos.z * 0.5 + 0.5;\\n    gl_FragColor = vec4(depth, depth, depth, 1.0);\\n    \\n  } else {\\n    float ambient = 0.2;  \\n    float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n    vec4 objColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n\\n    if (vId == 2) {\\n      vec3 depth = texture(iDepthBuffer, vUv).rrr;\\n      gl_FragColor = vec4(depth, 1.0);\\n    } else {\\n      gl_FragColor = objColor;\\n    }\\n  }\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\nattribute int id;\\n\\nflat varying int vId;\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec2 vUv;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vId = id;\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vUv = uv;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nflat varying int vId;\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.75,\\"z\\":3.5},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":-1,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":8,\\"y\\":8,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"4080A0\\",\\"color\\":4227232},{\\"position\\":{\\"x\\":0,\\"y\\":-0.25,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"008080\\",\\"color\\":32896},{\\"position\\":{\\"x\\":-0.5,\\"y\\":0,\\"z\\":2.4},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":0.5,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"000000\\",\\"color\\":0}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"A **render pass** refers to a separate rendering stages that captures specific information about a scene. Instead of rendering the entire scene in one step, we break it down into individual passes, each targeting a specific aspect (such as depth, color and etc). The result of these passes are full-screen textures that we can feed into the shader programs of the following passes to create effects like shadows.\\n\\n<br>\\n\\nWhen it comes to shadows, we typically use two render passes:\\n1. **Shadow Pass**. This pass specifically renders the scene from the perspective of the light source. It collects information about the depth (distance) from the light source to each fragment (pixel) of the scene.\\n2. **Main pass**. We render the scene from the perspective of the main camera. Using the shadow map, we determine which fragments are affected by shadows and apply appropriate shading during compositing.\\n\\n### Task\\n\\nIn our current implementation, we use a single shader program for two render passes. To determine which pass the program is currently executing, we rely on the uniform variable `iDepthPass`. If `iDepthPass` equals `1`, it indicates that the depth pass is being executed:\\n\\n```\\nif (iDepthPass == 1) \\n    gl_FragColor = lightSceneDepth;\\nelse\\n    gl_FragColor = mainSceneColor;\\n```\\n\\nDuring the depth pass, your task is to render the scene depth from the light source point of view using orthogonal projection. In the main pass, you\'ll have access to the depth buffer via the `iDepthBuffer` texture. \\n\\n<br>\\n\\nYou can notice a black plane on the screen with an `vId` of `2`. During the main pass, render the resulting depth texture over this plane.","hints":[],"restrictions":[],"order":3,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\nattribute int id;\\n\\nflat varying int vId;\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec2 vUv;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vId = id;\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vUv = uv;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nflat varying int vId;\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\nattribute int id;\\n\\nflat varying int vId;\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec2 vUv;\\n\\nmat4 getLightProjection() {\\n  float left = -2.0;\\n  float right = 2.0;\\n  float top = 2.0;\\n  float bottom = -2.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vId = id;\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vUv = uv;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nflat varying int vId;\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec2 vUv;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":168,"slug":"shadow-map-shadow","moduleId":12,"name":"Shadow Map - Shadow","order":4,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":168,"slug":"shadow-map-shadow","moduleId":12,"name":"Shadow Map - Shadow","vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec4 vPosLight;\\n\\nmat4 getLightProjection() {\\n  float ratio = iResolution.x / iResolution.y;\\n  float size = 4.0;\\n  float left = -size * ratio;\\n  float right = size * ratio;\\n  float top = size;\\n  float bottom = -size;\\n  float far = 8.0;\\n  float near = 0.1;\\n  \\n  mat4 lightProjection;\\n  \\n  lightProjection[0][0] = 2.0 / (right - left);\\n  lightProjection[1][0] = 0.0;\\n  lightProjection[2][0] = 0.0;\\n  lightProjection[3][0] = -(right + left) / (right - left);\\n\\n  lightProjection[0][1] = 0.0;\\n  lightProjection[1][1] = 2.0 / (top - bottom);\\n  lightProjection[2][1] = 0.0;\\n  lightProjection[3][1] = -(top + bottom) / (top - bottom);\\n\\n  lightProjection[0][2] = 0.0;\\n  lightProjection[1][2] = 0.0;\\n  lightProjection[2][2] = -2.0 / (far - near);\\n  lightProjection[3][2] = -(far + near) / (far - near);\\n\\n  lightProjection[0][3] = 0.0;\\n  lightProjection[1][3] = 0.0;\\n  lightProjection[2][3] = 0.0;\\n  lightProjection[3][3] = 1.0;\\n\\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  vec3 front = -lightDir;\\n  vec3 up = vec3(0.0, 1.0, 0.0);\\n  vec3 right = normalize(cross(up, front));\\n  vec3 fixedUp = normalize(cross(front, right));\\n\\n  // column major\\n  mat4 lightView;\\n  \\n  // row 0 = dot(right, vertex_pos)\\n  lightView[0][0] = right.x;\\n  lightView[1][0] = right.y;\\n  lightView[2][0] = right.z;\\n  lightView[3][0] = -dot(lightPos, right);\\n\\n  // row 1 = dot(fixedUp, vertex_pos)\\n  lightView[0][1] = fixedUp.x;\\n  lightView[1][1] = fixedUp.y;\\n  lightView[2][1] = fixedUp.z;\\n  lightView[3][1] = -dot(lightPos, fixedUp);\\n\\n  // row 2 = dot(-front, vertex_pos)\\n  lightView[0][2] = front.x;\\n  lightView[1][2] = front.y;\\n  lightView[2][2] = front.z;\\n  lightView[3][2] = -dot(lightPos, front);\\n\\n  //row 3\\n  lightView[0][3] = 0.0;\\n  lightView[1][3] = 0.0;\\n  lightView[2][3] = 0.0;\\n  lightView[3][3] = 1.0;\\n\\n  mat4 lightProjView = getLightProjection() * lightView;\\n  mat4 cameraProjView = projectionMatrix * viewMatrix;\\n  mat4 projView = (iDepthPass == 1) ? lightProjView : cameraProjView;\\n\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  vec4 pos = projView * worldPos;\\n  gl_Position = pos;\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vPos = pos;\\n  vPosLight = lightProjView * worldPos;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec4 vPosLight;\\n\\nvoid main() {\\n  if (iDepthPass == 1) {\\n  \\n    float depth = vPos.z * 0.5 + 0.5;\\n    gl_FragColor = vec4(depth, depth, depth, 1.0);\\n  \\n  } else {\\n\\n    vec3 lightCoords = vPosLight.xyz * 0.5 + 0.5;\\n    float bufferDepth = texture(iDepthBuffer, lightCoords.xy).r;\\n    float fragDepth = lightCoords.z;\\n    float shadow = fragDepth > bufferDepth ? 1.0 : 0.0;\\n    \\n    float ambient = 0.2;  \\n    float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n    vec3  color = (ambient + (1.0 - shadow) * diffuse) * vColor.rgb;\\n    \\n    gl_FragColor = vec4(color, 1.0);\\n  }\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.75,\\"z\\":3.5},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":-1,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":8,\\"y\\":8,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"4080A0\\",\\"color\\":4227232},{\\"position\\":{\\"x\\":0,\\"y\\":-0.25,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"008080\\",\\"color\\":32896}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"Once we have built the shadow map, we render the scene as normal from the perspective of the main camera. For each fragment **P** rendered, we also compute its depth from the light source, denoted by **Light(P)**. \\n\\n<br>\\n\\n![](/files/shadow-map-shadow.png)\\n\\n<br>\\n\\nAdditionally, using the projected coordinates of the fragment **P** from the light point of view, we sample the shadow map along the line of sight from the light source to pixel **P**. This allows us to obtain the depth value **Light(P0)** stored in the shadow map. **Light(P0)** represents the depth of the pixel closest to the light along the line of sight from the light’s position to **P**.\\n\\n<br>\\n\\n![](/files/shadow-map-light-projection-plane.png)\\n\\n<br>\\n\\nWe determine whether a pixel **P** is in shadow by comparing **Light(P)** and **Light(P0)**. Then, a pixel is in shadow if **Light(P)** **>** **Light(P0)**, and it is not in shadow if **Light(P)** **≤** **Light(P0)**.\\n\\n### Task\\nGenerate a shadow map for the light source using orthogonal projection during the depth pass. When forming the projection matrix, consider the aspect ratio of the screen.\\n\\n<br>\\n\\nIn the main pass, draw the scene from the perspective of the main camera. Using the shadow map, determine which fragments are not visible to the light source. If a fragment is in shadow, do not apply diffuse light to it.\\n","hints":[],"restrictions":[],"order":4,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":169,"slug":"shadow-map-bias","moduleId":12,"name":"Shadow Map - Bias","order":5,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":169,"slug":"shadow-map-bias","moduleId":12,"name":"Shadow Map - Bias","vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec4 vPosLight;\\n\\nmat4 getLightProjection() {\\n  float ratio = iResolution.x / iResolution.y;\\n  float size = 4.0;\\n  float left = -size * ratio;\\n  float right = size * ratio;\\n  float top = size;\\n  float bottom = -size;\\n  float far = 8.0;\\n  float near = 0.1;\\n  \\n  mat4 lightProjection;\\n  \\n  lightProjection[0][0] = 2.0 / (right - left);\\n  lightProjection[1][0] = 0.0;\\n  lightProjection[2][0] = 0.0;\\n  lightProjection[3][0] = -(right + left) / (right - left);\\n\\n  lightProjection[0][1] = 0.0;\\n  lightProjection[1][1] = 2.0 / (top - bottom);\\n  lightProjection[2][1] = 0.0;\\n  lightProjection[3][1] = -(top + bottom) / (top - bottom);\\n\\n  lightProjection[0][2] = 0.0;\\n  lightProjection[1][2] = 0.0;\\n  lightProjection[2][2] = -2.0 / (far - near);\\n  lightProjection[3][2] = -(far + near) / (far - near);\\n\\n  lightProjection[0][3] = 0.0;\\n  lightProjection[1][3] = 0.0;\\n  lightProjection[2][3] = 0.0;\\n  lightProjection[3][3] = 1.0;\\n\\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  vec3 front = -lightDir;\\n  vec3 up = vec3(0.0, 1.0, 0.0);\\n  vec3 right = normalize(cross(up, front));\\n  vec3 fixedUp = normalize(cross(front, right));\\n\\n  // column major\\n  mat4 lightView;\\n  \\n  // row 0 = dot(right, vertex_pos)\\n  lightView[0][0] = right.x;\\n  lightView[1][0] = right.y;\\n  lightView[2][0] = right.z;\\n  lightView[3][0] = -dot(lightPos, right);\\n\\n  // row 1 = dot(fixedUp, vertex_pos)\\n  lightView[0][1] = fixedUp.x;\\n  lightView[1][1] = fixedUp.y;\\n  lightView[2][1] = fixedUp.z;\\n  lightView[3][1] = -dot(lightPos, fixedUp);\\n\\n  // row 2 = dot(-front, vertex_pos)\\n  lightView[0][2] = front.x;\\n  lightView[1][2] = front.y;\\n  lightView[2][2] = front.z;\\n  lightView[3][2] = -dot(lightPos, front);\\n\\n  //row 3\\n  lightView[0][3] = 0.0;\\n  lightView[1][3] = 0.0;\\n  lightView[2][3] = 0.0;\\n  lightView[3][3] = 1.0;\\n\\n  mat4 lightProjView = getLightProjection() * lightView;\\n  mat4 cameraProjView = projectionMatrix * viewMatrix;\\n  mat4 projView = (iDepthPass == 1) ? lightProjView : cameraProjView;\\n\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  vec4 pos = projView * worldPos;\\n  gl_Position = pos;\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vPos = pos;\\n  vPosLight = lightProjView * worldPos;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec4 vPosLight;\\n\\nvoid main() {\\n  if (iDepthPass == 1) {\\n  \\n    float depth = vPos.z * 0.5 + 0.5;\\n    gl_FragColor = vec4(depth, depth, depth, 1.0);\\n  \\n  } else {\\n\\n    float bias = max(0.1 * (1.0 - dot(vNormal, normalize(-vLightDir))), 0.0);\\n\\n    vec3 lightCoords = vPosLight.xyz * 0.5 + 0.5;\\n    float bufferDepth = texture(iDepthBuffer, lightCoords.xy).r;\\n    float fragDepth = lightCoords.z;\\n    float shadow = fragDepth - bias > bufferDepth ? 1.0 : 0.0;\\n    \\n    float ambient = 0.2;  \\n    float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n    vec3  color = (ambient + (1.0 - shadow) * diffuse) * vColor.rgb;\\n    \\n    gl_FragColor = vec4(color, 1.0);\\n  }\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.75,\\"z\\":3.5},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":-1,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":8,\\"y\\":8,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"4080A0\\",\\"color\\":4227232},{\\"position\\":{\\"x\\":0,\\"y\\":-0.25,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"008080\\",\\"color\\":32896}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"Unfortunately, the shadow map has a finite resolution and represents a discrete sampling of the scene’s depth from the light’s perspective. As a result, the texels in the shadow map may correspond to an area of the main scene. This leads to issues with aliasing, known as shadow acne.\\n\\n<br>\\n\\nLet’s consider a situation where there are no overlapping objects, only a flat surface and a single light source. In other words, there should be no shadows in the scene.\\n\\n<br>\\n\\n![](/files/shadow-map-bias-depth-area.png)\\n\\n<br>\\n\\nFragments **P0** and **P1** in the scene correspond to the same texel in the shadow map **depth1**. When determining the shading for fragment **P1**, we find that its computed depth value is greater than the depth value stored in the shadow map **depth1**. Consequently, we mistakenly decide that fragment **P1** should be shadowed.\\n\\n<br>\\n\\nTo solve this issue, we can apply a small depth **bias** value. There is no universally accepted bias value, and it needs to be adjusted for each scene individually.\\n\\n<br>\\n\\n![](/files/shadow-map-bias-naive.png)\\n\\n<br>\\n\\nAdditionally, we can notice that self-shadowing issues do not arise when the light falls directly perpendicular to the surface. \\n\\n<br>\\n\\n![](/files/shadow-map-bias-no-angle.png)\\n\\n<br>\\n\\nThe problem becomes more pronounced as angle moves from this ideal case.\\n\\n<br>\\n\\n![](/files/shadow-map-bias-angle-vary.png)\\n\\n<br>\\n\\nSo we can vary the bias value using the angle between the surface normal and the light direction.\\n\\n### Task\\n\\nYour program from the previous task uses a shadow map to determine whether a fragment is in shadow or not. However, you can notice some self-shadowing artifacts (shadow acne).\\n\\n<br>\\n\\nYour task is to introduce a bias adjustment in the shading pipeline. The bias value should vary based on the angle between the surface normal and the light direction from `0.0` to `0.1`;","hints":[],"restrictions":[],"order":5,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":170,"slug":"shadow-map-pcf","moduleId":12,"name":"Shadow Map - PCF","order":6,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":170,"slug":"shadow-map-pcf","moduleId":12,"name":"Shadow Map - PCF","vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec4 vPosLight;\\n\\nmat4 getLightProjection() {\\n  float ratio = iResolution.x / iResolution.y;\\n  float size = 4.0;\\n  float left = -size * ratio;\\n  float right = size * ratio;\\n  float top = size;\\n  float bottom = -size;\\n  float far = 8.0;\\n  float near = 0.1;\\n  \\n  mat4 lightProjection;\\n  \\n  lightProjection[0][0] = 2.0 / (right - left);\\n  lightProjection[1][0] = 0.0;\\n  lightProjection[2][0] = 0.0;\\n  lightProjection[3][0] = -(right + left) / (right - left);\\n\\n  lightProjection[0][1] = 0.0;\\n  lightProjection[1][1] = 2.0 / (top - bottom);\\n  lightProjection[2][1] = 0.0;\\n  lightProjection[3][1] = -(top + bottom) / (top - bottom);\\n\\n  lightProjection[0][2] = 0.0;\\n  lightProjection[1][2] = 0.0;\\n  lightProjection[2][2] = -2.0 / (far - near);\\n  lightProjection[3][2] = -(far + near) / (far - near);\\n\\n  lightProjection[0][3] = 0.0;\\n  lightProjection[1][3] = 0.0;\\n  lightProjection[2][3] = 0.0;\\n  lightProjection[3][3] = 1.0;\\n\\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  vec3 front = -lightDir;\\n  vec3 up = vec3(0.0, 1.0, 0.0);\\n  vec3 right = normalize(cross(up, front));\\n  vec3 fixedUp = normalize(cross(front, right));\\n\\n  // column major\\n  mat4 lightView;\\n  \\n  // row 0 = dot(right, vertex_pos)\\n  lightView[0][0] = right.x;\\n  lightView[1][0] = right.y;\\n  lightView[2][0] = right.z;\\n  lightView[3][0] = -dot(lightPos, right);\\n\\n  // row 1 = dot(fixedUp, vertex_pos)\\n  lightView[0][1] = fixedUp.x;\\n  lightView[1][1] = fixedUp.y;\\n  lightView[2][1] = fixedUp.z;\\n  lightView[3][1] = -dot(lightPos, fixedUp);\\n\\n  // row 2 = dot(-front, vertex_pos)\\n  lightView[0][2] = front.x;\\n  lightView[1][2] = front.y;\\n  lightView[2][2] = front.z;\\n  lightView[3][2] = -dot(lightPos, front);\\n\\n  //row 3\\n  lightView[0][3] = 0.0;\\n  lightView[1][3] = 0.0;\\n  lightView[2][3] = 0.0;\\n  lightView[3][3] = 1.0;\\n\\n  mat4 lightProjView = getLightProjection() * lightView;\\n  mat4 cameraProjView = projectionMatrix * viewMatrix;\\n  mat4 projView = (iDepthPass == 1) ? lightProjView : cameraProjView;\\n\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  vec4 pos = projView * worldPos;\\n  gl_Position = pos;\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vPos = pos;\\n  vPosLight = lightProjView * worldPos;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\nuniform vec2 iDepthBufferSize;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec4 vPosLight;\\n\\nfloat getShadow() {\\n  float bias = max(0.1 * (1.0 - dot(vNormal, normalize(-vLightDir))), 0.01);\\n\\n  vec3 lightCoords = vPosLight.xyz * 0.5 + 0.5;\\n  float bufferDepth = texture(iDepthBuffer, lightCoords.xy).r;\\n  float fragDepth = lightCoords.z;\\n  \\n  vec2 texelSize = 1.0 / iDepthBufferSize;\\n\\n  float shadow = 0.0;\\n  for(int x = -2; x <= 2; ++x) {\\n    for(int y = -2; y <= 2; ++y) {\\n      vec2 buffCoords = lightCoords.xy + vec2(x, y) * texelSize;\\n      float bufferDepth = texture(iDepthBuffer, buffCoords).r;\\n      shadow += fragDepth - bias > bufferDepth ? 1.0 : 0.0;\\n    }\\n  }\\n  return shadow / 25.0;\\n}\\n\\nvoid main() {\\n  if (iDepthPass == 1) {\\n  \\n    float depth = vPos.z * 0.5 + 0.5;\\n    gl_FragColor = vec4(depth, depth, depth, 1.0);\\n  \\n  } else {\\n    \\n    float ambient = 0.2;  \\n    float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n    vec3  color = (ambient + (1.0 - getShadow()) * diffuse) * vColor.rgb;\\n    \\n    gl_FragColor = vec4(color, 1.0);\\n  }\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.4,\\"y\\":-0.4,\\"z\\":1.5},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":-1,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":8,\\"y\\":8,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"4080A0\\",\\"color\\":4227232},{\\"position\\":{\\"x\\":0,\\"y\\":-0.25,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"008080\\",\\"color\\":32896}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"You may have noticed that our shadow appears pixelated with sharp transitions from shadowed to illuminated areas. While applying blurring to the shadow map could smooth out the results, it would alter depth values and potentially introduce errors in fragment shading. Instead, we’ll focus on smoothing the shadow test results themselves, rather than the shadow map.\\n\\n<br>\\n\\nRather than directly using the depth value **s** from the shadow map, we will additionally read **n** neighboring depth values **s0...sn** using offset texture coordinates.\\n\\n<br>\\n\\n![](/files/shadow-map-pcf.png)\\n\\n<br>\\n\\nThen we calculate the average number of samples whose depth is less than the calculated fragment depth **f**:\\n\\n```\\nshadow = ((s < f) + (s0 < f) + ... + (sn < f)) / (n + 1)\\n```\\n\\nThe area around the pixel from which we sample the shadow map is called **PCF window**. The larger this area, the blurrier the result will be.\\n\\n### Task\\n\\nYour program from the previous task uses a shadow map to determine whether a fragment is in shadow or not. However, you can notice that our shadow appears pixelated.\\n\\n<br>\\n\\nYour task is to add a basic PCF filter to the shadow calculation so that the shadow borders become a bit blurrier. PCF window size is 5x5.","hints":[],"restrictions":[],"order":6,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":171,"slug":"shadow-map-random-offset","moduleId":12,"name":"Shadow Map - Random Offset","order":7,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":171,"slug":"shadow-map-random-offset","moduleId":12,"name":"Shadow Map - Random Offset","vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec4 vPosLight;\\n\\nmat4 getLightProjection() {\\n  float ratio = iResolution.x / iResolution.y;\\n  float size = 4.0;\\n  float left = -size * ratio;\\n  float right = size * ratio;\\n  float top = size;\\n  float bottom = -size;\\n  float far = 8.0;\\n  float near = 0.1;\\n  \\n  mat4 lightProjection;\\n  \\n  lightProjection[0][0] = 2.0 / (right - left);\\n  lightProjection[1][0] = 0.0;\\n  lightProjection[2][0] = 0.0;\\n  lightProjection[3][0] = -(right + left) / (right - left);\\n\\n  lightProjection[0][1] = 0.0;\\n  lightProjection[1][1] = 2.0 / (top - bottom);\\n  lightProjection[2][1] = 0.0;\\n  lightProjection[3][1] = -(top + bottom) / (top - bottom);\\n\\n  lightProjection[0][2] = 0.0;\\n  lightProjection[1][2] = 0.0;\\n  lightProjection[2][2] = -2.0 / (far - near);\\n  lightProjection[3][2] = -(far + near) / (far - near);\\n\\n  lightProjection[0][3] = 0.0;\\n  lightProjection[1][3] = 0.0;\\n  lightProjection[2][3] = 0.0;\\n  lightProjection[3][3] = 1.0;\\n\\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  vec3 front = -lightDir;\\n  vec3 up = vec3(0.0, 1.0, 0.0);\\n  vec3 right = normalize(cross(up, front));\\n  vec3 fixedUp = normalize(cross(front, right));\\n\\n  // column major\\n  mat4 lightView;\\n  \\n  // row 0 = dot(right, vertex_pos)\\n  lightView[0][0] = right.x;\\n  lightView[1][0] = right.y;\\n  lightView[2][0] = right.z;\\n  lightView[3][0] = -dot(lightPos, right);\\n\\n  // row 1 = dot(fixedUp, vertex_pos)\\n  lightView[0][1] = fixedUp.x;\\n  lightView[1][1] = fixedUp.y;\\n  lightView[2][1] = fixedUp.z;\\n  lightView[3][1] = -dot(lightPos, fixedUp);\\n\\n  // row 2 = dot(-front, vertex_pos)\\n  lightView[0][2] = front.x;\\n  lightView[1][2] = front.y;\\n  lightView[2][2] = front.z;\\n  lightView[3][2] = -dot(lightPos, front);\\n\\n  //row 3\\n  lightView[0][3] = 0.0;\\n  lightView[1][3] = 0.0;\\n  lightView[2][3] = 0.0;\\n  lightView[3][3] = 1.0;\\n\\n  mat4 lightProjView = getLightProjection() * lightView;\\n  mat4 cameraProjView = projectionMatrix * viewMatrix;\\n  mat4 projView = (iDepthPass == 1) ? lightProjView : cameraProjView;\\n\\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\\n  vec4 pos = projView * worldPos;\\n  gl_Position = pos;\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n  vPos = pos;\\n  vPosLight = lightProjView * worldPos;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\nuniform vec2 iDepthBufferSize;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\nvarying vec4 vPos;\\nvarying vec4 vPosLight;\\n\\nfloat random(vec2 point) {\\n  const float SEED = 1234.5678;\\n  float d = dot(point, vec2(SEED, SEED));\\n  float r = fract(sin(d) * SEED);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nfloat getShadow() {\\n  float bias = max(0.1 * (1.0 - dot(vNormal, normalize(-vLightDir))), 0.01);\\n\\n  vec3 lightCoords = vPosLight.xyz * 0.5 + 0.5;\\n  float fragDepth = lightCoords.z;\\n  \\n  vec2 texelSize = 1.0 / iDepthBufferSize;\\n\\n  float shadow = 0.0;\\n  for(int x = -2; x <= 2; ++x) {\\n    for(int y = -2; y <= 2; ++y) {\\n      vec2 buffCoords = lightCoords.xy + vec2(x, y) * texelSize;\\n      buffCoords += random(buffCoords) * texelSize * 0.5;\\n      float bufferDepth = texture(iDepthBuffer, buffCoords).r;\\n      shadow += fragDepth - bias > bufferDepth ? 1.0 : 0.0;\\n    }\\n  }\\n  return shadow / 25.0;\\n}\\n\\nvoid main() {\\n  if (iDepthPass == 1) {\\n  \\n    float depth = vPos.z * 0.5 + 0.5;\\n    gl_FragColor = vec4(depth, depth, depth, 1.0);\\n  \\n  } else {\\n    \\n    float ambient = 0.2;  \\n    float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n    vec3  color = (ambient + (1.0 - getShadow()) * diffuse) * vColor.rgb;\\n    \\n    gl_FragColor = vec4(color, 1.0);\\n  }\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nfloat random(vec2 point) {\\n  const float SEED = 1234.5678;\\n  float d = dot(point, vec2(SEED, SEED));\\n  float r = fract(sin(d) * SEED);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.4,\\"y\\":-0.4,\\"z\\":1.5},\\"rotation\\":{\\"x\\":-0.4,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":-1,\\"z\\":0},\\"rotation\\":{\\"x\\":-1.57,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":8,\\"y\\":8,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"4080A0\\",\\"color\\":4227232},{\\"position\\":{\\"x\\":0,\\"y\\":-0.25,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0.5,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"008080\\",\\"color\\":32896}],\\"backgroundRGBA\\":\\"EEEEEE\\",\\"background\\":15658734}","description":"PCF aims to reduce the blocky appearance of shadows by considering multiple samples within a filter kernel. However, even with a regular grid of samples, aliasing artifacts can still occur due to the discrete nature of the shadow map. To mitigate these artifacts, a common approach is to introduce a small random offset to the sample positions.\\n\\n<br>\\n\\n![](/files/shadow-map-randomness.png)\\n\\n<br>\\n\\nThis randomness breaks up the regular pattern and helps reduce aliasing without using too many shadow-map samples.\\n\\n### Task\\n\\nYour program from the previous task uses a shadow map to determine whether a fragment is in shadow or not. However, you can notice that our shadow still appears blocky.\\n\\n<br>\\n\\nYour task is to modify the 5x5 PCF filter to introduce a small random offset `[-texelSize / 2; texelSize / 2]` in the texture coordinates when sampling the shadow map. You should use the given `random` function and the texture coordinates as an argument.","hints":[],"restrictions":[],"order":7,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","fragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nfloat random(vec2 point) {\\n  const float SEED = 1234.5678;\\n  float d = dot(point, vec2(SEED, SEED));\\n  float r = fract(sin(d) * SEED);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","defaultVertexShader":"uniform vec2 iResolution;\\nuniform int iDepthPass;\\n\\nattribute vec4 color;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nmat4 getLightProjection() {\\n  float left = -4.0;\\n  float right = 4.0;\\n  float top = 4.0;\\n  float bottom = -4.0;\\n  float far = 8.0;\\n  float near = 0.1;\\n\\n  mat4 lightProjection; \\n  return lightProjection;\\n}\\n\\nvoid main() {\\n  \\n  vec3 lightDir = normalize(vec3(-0.5, -0.8, 0.0));\\n  vec3 lightPos = vec3(1.5, 2.4, 0.0);\\n\\n  mat4 lightView = viewMatrix;\\n  \\n  gl_Position = projectionMatrix * lightView * modelMatrix * vec4(position, 1.0);\\n\\n  vLightDir = lightDir;\\n  vNormal = mat3(modelMatrix) * normal;\\n  vColor = color;\\n}\\n","defaultFragmentShader":"uniform sampler2D iDepthBuffer;\\nuniform int iDepthPass;\\n\\nvarying vec3 vLightDir;\\nvarying vec3 vNormal;\\nvarying vec4 vColor;\\n\\nfloat random(vec2 point) {\\n  const float SEED = 1234.5678;\\n  float d = dot(point, vec2(SEED, SEED));\\n  float r = fract(sin(d) * SEED);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nvoid main() {\\n  float ambient = 0.2;  \\n  float diffuse = dot(normalize(vNormal), normalize(-vLightDir));\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * vColor.rgb, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for developers who want to master the art of shadow creation in computer graphics. You will learn how to create and use shadow maps to generate realistic shadows, and explore supporting techniques to enhance shadow quality. Each topic includes theoretical material and a practical task that can be completed directly on the website.","skillsDesc":"how to construct view and projection matrices for accurate 3D rendering.<br>what a render pass is and how it is used in the graphics pipeline.<br>how to create shadow maps and use them to generate shadows  in 3D scenes.<br>the role of the depth buffer in managing object visibility based on distance.<br>algorithms for improving shadow quality, such as bias, PCF (Percentage Closer Filtering), dithering, and depth buffer techniques.","importanceDesc":"Creating realistic shadows is crucial for adding depth and realism to 3D scenes. Understanding how to generate and optimize shadows allows developers to create scenes with accurate light and shadow distribution, making objects appear more three-dimensional and lifelike. ","certifiable":false,"images":["img-1.png","img-2.png","img-3.png"]}},{"id":3,"slug":"signed-distance-field","name":"Signed Distance Field","description":"Study the distance functions for rendering smooth and detailed shapes, plus the formulas for combining them together for building more complex shapes.","tasks":16,"acceptedTasks":0,"isOpen":false,"order":5,"locked":false,"cover":true,"child":{"id":3,"slug":"signed-distance-field","name":"Signed Distance Field","description":"Study the distance functions for rendering smooth and detailed shapes, plus the formulas for combining them together for building more complex shapes.","order":5,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":128,"slug":"sdf-circle","moduleId":3,"name":"SDF Circle","order":1,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":128,"slug":"sdf-circle","moduleId":3,"name":"SDF Circle","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float t = sdfCircle(iResolution * 0.5, iResolution.y * 0.4, uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return 1.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float t = sdfCircle(iResolution * 0.5, iResolution.y * 0.4, uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"A signed distance field (SDF) is a mathematical representation of a shape that is commonly used in computer graphics for rendering. It is a function that takes a point in space and returns the distance to the nearest point on the surface of the shape, with a sign indicating whether the point is inside or outside the shape:\\n\\n1. If the value is negative, the point is inside the shape. \\n2. If the value is zero, the point is on the surface of the shape.\\n3. If the value is positive, the point is outside the shape.\\n\\nThe simplest SDF function is for a circle. The SDF circle function takes in a 2D point **(x, y)** and a radius **R**, and returns the signed distance to the nearest point on the surface of the circle.\\n\\n<br>\\n\\nHere you can find different intresting sdf functions: [SDF functions](https://iquilezles.org/articles/distfunctions2d/).\\n\\n### Task\\nImplement the SDF circle function to render a circle in the center of the screen.","hints":[],"restrictions":[],"order":1,"cost":5,"threshold":95,"likes":2,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return 1.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float t = sdfCircle(iResolution * 0.5, iResolution.y * 0.4, uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return 1.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float t = sdfCircle(iResolution * 0.5, iResolution.y * 0.4, uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":129,"slug":"sdf-translate","moduleId":3,"name":"SDF Translate","order":2,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":129,"slug":"sdf-translate","moduleId":3,"name":"SDF Translate","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float radius = iResolution.y * 0.4;\\n  float speed = radius * 2.0;\\n  float start = -radius;\\n  float deltaX = mod(iTime * speed, iResolution.x + radius * 2.0);\\n  \\n  vec2 center = vec2(start + deltaX, iResolution.y * 0.5);\\n  \\n  float t = sdfCircle(center, radius, uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float radius = iResolution.y * 0.4;\\n  float speed = radius * 2.0;\\n  \\n  vec2 center = iResolution * 0.5;\\n  \\n  float t = sdfCircle(center, radius, uv);\\n  t = clamp(t, 0.0, 1.0);\\n\\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To translate an SDF shape in space, you can simply add a displacement to the SDF shape\'s anchor (center) point or to the position of the point being evaluated in the SDF function. \\n\\n<br>\\n\\nFor example, let\'s say you have an SDF function for a sphere centered at the origin (0, 0). To translate this sphere 2 units to the right you can use one of the following methods:\\n\\n1. Add a displacement vector to the position of the sphere\'s center. So after the displacement the center  will be located at (2, 0).\\n\\n2. Subtract the displacement vector from the position of the point being evaluated in the SDF function. So if you were evaluating the point (3, 0), you would instead evaluate the value (1, 0).\\n\\n### Task\\nAdd an SDF circle moving animation.","hints":[],"restrictions":[],"order":2,"cost":10,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float radius = iResolution.y * 0.4;\\n  float speed = radius * 2.0;\\n  \\n  vec2 center = iResolution * 0.5;\\n  \\n  float t = sdfCircle(center, radius, uv);\\n  t = clamp(t, 0.0, 1.0);\\n\\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float radius = iResolution.y * 0.4;\\n  float speed = radius * 2.0;\\n  \\n  vec2 center = iResolution * 0.5;\\n  \\n  float t = sdfCircle(center, radius, uv);\\n  t = clamp(t, 0.0, 1.0);\\n\\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":130,"slug":"sdf-union","moduleId":3,"name":"SDF Union","order":3,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":130,"slug":"sdf-union","moduleId":3,"name":"SDF Union","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n  \\n  float t = min(c1, c2);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  vec3 color1 = vec3(0.38, 0.12, 0.93);\\n  vec3 color2 = vec3(0.12);\\n  \\n  float t = 1.0; // union result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The union of two SDF shapes is a new shape that includes all points that are inside either of the original shapes. To use union, you can simply evaluate both SDF functions at a given point and take the minimum of the two distances.\\n\\n### Task\\nRender the union of two circles given via the sdf function on the screen.","hints":[],"restrictions":[],"order":3,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  vec3 color1 = vec3(0.38, 0.12, 0.93);\\n  vec3 color2 = vec3(0.12);\\n  \\n  float t = 1.0; // union result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  vec3 color1 = vec3(0.38, 0.12, 0.93);\\n  vec3 color2 = vec3(0.12);\\n  \\n  float t = 1.0; // union result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":131,"slug":"sdf-intersection","moduleId":3,"name":"SDF Intersection","order":4,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":131,"slug":"sdf-intersection","moduleId":3,"name":"SDF Intersection","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = max(c1, c2);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // intersection result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The intersection of two SDF shapes is a new shape that includes only the points that are inside both of the original shapes. To use intersection, you can evaluate both SDF functions at a given point and take the maximum of the two distances.\\n\\n### Task\\nRender the intersection of two circles given via the sdf function on the screen.","hints":[],"restrictions":[],"order":4,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // intersection result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // intersection result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":132,"slug":"sdf-subtraction","moduleId":3,"name":"SDF Subtraction","order":5,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":132,"slug":"sdf-subtraction","moduleId":3,"name":"SDF Subtraction","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = max(c1, -c2);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // subtraction result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The subtraction of two SDF shapes is a new shape that includes only the points that are inside the first shape but not inside the second shape. To use subtraction, you can evaluate both SDF functions at a given point and subtract one distance from the other.\\n\\n### Task\\nRender the result of subtracting the second circle from the first one.","hints":[],"restrictions":[],"order":5,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // subtraction result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // subtraction result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":133,"slug":"sdf-symmetric-difference-xor","moduleId":3,"name":"SDF Symmetric difference - XOR","order":6,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":133,"slug":"sdf-symmetric-difference-xor","moduleId":3,"name":"SDF Symmetric difference - XOR","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = c1 * c2;\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(0.38, 0.12, 0.93);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // xor result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"The symmetric difference (XOR) of two SDF shapes is a new shape that includes only the points that are inside one of the original shapes but not both. To use XOR, you can evaluate both SDF functions at a given point and take the absolute value of their difference.\\n\\n### Task\\nRender the symmetric difference (XOR) of two circles.","hints":[],"restrictions":[],"order":6,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(0.38, 0.12, 0.93);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // xor result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(0.38, 0.12, 0.93);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  vec2 center1 = iResolution * vec2(0.4, 0.5);\\n  vec2 center2 = iResolution * vec2(0.6, 0.5);\\n\\n  float r1 = iResolution.y * 0.4;\\n  float r2 = iResolution.y * 0.4;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = 1.0; // xor result\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":134,"slug":"sdf-combination","moduleId":3,"name":"SDF Combination","order":7,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":134,"slug":"sdf-combination","moduleId":3,"name":"SDF Combination","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  float r  = iResolution.y * 0.2;\\n  \\n  vec2 center1 = iResolution * vec2(0.5, 0.4) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(0.5, 0.4) + vec2(-r, +r);\\n  vec2 center3 = iResolution * vec2(0.5, 0.4) + vec2(-r, -r);\\n  vec2 center4 = iResolution * vec2(0.5, 0.4) + vec2(+r, -r);\\n  vec2 center5 = iResolution * vec2(0.5, 0.4);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n  float c3 = sdfCircle(center3, r, uv);\\n  float c4 = sdfCircle(center4, r, uv);\\n  float c5 = sdfCircle(center5, r, uv);\\n\\n  float t0 = min(min(c1, c2), c5);\\n  float t1 = min(c3, c4);\\n  float t2 = min(-t0, t1);\\n\\n  float t = clamp(-t2, 0.0, 1.0);  \\n    \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  float r  = iResolution.y * 0.2;\\n  \\n  vec2 center1 = iResolution * vec2(0.5, 0.4) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(0.5, 0.4) + vec2(-r, +r);\\n  vec2 center3 = iResolution * vec2(0.5, 0.4) + vec2(-r, -r);\\n  vec2 center4 = iResolution * vec2(0.5, 0.4) + vec2(+r, -r);\\n  vec2 center5 = iResolution * vec2(0.5, 0.4);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n  float c3 = sdfCircle(center3, r, uv);\\n  float c4 = sdfCircle(center4, r, uv);\\n  float c5 = sdfCircle(center5, r, uv);\\n\\n  float t = 1.0; // aggregation result\\n  t = clamp(t, 0.0, 1.0); \\n    \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"### Task\\nUsing the learned operations on sdf shapes, try to combine several circles to get a more complex shape.","hints":[],"restrictions":[],"order":7,"cost":10,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  float r  = iResolution.y * 0.2;\\n  \\n  vec2 center1 = iResolution * vec2(0.5, 0.4) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(0.5, 0.4) + vec2(-r, +r);\\n  vec2 center3 = iResolution * vec2(0.5, 0.4) + vec2(-r, -r);\\n  vec2 center4 = iResolution * vec2(0.5, 0.4) + vec2(+r, -r);\\n  vec2 center5 = iResolution * vec2(0.5, 0.4);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n  float c3 = sdfCircle(center3, r, uv);\\n  float c4 = sdfCircle(center4, r, uv);\\n  float c5 = sdfCircle(center5, r, uv);\\n\\n  float t = 1.0; // aggregation result\\n  t = clamp(t, 0.0, 1.0); \\n    \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  float r  = iResolution.y * 0.2;\\n  \\n  vec2 center1 = iResolution * vec2(0.5, 0.4) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(0.5, 0.4) + vec2(-r, +r);\\n  vec2 center3 = iResolution * vec2(0.5, 0.4) + vec2(-r, -r);\\n  vec2 center4 = iResolution * vec2(0.5, 0.4) + vec2(+r, -r);\\n  vec2 center5 = iResolution * vec2(0.5, 0.4);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n  float c3 = sdfCircle(center3, r, uv);\\n  float c4 = sdfCircle(center4, r, uv);\\n  float c5 = sdfCircle(center5, r, uv);\\n\\n  float t = 1.0; // aggregation result\\n  t = clamp(t, 0.0, 1.0); \\n    \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":136,"slug":"sdf-interpolation","moduleId":3,"name":"SDF Interpolation","order":8,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":136,"slug":"sdf-interpolation","moduleId":3,"name":"SDF Interpolation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  float r  = iResolution.y * 0.25;\\n  \\n  vec2 center1 = iResolution * vec2(0.5, 0.4) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(0.5, 0.4) + vec2(-r, +r);\\n  vec2 center3 = iResolution * vec2(0.5, 0.4) + vec2(-r, -r);\\n  vec2 center4 = iResolution * vec2(0.5, 0.4) + vec2(+r, -r);\\n  vec2 center5 = iResolution * vec2(0.5, 0.4);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n  float c3 = sdfCircle(center3, r, uv);\\n  float c4 = sdfCircle(center4, r, uv);\\n  float c5 = sdfCircle(center5, r, uv);\\n\\n  float t0 = min(min(c1, c2), c5);\\n  float t1 = min(c3, c4);\\n  float t2 = min(-t0, t1);\\n  float t3 = mix(-t2, c5, 0.35);\\n  float t  = clamp(t3, 0.0, 1.0);  \\n    \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  float r  = iResolution.y * 0.25;\\n  \\n  vec2 center1 = iResolution * vec2(0.5, 0.4) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(0.5, 0.4) + vec2(-r, +r);\\n  vec2 center3 = iResolution * vec2(0.5, 0.4) + vec2(-r, -r);\\n  vec2 center4 = iResolution * vec2(0.5, 0.4) + vec2(+r, -r);\\n  vec2 center5 = iResolution * vec2(0.5, 0.4);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n  float c3 = sdfCircle(center3, r, uv);\\n  float c4 = sdfCircle(center4, r, uv);\\n  float c5 = sdfCircle(center5, r, uv);\\n\\n  float t0 = min(min(c1, c2), c5);\\n  float t1 = min(c3, c4);\\n  float t2 = min(-t0, t1);\\n  float t  = clamp(-t2, 0.0, 1.0);  \\n    \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Interpolation can be used to smoothly change one SDF shape to another by blending the two shapes together gradually. Here are the steps to do this:\\n\\n1. Choose the two SDF shapes that you want to interpolate between.\\n\\n2. Determine the amount of interpolation that you want to apply. This can be a value between 0 and 1, where 0 represents the first shape and 1 represents the second shape.\\n\\n3. Calculate the blended SDF by interpolating between the two shapes. This can be done by using a weighted average of the two SDFs, where the weight is determined by the interpolation value. For example, if the interpolation value is 0.5, then the blended SDF would be the average of the two SDFs.\\n\\n### Task\\nUse interpolation to smooth out sharp edges of the shape. The interpolation value is 0.35.","hints":[],"restrictions":[],"order":8,"cost":10,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  float r  = iResolution.y * 0.25;\\n  \\n  vec2 center1 = iResolution * vec2(0.5, 0.4) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(0.5, 0.4) + vec2(-r, +r);\\n  vec2 center3 = iResolution * vec2(0.5, 0.4) + vec2(-r, -r);\\n  vec2 center4 = iResolution * vec2(0.5, 0.4) + vec2(+r, -r);\\n  vec2 center5 = iResolution * vec2(0.5, 0.4);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n  float c3 = sdfCircle(center3, r, uv);\\n  float c4 = sdfCircle(center4, r, uv);\\n  float c5 = sdfCircle(center5, r, uv);\\n\\n  float t0 = min(min(c1, c2), c5);\\n  float t1 = min(c3, c4);\\n  float t2 = min(-t0, t1);\\n  float t  = clamp(-t2, 0.0, 1.0);  \\n    \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n  \\n  float r  = iResolution.y * 0.25;\\n  \\n  vec2 center1 = iResolution * vec2(0.5, 0.4) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(0.5, 0.4) + vec2(-r, +r);\\n  vec2 center3 = iResolution * vec2(0.5, 0.4) + vec2(-r, -r);\\n  vec2 center4 = iResolution * vec2(0.5, 0.4) + vec2(+r, -r);\\n  vec2 center5 = iResolution * vec2(0.5, 0.4);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n  float c3 = sdfCircle(center3, r, uv);\\n  float c4 = sdfCircle(center4, r, uv);\\n  float c5 = sdfCircle(center5, r, uv);\\n\\n  float t0 = min(min(c1, c2), c5);\\n  float t1 = min(c3, c4);\\n  float t2 = min(-t0, t1);\\n  float t  = clamp(-t2, 0.0, 1.0);  \\n    \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":137,"slug":"sdf-rotation","moduleId":3,"name":"SDF Rotation","order":9,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":137,"slug":"sdf-rotation","moduleId":3,"name":"SDF Rotation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawPental(vec2 uv) {\\n  float r  = iResolution.y * 0.3;\\n\\n  vec2 center0 = iResolution * vec2(0.0, 0.0);\\n  \\n  vec2 center1 = iResolution * vec2(-0.03, 0.0) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(+0.03, 0.0) + vec2(-r, +r);\\n\\n  float c0 = sdfCircle(center0, r * 0.3, uv);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return min(max(c1, c2), c0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float t = 1.0;\\n  int steps = 20;\\n  for (int i = 0; i < steps; i++) {\\n    float maxangle = 6.28 / float(steps) * float(i);\\n    float angle = maxangle;//clamp((sin(iTime) * 0.5 + 0.5)* 6.28, 0.0, maxangle);\\n    \\n    float x = uv.x * cos(angle) - uv.y * sin(angle);\\n    float y = uv.x * sin(angle) + uv.y * cos(angle);\\n\\n    float ti = drawPental(vec2(x, y));\\n    t = min(t, ti);\\n  }\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawPental(vec2 uv) {\\n  float r  = iResolution.y * 0.3;\\n\\n  vec2 center0 = iResolution * vec2(0.0, 0.0);\\n  \\n  vec2 center1 = iResolution * vec2(-0.03, 0.0) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(+0.03, 0.0) + vec2(-r, +r);\\n\\n  float c0 = sdfCircle(center0, r * 0.3, uv);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return min(max(c1, c2), c0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float t = 1.0;\\n  int steps = 20;\\n  for (int i = 0; i < steps; i++) {\\n    float ti = drawPental(uv);\\n    t = min(t, ti);\\n  }\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To rotate an SDF shape, you can follow these steps:\\n\\n1. Determine the rotation angle.\\n\\n2. Create a 2x2 rotation matrix using the angle of rotation:\\n```\\n   |cos(theta) -sin(theta)|\\n   |sin(theta)  cos(theta)|\\n```\\nwhere `theta` is the angle of rotation.\\n\\n3. Apply the rotation matrix to the coordinates.\\n\\n4. Use the rotated coordinates to draw a new SDF shape.\\n\\n\\n### Task\\nRotate each petal around the center of the screen to create an image of flower.","hints":[],"restrictions":[],"order":9,"cost":10,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawPental(vec2 uv) {\\n  float r  = iResolution.y * 0.3;\\n\\n  vec2 center0 = iResolution * vec2(0.0, 0.0);\\n  \\n  vec2 center1 = iResolution * vec2(-0.03, 0.0) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(+0.03, 0.0) + vec2(-r, +r);\\n\\n  float c0 = sdfCircle(center0, r * 0.3, uv);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return min(max(c1, c2), c0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float t = 1.0;\\n  int steps = 20;\\n  for (int i = 0; i < steps; i++) {\\n    float ti = drawPental(uv);\\n    t = min(t, ti);\\n  }\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawPental(vec2 uv) {\\n  float r  = iResolution.y * 0.3;\\n\\n  vec2 center0 = iResolution * vec2(0.0, 0.0);\\n  \\n  vec2 center1 = iResolution * vec2(-0.03, 0.0) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(+0.03, 0.0) + vec2(-r, +r);\\n\\n  float c0 = sdfCircle(center0, r * 0.3, uv);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return min(max(c1, c2), c0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float t = 1.0;\\n  int steps = 20;\\n  for (int i = 0; i < steps; i++) {\\n    float ti = drawPental(uv);\\n    t = min(t, ti);\\n  }\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":138,"slug":"sdf-rotation-2","moduleId":3,"name":"SDF Rotation 2","order":10,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":138,"slug":"sdf-rotation-2","moduleId":3,"name":"SDF Rotation 2","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawPental(vec2 uv) {\\n  float r  = iResolution.y * 0.3;\\n\\n  vec2 center0 = iResolution * vec2(0.0, 0.0);\\n  \\n  vec2 center1 = iResolution * vec2(-0.03, 0.0) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(+0.03, 0.0) + vec2(-r, +r);\\n\\n  float c0 = sdfCircle(center0, r * 0.3, uv);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return min(max(c1, c2), c0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float t = 1.0;\\n  int steps = 20;\\n  for (int i = 0; i < steps; i++) {\\n    float maxangle = 6.28 / float(steps) * float(i);\\n    float angle = clamp((sin(iTime) * 0.5 + 0.5)* 6.28, 0.0, maxangle);\\n    \\n    float x = uv.x * cos(angle) - uv.y * sin(angle);\\n    float y = uv.x * sin(angle) + uv.y * cos(angle);\\n\\n    float ti = drawPental(vec2(x, y));\\n    t = min(t, ti);\\n  }\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawPental(vec2 uv) {\\n  float r  = iResolution.y * 0.3;\\n\\n  vec2 center0 = iResolution * vec2(0.0, 0.0);\\n  \\n  vec2 center1 = iResolution * vec2(-0.03, 0.0) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(+0.03, 0.0) + vec2(-r, +r);\\n\\n  float c0 = sdfCircle(center0, r * 0.3, uv);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return min(max(c1, c2), c0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float t = 1.0;\\n  int steps = 20;\\n  for (int i = 0; i < steps; i++) {\\n    float angle = 6.28 / float(steps) * float(i);\\n\\n    // use sin(iTime)\\n    \\n    float x = uv.x * cos(angle) - uv.y * sin(angle);\\n    float y = uv.x * sin(angle) + uv.y * cos(angle);\\n\\n    float ti = drawPental(vec2(x, y));\\n    t = min(t, ti);\\n  }\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"### Task\\nImplement the animation of a flower opening in a circular manner.","hints":[],"restrictions":[],"order":10,"cost":10,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":12,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawPental(vec2 uv) {\\n  float r  = iResolution.y * 0.3;\\n\\n  vec2 center0 = iResolution * vec2(0.0, 0.0);\\n  \\n  vec2 center1 = iResolution * vec2(-0.03, 0.0) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(+0.03, 0.0) + vec2(-r, +r);\\n\\n  float c0 = sdfCircle(center0, r * 0.3, uv);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return min(max(c1, c2), c0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float t = 1.0;\\n  int steps = 20;\\n  for (int i = 0; i < steps; i++) {\\n    float angle = 6.28 / float(steps) * float(i);\\n\\n    // use sin(iTime)\\n    \\n    float x = uv.x * cos(angle) - uv.y * sin(angle);\\n    float y = uv.x * sin(angle) + uv.y * cos(angle);\\n\\n    float ti = drawPental(vec2(x, y));\\n    t = min(t, ti);\\n  }\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawPental(vec2 uv) {\\n  float r  = iResolution.y * 0.3;\\n\\n  vec2 center0 = iResolution * vec2(0.0, 0.0);\\n  \\n  vec2 center1 = iResolution * vec2(-0.03, 0.0) + vec2(+r, +r);\\n  vec2 center2 = iResolution * vec2(+0.03, 0.0) + vec2(-r, +r);\\n\\n  float c0 = sdfCircle(center0, r * 0.3, uv);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return min(max(c1, c2), c0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float t = 1.0;\\n  int steps = 20;\\n  for (int i = 0; i < steps; i++) {\\n    float angle = 6.28 / float(steps) * float(i);\\n\\n    // use sin(iTime)\\n    \\n    float x = uv.x * cos(angle) - uv.y * sin(angle);\\n    float y = uv.x * sin(angle) + uv.y * cos(angle);\\n\\n    float ti = drawPental(vec2(x, y));\\n    t = min(t, ti);\\n  }\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":135,"slug":"sdf-soft-minmax","moduleId":3,"name":"SDF Soft MinMax","order":11,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":135,"slug":"sdf-soft-minmax","moduleId":3,"name":"SDF Soft MinMax","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float dx = cos(iTime) * 0.5 + 0.5;\\n  dx *= 0.3;\\n  \\n  vec2 center1 = iResolution * vec2(0.2 + dx, 0.5);\\n  vec2 center2 = iResolution * vec2(0.8 - dx, 0.5);\\n\\n  float r1 = iResolution.x * 0.15;\\n  float r2 = iResolution.x * 0.15;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = softMin(c1, c2, 0.025);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return min(a, b);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float dx = cos(iTime) * 0.5 + 0.5;\\n  dx *= 0.3;\\n  \\n  vec2 center1 = iResolution * vec2(0.2 + dx, 0.5);\\n  vec2 center2 = iResolution * vec2(0.8 - dx, 0.5);\\n\\n  float r1 = iResolution.x * 0.15;\\n  float r2 = iResolution.x * 0.15;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = softMin(c1, c2, 0.025);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Previously studied implementations of such operators as union and intersection are greate, but the resulting shape is no longer a smooth surface. To get a smoother result, we can use more complex implementation of the combination operators. So we\'re going to use [smooth maximum function](https://en.wikipedia.org/wiki/Smooth_maximum).\\n\\n```\\nsmoothMax(s1, s2, k) = log(exp(s1 * k) + exp(s2 * k)) / k\\n```\\nWhere `k` is smooth factor.\\n\\n### Task\\nSee how the `softMax` function works and try to implement `softMin` based on it to get a smooth union of two circles.","hints":[],"restrictions":[],"order":11,"cost":10,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":12,"animationStepTime":250,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return min(a, b);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float dx = cos(iTime) * 0.5 + 0.5;\\n  dx *= 0.3;\\n  \\n  vec2 center1 = iResolution * vec2(0.2 + dx, 0.5);\\n  vec2 center2 = iResolution * vec2(0.8 - dx, 0.5);\\n\\n  float r1 = iResolution.x * 0.15;\\n  float r2 = iResolution.x * 0.15;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = softMin(c1, c2, 0.025);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return min(a, b);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float dx = cos(iTime) * 0.5 + 0.5;\\n  dx *= 0.3;\\n  \\n  vec2 center1 = iResolution * vec2(0.2 + dx, 0.5);\\n  vec2 center2 = iResolution * vec2(0.8 - dx, 0.5);\\n\\n  float r1 = iResolution.x * 0.15;\\n  float r2 = iResolution.x * 0.15;\\n\\n  float c1 = sdfCircle(center1, r1, uv);\\n  float c2 = sdfCircle(center2, r2, uv);\\n\\n  float t = softMin(c1, c2, 0.025);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":141,"slug":"sdf-cat-ears","moduleId":3,"name":"SDF Cat - Ears","order":12,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":141,"slug":"sdf-cat-ears","moduleId":3,"name":"SDF Cat - Ears","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nfloat drawPental(vec2 uv, float r) {\\n  vec2 center1 = vec2(-25.0, 0.0) + vec2(+r, +r);\\n  vec2 center2 = vec2(+25.0, 0.0) + vec2(-r, +r);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return max(c1, c2);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float head = sdfCircle(vec2(0.0, 0.0), 60.0 + sin(iTime) * 1.0, uv);\\n\\n  float angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  float x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  float y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earOuter1 = drawPental(vec2(x, y), 60.0);\\n\\n  angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earInner1 = drawPental(vec2(x, y + 5.0), 60.0);\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earOuter2 = drawPental(vec2(x, y), 60.0);\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float earInner2 = drawPental(vec2(x, y + 5.0), 60.0);\\n\\n  float ear1 = max(earOuter1, -earInner1);\\n  float ear2 = max(earOuter2, -earInner2);\\n\\n  float u1 = softMin(head, min(ear1, ear2), 0.25);\\n  \\n  float t = clamp(u1, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To complete this task you need to recall lessons about SDF rotation, union and subtraction.\\n\\n### Task\\nOver the course of several tasks, we will try to draw the face of a cat. In this task try to draw the shape of the head and ears with animation.\\n\\n<br>\\n\\nHead is a circle with an initial radius of 60px. The head radius increases over time to 61 and decreases to 59 pixels.\\n\\n<br>\\n\\nEar is the intersection of circles with a radius of 60 pixels and a distance between centers of 70 pixels. The inner part of the ear is 5 pixels below the top of the outer part. The initial angle of the right ear is 0.628, the left ear is -0.628. Over time, the ear rotates an additional 0.1 radian relative to the initial position in one direction and the other.","hints":[],"restrictions":[],"order":12,"cost":10,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":142,"slug":"sdf-cat-whiskers","moduleId":3,"name":"SDF Cat - Whiskers","order":13,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":142,"slug":"sdf-cat-whiskers","moduleId":3,"name":"SDF Cat - Whiskers","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nfloat drawPental(vec2 uv, float r) {\\n  vec2 center1 = vec2(-25.0, 0.0) + vec2(+r, +r);\\n  vec2 center2 = vec2(+25.0, 0.0) + vec2(-r, +r);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return max(c1, c2);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float head = sdfCircle(vec2(0.0, 0.0), 60.0 + sin(iTime) * 1.0, uv);\\n\\n  float angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  float x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  float y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earOuter1 = drawPental(vec2(x, y), 60.0);\\n\\n  angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earInner1 = drawPental(vec2(x, y + 5.0), 60.0);\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earOuter2 = drawPental(vec2(x, y), 60.0);\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float earInner2 = drawPental(vec2(x, y + 5.0), 60.0);\\n\\n  float ear1 = max(earOuter1, -earInner1);\\n  float ear2 = max(earOuter2, -earInner2);\\n\\n  angle = 3.14 * -0.1 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers1 = sdfBox(vec2(-60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers2 = sdfBox(vec2(-60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers3 = sdfBox(vec2(60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * 0.1 - (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers4 = sdfBox(vec2(60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  float u1 = softMin(head, min(ear1, ear2), 0.25);\\n  float u2 = min(max(-whiskers1, u1), max(whiskers1, -u1));\\n  float u3 = min(max(-whiskers2, u2), max(whiskers2, -u2));\\n  float u4 = min(max(-whiskers3, u3), max(whiskers3, -u3));\\n  float u5 = min(max(-whiskers4, u4), max(whiskers4, -u4));\\n  \\n  float t = clamp(u5, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To complete this task you need to recall lessons about SDF rotation, union and subtraction.\\n\\n### Task\\nTake your code from the previous lesson where we drew the cat\'s ears. In this task you need to add a cat\'s whiskers.\\n\\n<br>\\n\\nOne cat whisker is 35 pixels long, 1 pixel wide. The initial angle of the upper whisker is 0.314, the lower one is 0.628. Over time, whiskers rotate an additional 0.1 radian relative to the initial position in one direction and the other.\\n\\n<br>\\n\\nTranslate left whiskers by -60 on the X-axis and -10 pixels on the Y-axis, right whiskers by 60 and -10 pixels accordingly.\\n\\n<br>\\n\\nNote that you are given the implementation of an SDF box.","hints":[],"restrictions":[],"order":13,"cost":10,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":143,"slug":"sdf-cat-nose-and-cheeks","moduleId":3,"name":"SDF Cat - Nose and Cheeks","order":14,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":143,"slug":"sdf-cat-nose-and-cheeks","moduleId":3,"name":"SDF Cat - Nose and Cheeks","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nfloat drawPental(vec2 uv, float r) {\\n  vec2 center1 = vec2(-25.0, 0.0) + vec2(+r, +r);\\n  vec2 center2 = vec2(+25.0, 0.0) + vec2(-r, +r);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return max(c1, c2);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float head = sdfCircle(vec2(0.0, 0.0), 60.0 + sin(iTime) * 1.0, uv);\\n\\n  float angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  float x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  float y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earOuter1 = drawPental(vec2(x, y), 60.0);\\n\\n  angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earInner1 = drawPental(vec2(x, y + 5.0), 60.0);\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earOuter2 = drawPental(vec2(x, y), 60.0);\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float earInner2 = drawPental(vec2(x, y + 5.0), 60.0);\\n\\n  float ear1 = max(earOuter1, -earInner1);\\n  float ear2 = max(earOuter2, -earInner2);\\n\\n  angle = 3.14 * -0.1 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers1 = sdfBox(vec2(-60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers2 = sdfBox(vec2(-60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers3 = sdfBox(vec2(60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * 0.1 - (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers4 = sdfBox(vec2(60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  float nose1 = sdfCircle(vec2(-10.0, -14.0 + sin(iTime) * 2.0), 11.0, uv);\\n  float nose2 = sdfCircle(vec2(+10.0, -14.0 + sin(iTime) * 2.0), 11.0, uv);\\n  float nose3 = sdfCircle(vec2(0.0, -7.0 + sin(iTime) * 2.0), 10.0, uv);\\n\\n  float cheek1 = sdfCircle(vec2(+12.0 + sin(iTime) * 2.0, -20.0 + sin(iTime) * 2.0), 15.0, uv);\\n  float cheek2 = sdfCircle(vec2(+10.0 + sin(iTime) * 2.0, -18.0 + sin(iTime) * 2.0), 15.0, uv);\\n\\n  float cheek3 = sdfCircle(vec2(-12.0 - sin(iTime) * 2.0, -20.0 + sin(iTime) * 2.0), 15.0, uv);\\n  float cheek4 = sdfCircle(vec2(-10.0 - sin(iTime) * 2.0, -18.0 + sin(iTime) * 2.0), 15.0, uv);\\n\\n  float u1 = softMin(head, min(ear1, ear2), 0.25);\\n  float u2 = min(max(-whiskers1, u1), max(whiskers1, -u1));\\n  float u3 = min(max(-whiskers2, u2), max(whiskers2, -u2));\\n  float u4 = min(max(-whiskers3, u3), max(whiskers3, -u3));\\n  float u5 = min(max(-whiskers4, u4), max(whiskers4, -u4));\\n  float u6 = max(u5, -max(nose3, -min(nose1, nose2)));\\n  float u7 = softMax(u6, -max(cheek1, -cheek2), 0.9);\\n  float u8 = softMax(u7, -max(cheek3, -cheek4), 0.9);\\n  \\n  float t = clamp(u8, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To complete this task you need to recall lessons about SDF union and subtraction.\\n\\n### Task\\nIn this task you need to add a cat\'s nose and cheeks.\\n\\n<br>\\n\\nThe outline of one cheek is made through the combintaion of two circles with a radius of 15 pixels, where the second circle is shifted by 2 pixels along the X and Y axis. The coordinates of the center of the outer circle are (12; -20). Also, the cheeks move over time up by 2 pixels and down relative to the initial position.\\n\\n<br>\\n\\nThe nose is a combination of three circles with centers at (-10; -14), (-10; -14) and (0; -7). And with radii 11, 11 and 10. The nose moves over time up 2 pixels and down relative to the initial position.","hints":[],"restrictions":[],"order":14,"cost":10,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":140,"slug":"sdf-cat-eyes","moduleId":3,"name":"SDF Cat - Eyes","order":15,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":140,"slug":"sdf-cat-eyes","moduleId":3,"name":"SDF Cat - Eyes","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nfloat drawPental(vec2 uv, float r) {\\n  vec2 center1 = vec2(-25.0, 0.0) + vec2(+r, +r);\\n  vec2 center2 = vec2(+25.0, 0.0) + vec2(-r, +r);\\n  \\n  float c1 = sdfCircle(center1, r, uv);\\n  float c2 = sdfCircle(center2, r, uv);\\n\\n  return max(c1, c2);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float head = sdfCircle(vec2(0.0, 0.0), 60.0 + sin(iTime) * 1.0, uv);\\n\\n  float angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  float x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  float y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earOuter1 = drawPental(vec2(x, y), 60.0);\\n\\n  angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earInner1 = drawPental(vec2(x, y + 5.0), 60.0);\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = uv.x * cos(angle) - (uv.y) * sin(angle);\\n  y = uv.x * sin(angle) + (uv.y) * cos(angle);\\n  float earOuter2 = drawPental(vec2(x, y), 60.0);\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float earInner2 = drawPental(vec2(x, y + 5.0), 60.0);\\n\\n  float ear1 = max(earOuter1, -earInner1);\\n  float ear2 = max(earOuter2, -earInner2);\\n\\n  angle = 3.14 * -0.1 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers1 = sdfBox(vec2(-60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * -0.2 + (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers2 = sdfBox(vec2(-60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * 0.2 - (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers3 = sdfBox(vec2(60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  angle = 3.14 * 0.1 - (sin(iTime) * 0.1);\\n  x = (uv.x) * cos(angle) - (uv.y) * sin(angle);\\n  y = (uv.x) * sin(angle) + (uv.y) * cos(angle);\\n  float whiskers4 = sdfBox(vec2(60.0, -10.0), vec2(35.0, 1.0), vec2(x, y));\\n\\n  float nose1 = sdfCircle(vec2(-10.0, -14.0 + sin(iTime) * 2.0), 11.0, uv);\\n  float nose2 = sdfCircle(vec2(+10.0, -14.0 + sin(iTime) * 2.0), 11.0, uv);\\n  float nose3 = sdfCircle(vec2(0.0, -7.0 + sin(iTime) * 2.0), 10.0, uv);\\n\\n  float cheek1 = sdfCircle(vec2(+12.0 + sin(iTime) * 2.0, -20.0 + sin(iTime) * 2.0), 15.0, uv);\\n  float cheek2 = sdfCircle(vec2(+10.0 + sin(iTime) * 2.0, -18.0 + sin(iTime) * 2.0), 15.0, uv);\\n\\n  float cheek3 = sdfCircle(vec2(-12.0 - sin(iTime) * 2.0, -20.0 + sin(iTime) * 2.0), 15.0, uv);\\n  float cheek4 = sdfCircle(vec2(-10.0 - sin(iTime) * 2.0, -18.0 + sin(iTime) * 2.0), 15.0, uv);\\n\\n  float eye1 = sdfCircle(vec2(-20.0, 20.0 + sin(iTime) * 2.0), 15.0, uv);\\n  float eye2 = sdfCircle(vec2(-25.0, 25.0), 15.0, uv);\\n\\n  float eye3 = sdfCircle(vec2(20.0, 20.0 + sin(iTime) * 2.0), 15.0, uv);\\n  float eye4 = sdfCircle(vec2(25.0, 25.0), 15.0, uv);\\n\\n  float pupil1 = sdfCircle(vec2(-10.0 - sin(iTime), 22.0), 15.0, uv);\\n  float pupil2 = sdfCircle(vec2(-32.0 + sin(iTime), 22.0), 15.0, uv);\\n\\n  float pupil3 = sdfCircle(vec2(10.0 + sin(iTime), 22.0), 15.0, uv);\\n  float pupil4 = sdfCircle(vec2(32.0 - sin(iTime), 22.0), 15.0, uv);\\n\\n  float u1 = softMin(head, min(ear1, ear2), 0.25);\\n  float u2 = min(max(-whiskers1, u1), max(whiskers1, -u1));\\n  float u3 = min(max(-whiskers2, u2), max(whiskers2, -u2));\\n  float u4 = min(max(-whiskers3, u3), max(whiskers3, -u3));\\n  float u5 = min(max(-whiskers4, u4), max(whiskers4, -u4));\\n  float u6 = max(u5, -max(nose3, -min(nose1, nose2)));\\n  float u7 = softMax(u6, -max(cheek1, -cheek2), 0.9);\\n  float u8 = softMax(u7, -max(cheek3, -cheek4), 0.9);\\n  float u9 = max(u8, -max(eye1, eye2));\\n  float u10 = max(u9, -max(eye3, eye4));\\n  float u11 = min(u10, max(pupil1, pupil2));\\n  float u12 = min(u11, max(pupil3, pupil4));\\n  \\n  float t = clamp(u12, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"### Task\\nWe\'re almost done. All that remains is to add the eyes with pupils.\\n\\n<br>\\n\\nCat\'s eye is a combination of two circles with a radius of 15 pixels. The center of the first circle is located at (20.0, 20.0), the second at (25.0, 25.0). Also the top one moves up 2 pixels and down relative to the initial position.\\n\\n<br>\\n\\nThe pupil is also a combination of two circles with a radius of 15 pixels. The center of the first circle is located at (10.0, 22.0), the second at (32.0, 22.0). The circles move closer by 2 pixels and move away over time.","hints":[],"restrictions":[],"order":15,"cost":10,"threshold":99,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n    vec2 d = abs(pos - center) - size;\\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nfloat softMax(float a, float b, float k) {\\n  return log(exp(k * a) + exp(k * b)) / k;\\n}\\n\\nfloat softMin(float a, float b, float k) {\\n  return -softMax(-a, -b, k);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  // make 0 the center\\n  uv.x -= iResolution.x * 0.5;\\n  uv.y -= iResolution.y * 0.5;\\n\\n  float u = 1.0; // cat; \\n    \\n  float t = clamp(u, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":139,"slug":"sdf-box-blur","moduleId":3,"name":"SDF Box Blur","order":16,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":139,"slug":"sdf-box-blur","moduleId":3,"name":"SDF Box Blur","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawCircle(vec2 pos) {\\n  float t = sdfCircle(iResolution * 0.5, iResolution.y * 0.4, pos);\\n  return t;\\n}\\n\\nfloat blurSDF(vec2 pos) {\\n  float sum = 0.0;\\n  \\n  for (int i = -5; i <= 5; i++)\\n  {\\n    for (int j = -5; j <= 5; j++)\\n    {\\n      vec2 offset = vec2(float(i), float(j)) * 2.0;\\n      float sdf = drawCircle(pos + offset);\\n      sum += clamp(sdf, 0.0, 1.0);\\n    }\\n  }\\n  \\n  return sum / (121.0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float t = blurSDF(uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawCircle(vec2 pos) {\\n  float t = sdfCircle(iResolution * 0.5, iResolution.y * 0.4, pos);\\n  return t;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float t = drawCircle(uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Box blur is a simple image processing algorithm that can be used to smooth out an image by reducing the high-frequency noise and sharp edges. The algorithm works by averaging the color values of neighboring pixels within a window of a specified size.\\n\\n<br>\\n\\nHere are the steps to implement a box blur:\\n\\n1. Define the size of the blur window. For example, if you want to apply a 3x3 blur, the window size will be 3.\\n\\n2. Calculate the total number of pixels in the window by squaring the window size. In this example, the total number of pixels will be 9.\\n\\n3. For each pixel in the image, calculate the average color value of all the pixels within the window. To do this, add up the color values of all the pixels in the window and divide by the total number of pixels.\\n\\n### Task\\nApply a box blur effect to the SDF shape using a window size of 11. \\n\\n<br>\\n\\nTo enhance the blur effect, when determining the position of an adjacent pixel in the window, multiply the offset relative to the current pixel by 2.","hints":[],"restrictions":[],"order":16,"cost":10,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawCircle(vec2 pos) {\\n  float t = sdfCircle(iResolution * 0.5, iResolution.y * 0.4, pos);\\n  return t;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float t = drawCircle(uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst vec3 shapeColor      = vec3(1.0, 0.3, 0.3);\\nconst vec3 backgroundColor = vec3(0.12);\\n\\nfloat sdfCircle(vec2 center, float r, vec2 pos) {\\n  return distance(center, pos) - r;\\n}\\n\\nfloat drawCircle(vec2 pos) {\\n  float t = sdfCircle(iResolution * 0.5, iResolution.y * 0.4, pos);\\n  return t;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy;\\n\\n  float t = drawCircle(uv);\\n  t = clamp(t, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(mix(shapeColor, backgroundColor, t), 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for developers who want to master the use of Signed Distance Fields (SDF) in computer graphics. You will study distance functions for rendering smooth and detailed shapes, and learn the formulas for combining these functions to build more complex shapes. Each topic includes theoretical material and practical tasks that can be completed directly on the website.","skillsDesc":"the concept of Signed Distance Fields and their applications in computer graphics.<br>various distance functions for rendering smooth and detailed shapes.<br>the formulas for combining distance functions to create complex shapes.<br>how to apply these techniques to render high-quality and detailed graphics in 2D.","importanceDesc":"Signed Distance Fields are crucial for creating smooth and detailed shapes in computer graphics. Understanding how to use distance functions allows developers to render shapes with high precision and flexibility. Knowledge of combining these functions enables the creation of complex and intricate designs, which is essential for advanced graphics applications such as games, simulations, and visual effects.","certifiable":false,"images":["img-1.png","img-2.png","img-3.png","img-4.png"]}},{"id":8,"slug":"noise","name":"Noise","description":"Explore various noise algorithms and their applications in creating visual effects.","tasks":19,"acceptedTasks":0,"isOpen":false,"order":6,"locked":false,"cover":true,"child":{"id":8,"slug":"noise","name":"Noise","description":"Explore various noise algorithms and their applications in creating visual effects.","order":6,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":78,"slug":"random-1d","moduleId":8,"name":"Random 1D","order":0,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":78,"slug":"random-1d","moduleId":8,"name":"Random 1D","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(float x) {\\n   float r = fract(sin(x * 12.34) * 1234.5678);\\n   return r * 2.0 - 1.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float noiseValue = random(uv.x);\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(float x) {\\n   return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float noiseValue = random(uv.x);\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Using the `sin` and `fract` functions to generate pseudo-random values in shaders is based on their mathematical properties, which allow for creating sufficiently chaotic and unpredictable results.\\n\\n<br>\\n\\n### The sin Function\\n\\n<br>\\n\\nThe `sin` function has several important properties that make it useful for generating pseudo-random numbers:\\n\\n<br>\\n\\n**Sensitivity to Input Changes**: The `sin` function is highly sensitive to changes in its input. Even small variations in the input can lead to significant changes in the output. This sensitivity is crucial for generating chaotic and unpredictable values. For example, if you slightly change the input value, the output of the sine function can vary dramatically, which helps in creating a more random-like distribution of values.\\n\\n<br>\\n\\n**Periodicity**: The `sin` function is periodic, meaning it repeats at regular intervals. This property can be used to create repeating but complex patterns.\\n\\n<br>\\n\\n### The fract Function\\n\\n<br>\\n\\nThe `fract` function helps limit the values returned by the `sin` function to the range from `0.0` to `1.0`, which is convenient for use in shaders. Keep in mind that the result of `fract` is always positive:\\n\\n```\\nif (x >= 0.0)\\n  return x - floor(x)\\nelse\\n  return x - ceil(x)\\n```\\n\\nAlthough `fract` limits the values, it does not destroy the randomness created by previous operations. This is because the fractional part of a number retains the chaotic and unpredictable nature embedded in the original value.\\n\\n<br>\\n\\n### Multipliers\\n\\n<br>\\n\\nThe large multiplier (e.g., 1234.5678) used after the `sin` function further amplifies the sensitivity to input changes. This large number ensures that even small differences in the input coordinates result in significantly different outputs after applying the `sin` function. This amplification is crucial for achieving a high degree of randomness.\\n\\n<br>\\n\\n### Example\\n\\n<br>\\n\\nLet’s consider an example function that uses `sin` and `fract` to generate pseudo-random numbers:\\n\\n```\\nfloat random(float x) {\\n    return fract(sin(x * 12.34) * 1234.5678);\\n}\\n```\\n\\n**Input Data**: The value `x`, which can be pixel coordinates or any other values.\\n\\n**Multipliers**: The constants `12.34` and `1234.5678` are chosen empirically to create more chaotic results.\\n\\n**The sin Function**: Applied to the result of the multiplication to create a chaotic value.\\n\\n**The fract Function**: Limits the result to the range from `0.0` to `1.0`.\\n\\n### Task\\nIn a shader program, implement the `random` function that generates a pseudo-random value in the range of `[-1, 1]` for a given input using a sine wave. Use the value `12.34` as the multiplier for the sine argument and `1234.5678` as the multiplier for the sine output.","hints":[],"restrictions":[],"order":0,"cost":5,"threshold":95,"likes":2,"dislikes":4,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(float x) {\\n   return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float noiseValue = random(uv.x);\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(float x) {\\n   return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float noiseValue = random(uv.x);\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":178,"slug":"random-ranges","moduleId":8,"name":"Random Ranges","order":1,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":178,"slug":"random-ranges","moduleId":8,"name":"Random Ranges","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\n// returns: [0.0, 1.0];\\nfloat random(float x) {\\n   float r = fract(sin(x * 12.34) * 1234.5678);\\n   return r;\\n}\\n\\nvoid main() {\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  uv *= ratio;\\n\\n  float time = iTime * 0.75;\\n  int particlesCount = 10;\\n  float spawnDelta = 1.0 / float(particlesCount);\\n  float size0 = 0.4;\\n  float size1 = 0.0;\\n  vec2 dir0 = vec2(0.3, 1.0);\\n  vec2 dir1 = vec2(-0.3, 1.0);\\n  vec2 startPos = vec2(0.5, 0.1) * ratio;\\n  vec3 color0 = vec3(1.0, 0.5, 0.0);\\n  vec3 color1 = vec3(1.0, 0.0, 0.0);\\n  \\n  vec3 result = vec3(0.0);\\n  for (int i = 0; i < particlesCount; i++) {\\n    float progress = fract(time + float(i) * spawnDelta);\\n    \\n    float rand = random(float(i));\\n    vec2  dir  = mix(dir0, dir1, rand);\\n\\n    vec2  pos = startPos + dir * progress;\\n    float size  = mix(size0, size1, progress);\\n    vec3  color = mix(color0, color1, progress);\\n    \\n    float t = 1.0 - smoothstep(0.0, size, distance(uv, pos));\\n    result += color * t;\\n  }\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\n// returns: [0.0, 1.0];\\nfloat random(float x) {\\n   float r = fract(sin(x * 12.34) * 1234.5678);\\n   return r;\\n}\\n\\nvoid main() {\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  uv *= ratio;\\n\\n  float time = iTime * 0.75;\\n  int particlesCount = 10;\\n  float spawnDelta = 1.0 / float(particlesCount);\\n  float size0 = 0.4;\\n  float size1 = 0.0;\\n  vec2 dir0 = vec2(0.3, 1.0);\\n  vec2 dir1 = vec2(-0.3, 1.0);\\n  vec3 color0 = vec3(1.0, 0.5, 0.0);\\n  vec3 color1 = vec3(1.0, 0.0, 0.0);\\n  \\n  vec3 result = vec3(0.0);\\n  for (int i = 0; i < particlesCount; i++) {\\n    float progress = fract(time + float(i) * spawnDelta);\\n\\n    // change position\\n    vec2 pos = vec2(0.5) * ratio;\\n    \\n    float size  = mix(size0, size1, progress);\\n    vec3  color = mix(color0, color1, progress);\\n    \\n    float t = 1.0 - smoothstep(0.0, size, distance(uv, pos));\\n    result += color * t;\\n  }\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":16777215}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Interpolation can be used to generate random values within a specified range. The values within the range can be of different types, such as colors, directions, positions, or any other parameters. \\n\\n<br>\\n\\nTo generate a random value in the range `[V0, V1]`, we can use a random value that varies between 0 and 1 as the interpolation parameter:\\n```\\nV = mix(V0, V1, random());\\n```\\n\\n### Task\\n\\nGiven code that generates particles every few milliseconds in the centre of the screen. \\n\\n<br>\\n\\nChange the code so that the particles appear at `(0.5, 0.1)` and move randomly between two directions (`dir0` and `dir1`). Use the sequence number of the particle to get a random parameter.","hints":[],"restrictions":[],"order":1,"cost":5,"threshold":99,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":100,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\n// returns: [0.0, 1.0];\\nfloat random(float x) {\\n   float r = fract(sin(x * 12.34) * 1234.5678);\\n   return r;\\n}\\n\\nvoid main() {\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  uv *= ratio;\\n\\n  float time = iTime * 0.75;\\n  int particlesCount = 10;\\n  float spawnDelta = 1.0 / float(particlesCount);\\n  float size0 = 0.4;\\n  float size1 = 0.0;\\n  vec2 dir0 = vec2(0.3, 1.0);\\n  vec2 dir1 = vec2(-0.3, 1.0);\\n  vec3 color0 = vec3(1.0, 0.5, 0.0);\\n  vec3 color1 = vec3(1.0, 0.0, 0.0);\\n  \\n  vec3 result = vec3(0.0);\\n  for (int i = 0; i < particlesCount; i++) {\\n    float progress = fract(time + float(i) * spawnDelta);\\n\\n    // change position\\n    vec2 pos = vec2(0.5) * ratio;\\n    \\n    float size  = mix(size0, size1, progress);\\n    vec3  color = mix(color0, color1, progress);\\n    \\n    float t = 1.0 - smoothstep(0.0, size, distance(uv, pos));\\n    result += color * t;\\n  }\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\n// returns: [0.0, 1.0];\\nfloat random(float x) {\\n   float r = fract(sin(x * 12.34) * 1234.5678);\\n   return r;\\n}\\n\\nvoid main() {\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  uv *= ratio;\\n\\n  float time = iTime * 0.75;\\n  int particlesCount = 10;\\n  float spawnDelta = 1.0 / float(particlesCount);\\n  float size0 = 0.4;\\n  float size1 = 0.0;\\n  vec2 dir0 = vec2(0.3, 1.0);\\n  vec2 dir1 = vec2(-0.3, 1.0);\\n  vec3 color0 = vec3(1.0, 0.5, 0.0);\\n  vec3 color1 = vec3(1.0, 0.0, 0.0);\\n  \\n  vec3 result = vec3(0.0);\\n  for (int i = 0; i < particlesCount; i++) {\\n    float progress = fract(time + float(i) * spawnDelta);\\n\\n    // change position\\n    vec2 pos = vec2(0.5) * ratio;\\n    \\n    float size  = mix(size0, size1, progress);\\n    vec3  color = mix(color0, color1, progress);\\n    \\n    float t = 1.0 - smoothstep(0.0, size, distance(uv, pos));\\n    result += color * t;\\n  }\\n\\n  gl_FragColor = vec4(result, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":79,"slug":"random-2d","moduleId":8,"name":"Random 2D","order":2,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":79,"slug":"random-2d","moduleId":8,"name":"Random 2D","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(vec2 point){\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float noiseValue = random(uv);\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\n\\nfloat random(vec2 point){\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float noiseValue = random(uv);\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Using the `dot` product to create a single value from two input coordinates is a common technique in shader programming to generate pseudo-random values.\\n\\n<br>\\n\\n### Understanding the Dot Product\\n\\n<br>\\n\\nThe `dot` product of two vectors is a mathematical operation that takes two equal-length sequences of numbers (usually coordinate vectors) and returns a single number. The `dot` product of two vectors **A** and **B** is defined as:\\n\\n```\\nA · B = ax * bx + ay * by\\n```\\n\\nWhere **ax** and **ay** are the components of vector **A**, and **bx** and **by** are the components of vector **B**.\\n\\n<br>\\n\\n### Why Use the Dot Product for Random Values?\\n\\n<br>\\n\\nThe `dot` product is useful for generating pseudo-random values because it combines the input coordinates in a way that is sensitive to changes in those coordinates. This sensitivity helps create a more varied and unpredictable result, which is essential for randomness.\\n\\n<br>\\n\\n### Example\\n\\n```\\nfloat random(vec2 point) {\\n    return fract(sin(dot(point, vec2(12.34, 56.78))) * 1234.5678);\\n}\\n```\\n\\nThe `dot` product of the input coordinates with a vector of constants (e.g., `vec2(12.34, 56.78)`) helps to create a single value from two input coordinates.\\n\\n### Task\\nYour task is to implement the `random` function that generates a random value in the range of [-1, 1] for a two-dimensional point by calculating its dot product with the constant vector `(12.34, 56.78)`. Then, you need to use `1234.5678` as the multiplier for the sine output and apply the `fract` function to limit the result to the range ([0, 1]).","hints":[],"restrictions":[],"order":2,"cost":5,"threshold":95,"likes":1,"dislikes":2,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\n\\nfloat random(vec2 point){\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float noiseValue = random(uv);\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\n\\nfloat random(vec2 point){\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float noiseValue = random(uv);\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":179,"slug":"random-detalization","moduleId":8,"name":"Random Detalization","order":3,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":179,"slug":"random-detalization","moduleId":8,"name":"Random Detalization","vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}","fragmentShader":"uniform sampler2D iChannel0;\\nuniform float iTime;\\n\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst vec3 lightDir = normalize(vec3(-1.0, 1.0, 1.0));\\n\\nfloat random(vec2 point) {\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  return r;\\n}\\n\\nvoid main() {\\n  vec3 fragColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  float progress = cos(iTime) * 0.6 + 0.5;\\n  float quantizationStep = 0.1;\\n  float hole = random(floor(vUv / quantizationStep) * quantizationStep);\\n  hole = step(progress, hole);\\n  fragColor = mix(fragColor, vec3(0.0), hole);\\n  \\n  float ambient = 0.5;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * fragColor, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\nuniform float iTime;\\n\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst vec3 lightDir = normalize(vec3(-1.0, 1.0, 1.0));\\n\\nfloat random(vec2 point) {\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  return r;\\n}\\n\\nvoid main() {\\n  vec3 fragColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  float progress = cos(iTime) * 0.6 + 0.5;\\n  float quantizationStep = 0.1;\\n  \\n  float ambient = 0.5;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * fragColor, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":\\"0\\",\\"y\\":\\"0\\",\\"z\\":\\"2\\"},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":\\"45\\",\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":\\"1\\",\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"2\\",\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"000000\\",\\"background\\":0}","description":"**Quantization** is the process of converting continuous values into discrete ones. In programming, this can mean rounding values (coordinates, colors) to the nearest discrete values. \\n\\n<br>\\n\\nWe can use quantization to make the noise coarser and less detailed:\\n\\n<br>\\n\\n**1**. **Define the Quantization Step**: Choose a *quantization step* that determines how coarse the rounding will be. For example, a step of 0.1 means coordinates will be rounded to the nearest value that is a multiple of 0.1.\\n\\n<br>\\n\\n**2**. **Quantize the Coordinates**: Apply quantization to the coordinates. This can be done using simple rounding. For example, if you have coordinates **(x, y)**, you can round them as follows:\\n\\n```\\nquantizedCoords = floor(coords / step) * step;\\n```\\n\\n**3**. **Generate Noise**: use the quantized coordinates to generate noise.\\n\\n### Task\\nChange the code so the visibility of a fragment is determined based on a random value computed from the fragment’s texture coordinates. Use a `progress` variable as the threshold value. If the fragment is not visible, it should be colored black. Additionally, perform quantization on the texture coordinates with a quantization step of `0.1` before computing the random value.","hints":[],"restrictions":[],"order":3,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":15,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform sampler2D iChannel0;\\nuniform float iTime;\\n\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst vec3 lightDir = normalize(vec3(-1.0, 1.0, 1.0));\\n\\nfloat random(vec2 point) {\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  return r;\\n}\\n\\nvoid main() {\\n  vec3 fragColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  float progress = cos(iTime) * 0.6 + 0.5;\\n  float quantizationStep = 0.1;\\n  \\n  float ambient = 0.5;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * fragColor, 1.0);\\n}","defaultVertexShader":"uniform float iTime;\\n\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nmat4 getModel() {\\n  float angle = iTime;\\n  \\n  vec4 r1 = vec4(cos(angle), 0.0, sin(angle), 0.0);\\n  vec4 r2 = vec4(0.0, 1.0, 0.0, 0.0);\\n  vec4 r3 = vec4(-sin(angle), 0.0, cos(angle), 0.0);\\n  vec4 r4 = vec4(0.0, 0.0, 0.0, 1.0);\\n  mat4 transform = transpose(mat4(r1, r2, r3, r4));\\n  \\n  return modelMatrix * transform;\\n}\\n\\nvoid main() {\\n  mat4 model = getModel();\\n  \\n  vUv = uv;\\n  vPos = vec3(model * vec4(position, 1.0));\\n  \\n  vNormal = normalize(mat3(transpose(inverse(model))) * normal);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * model * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform sampler2D iChannel0;\\nuniform float iTime;\\n\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\n\\nconst vec3 lightDir = normalize(vec3(-1.0, 1.0, 1.0));\\n\\nfloat random(vec2 point) {\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  return r;\\n}\\n\\nvoid main() {\\n  vec3 fragColor = texture2D(iChannel0, vUv).rgb;\\n  vec3 fragNormal = normalize(vNormal);\\n  \\n  float progress = cos(iTime) * 0.6 + 0.5;\\n  float quantizationStep = 0.1;\\n  \\n  float ambient = 0.5;\\n  float diffuse = dot(fragNormal, lightDir);\\n  \\n  gl_FragColor = vec4((ambient + diffuse) * fragColor, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":71,"slug":"bilinear-filtering","moduleId":8,"name":"Bilinear Filtering","order":4,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":71,"slug":"bilinear-filtering","moduleId":8,"name":"Bilinear Filtering","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvec3 points[4];\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  points[0] = vec3(1.0, 1.0, 0.0);\\n  points[1] = vec3(1.0, 0.0, 0.0);\\n  points[2] = vec3(0.0, 1.0, 0.0);\\n  points[3] = vec3(0.0, 0.0, 1.0);\\n  \\n  ivec2 uv_i = ivec2(max(vec2(0.0), uv * 2.0 - 0.5));\\n  vec2 uv_f = fract(max(vec2(0.0), uv * 2.0 - 0.5));\\n  \\n  ivec2 p1 = min(ivec2(1, 1), uv_i + ivec2(0, 0)); \\n  ivec2 p2 = min(ivec2(1, 1), uv_i + ivec2(1, 0));\\n  ivec2 p3 = min(ivec2(1, 1), uv_i + ivec2(0, 1));\\n  ivec2 p4 = min(ivec2(1, 1), uv_i + ivec2(1, 1));\\n  \\n  int index1 = p1.x + p1.y * 2;\\n  int index2 = p2.x + p2.y * 2;\\n  int index3 = p3.x + p3.y * 2;\\n  int index4 = p4.x + p4.y * 2;\\n  \\n  vec3 s1 = mix(points[index1], points[index2], uv_f.x);\\n  vec3 s2 = mix(points[index3], points[index4], uv_f.x);\\n  vec3 color = mix(s1, s2, uv_f.y);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvec3 points[4];\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  points[0] = vec3(1.0, 1.0, 0.0);\\n  points[1] = vec3(1.0, 0.0, 0.0);\\n  points[2] = vec3(0.0, 1.0, 0.0);\\n  points[3] = vec3(0.0, 0.0, 1.0);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"**Bilinear filtering** is a method for interpolating functions of two variables (e.g., *x* and *y*) on a 2D grid.\\n\\n<br>\\n\\nThe primary purpose of bilinear filtering is to estimate the value of a function at a given point within a grid, based on the known values at the grid’s surrounding points. This is particularly useful in scenarios where you need to resize images, apply texture mapping, or smooth data.\\n\\n<br>\\n\\n### How Bilinear Interpolation Works\\n\\n<br>\\n\\n**1.** **Identify the Surrounding Points**. Given a point *(x, y)* where you want to interpolate, identify the four surrounding points in the grid **Q0**, **Q1**, **Q2**, and **Q3**:\\n\\n<br>\\n\\n![](/files/bilinear-filtering-points.png)\\n\\n<br>\\n\\n**2.** **Linear Interpolation in the x-Direction**. Perform linear interpolation between **Q0** and **Q1** to find **R0**. Perform linear interpolation between **Q2** and **Q3** to find **R1**.\\n\\n<br>\\n\\n![](/files/bilinear-filtering-interpolation.png)\\n\\n<br>\\n\\n**3.** **Linear Interpolation in the y-Direction**. Perform linear interpolation between **R0** and **R1** to find the interpolated value **P**.\\n\\n### Task\\nGiven an array of 4 colors, divide the screen into a 2x2 grid and assign each cell a color from the array. Apply bilinear interpolation to smooth the transitions between the colors.\\n\\n<br>\\n\\n![](/files/bilinear-filtering-task.png)\\n\\n<br>\\n\\n**Note** that the color intensity of each cell is highest at its center.","hints":[],"restrictions":[],"order":4,"cost":10,"threshold":95,"likes":0,"dislikes":4,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvec3 points[4];\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  points[0] = vec3(1.0, 1.0, 0.0);\\n  points[1] = vec3(1.0, 0.0, 0.0);\\n  points[2] = vec3(0.0, 1.0, 0.0);\\n  points[3] = vec3(0.0, 0.0, 1.0);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nvec3 points[4];\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  points[0] = vec3(1.0, 1.0, 0.0);\\n  points[1] = vec3(1.0, 0.0, 0.0);\\n  points[2] = vec3(0.0, 1.0, 0.0);\\n  points[3] = vec3(0.0, 0.0, 1.0);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":74,"slug":"value-noise","moduleId":8,"name":"Value Noise","order":5,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":74,"slug":"value-noise","moduleId":8,"name":"Value Noise","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(vec2 point){\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nfloat noise(vec2 point) {\\n  vec2 i = floor(point);\\n  vec2 f = fract(point);\\n  \\n  vec2 u = smoothstep(0.0, 1.0, f);\\n  \\n  float r1 = random(i + vec2(0.0, 0.0));\\n  float r2 = random(i + vec2(1.0, 0.0));\\n  float r3 = random(i + vec2(0.0, 1.0));\\n  float r4 = random(i + vec2(1.0, 1.0));\\n  \\n  return mix(mix(r1, r2, u.x), mix(r3, r4, u.x), u.y);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec2(uv * ratio * 5.0)) * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(vec2 point){\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nfloat noise(vec2 point) {\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec2(uv * ratio * 5.0)) * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"When sampling the grid of random values, we can use bilinear filtering to interpolate between the nearest grid points and create a smoother, more continuous pattern.\\n\\n<br>\\n\\n### Value Noise Implementation \\n\\n<br>\\n\\n**1.** **Create a grid of random values**: To generate the values we can use a regular random function and an integer part of UV coordinates as an argument. We can control the size of the grid by multiplying the UV coordinates by a constant.\\n\\n```\\ncellpos = floor(uv * size);\\ncellval = random(cellpos);\\n```\\n\\n**2.** **Getting random values from the grid**: Use the integer part of the coordinates to get the four closest random values from the grid.\\n\\n```\\ncellval = random(cellpos + intoffset);\\n```\\n\\n**3.** **Interpolate between values**: Use the fractional part of the coordinates to interpolate between the obtained values on the X and Y axis. *Be sure to apply smoothstep (Hermite interpolation) to get interpolation weight.*\\n\\n```\\nweight = smoothstep(0.0, 1.0, fractionalPart);\\n```\\n\\n<br>\\n\\n\\n\\n### Task\\nImplement bilinear filtering in the `noise` function. Use `random` function to get the point color.","hints":[],"restrictions":[],"order":5,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(vec2 point){\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nfloat noise(vec2 point) {\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec2(uv * ratio * 5.0)) * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nfloat random(vec2 point){\\n  float d = dot(point, vec2(12.34, 56.78));\\n  float r = fract(sin(d) * 1234.5678);\\n  r = r * 2.0 - 1.0; \\n  return r;\\n}\\n\\nfloat noise(vec2 point) {\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec2(uv * ratio * 5.0)) * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":73,"slug":"gradient-noise","moduleId":8,"name":"Gradient Noise","order":6,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":73,"slug":"gradient-noise","moduleId":8,"name":"Gradient Noise","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nvec2 random2(vec2 point){\\n  float d1 = dot(point, vec2(12.3, 32.1));\\n  float d2 = dot(point, vec2(45.6, 65.4));\\n  \\n  point = vec2(d1, d2);\\n  return fract(sin(point) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec2 point) {\\n  vec2 i = floor(point);\\n  vec2 f = fract(point);\\n\\n  vec2 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0));\\n  float d2 = dot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\\n  float d3 = dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\\n  float d4 = dot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0));\\n  return mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec2(uv * ratio * 5.0)) * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\n\\nvec2 random2(vec2 point){\\n  float d1 = dot(point, vec2(12.3, 32.1));\\n  float d2 = dot(point, vec2(45.6, 65.4));\\n  \\n  point = vec2(d1, d2);\\n  return fract(sin(point) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec2 point) {\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec2(uv * ratio * 5.0)) * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Algorithm:\\n1. Generate random vectors for the current cell, the cell on the right, bottom and bottom right cells.\\n2. Using the fractional part of the current position, determine the displacement vector for each of the four cells.\\n3. In pairs, calculate the dot product of the cell\'s random vector and it\'s displacement vector.\\n4. Using the bilinear interpolation algorithm, mix the four values. Pre-apply `smoothstep` (Hermite interpolation) to interpolation weight.\\n\\n### Task\\nImplement the gradient noise algorithm in the `noise` function. Use `random2` function to get random vector.","hints":[],"restrictions":[],"order":6,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\n\\nvec2 random2(vec2 point){\\n  float d1 = dot(point, vec2(12.3, 32.1));\\n  float d2 = dot(point, vec2(45.6, 65.4));\\n  \\n  point = vec2(d1, d2);\\n  return fract(sin(point) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec2 point) {\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec2(uv * ratio * 5.0)) * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\n\\nvec2 random2(vec2 point){\\n  float d1 = dot(point, vec2(12.3, 32.1));\\n  float d2 = dot(point, vec2(45.6, 65.4));\\n  \\n  point = vec2(d1, d2);\\n  return fract(sin(point) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec2 point) {\\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec2(uv * ratio * 5.0)) * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":76,"slug":"gradient-noise-animation","moduleId":8,"name":"Gradient Noise Animation","order":7,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":76,"slug":"gradient-noise-animation","moduleId":8,"name":"Gradient Noise Animation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 st){\\n  float d1 = dot(st, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(st, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(st, vec3(78.9, 98.7, 87.9));\\n  \\n  st = vec3(d1, d2, d3);\\n  return fract(sin(st) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  float result = mix(m1, m2, u.z);\\n  result = result * 0.5 + 0.5;\\n  \\n  return result;\\n}\\n\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec3(uv * ratio * 4.0, iTime * 0.5));\\n    \\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 st) {\\n  float d1 = dot(st, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(st, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(st, vec3(78.9, 98.7, 87.9));\\n  \\n  st = vec3(d1, d2, d3);\\n  return fract(sin(st) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  return 0.0;\\n}\\n\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec3(uv * ratio * 4.0, iTime * 0.5));\\n    \\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"To animate gradient noise in 2D, we first need to generate it in 3D. This involves creating a cube in 3D space with noise values and slicing it parallel to the x-y plane by moving the slice along the z-axis over time. Then display this slice on the screen.\\n\\n<br>\\n\\nIn order to generate gradient noise in 3D we need to calculate the gradient noise for the current x-y slice and the adjacent slice at the z-coordinate. We then mix these two values using the fractional part of the z coordinate. Be sure to apply smoothstep (Hermite interpolation) to interpolation weight.\\n\\n### Task\\nImplement the 3D gradient noise algorithm in the `noise` function. Use `random3` function to get random vector.\\n\\n","hints":[],"restrictions":[],"order":7,"cost":10,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":5,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 st) {\\n  float d1 = dot(st, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(st, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(st, vec3(78.9, 98.7, 87.9));\\n  \\n  st = vec3(d1, d2, d3);\\n  return fract(sin(st) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  return 0.0;\\n}\\n\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec3(uv * ratio * 4.0, iTime * 0.5));\\n    \\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 st) {\\n  float d1 = dot(st, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(st, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(st, vec3(78.9, 98.7, 87.9));\\n  \\n  st = vec3(d1, d2, d3);\\n  return fract(sin(st) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  return 0.0;\\n}\\n\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = noise(vec3(uv * ratio * 4.0, iTime * 0.5));\\n    \\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":181,"slug":"shape-distortion","moduleId":8,"name":"Shape Distortion","order":8,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":181,"slug":"shape-distortion","moduleId":8,"name":"Shape Distortion","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvec3 random3(vec3 st){\\n  float d1 = dot(st, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(st, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(st, vec3(78.9, 98.7, 87.9));\\n  \\n  st = vec3(d1, d2, d3);\\n  return fract(sin(st) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  float result = mix(m1, m2, u.z);\\n  result = result * 0.5 + 0.5;\\n  \\n  return result;\\n}\\n\\nvoid main() {\\n  vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  uv *= aspect;\\n  vec2 center = vec2(0.5) * aspect;\\n  \\n  float distortion = noise(vec3(uv * 5.0, iTime));\\n\\n  float proteinR = 0.2 + distortion * 0.4; \\n  float yolkR    = 0.1 + distortion * 0.1;\\n\\n  float protein = 1.0 - step(0.0, distance(center, uv) - proteinR);\\n  float yolk    = 1.0 - step(0.0, distance(center, uv) - yolkR);\\n  \\n  vec3 egg = vec3(1.0) * protein - vec3(0.0, 0.2, 1.0) * yolk;\\n  \\n  gl_FragColor = vec4(egg, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvec3 random3(vec3 st){\\n  float d1 = dot(st, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(st, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(st, vec3(78.9, 98.7, 87.9));\\n  \\n  st = vec3(d1, d2, d3);\\n  return fract(sin(st) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  float result = mix(m1, m2, u.z);\\n  result = result * 0.5 + 0.5;\\n  \\n  return result;\\n}\\n\\nvoid main() {\\n  vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  uv *= aspect;\\n  vec2 center = vec2(0.5) * aspect;\\n  \\n  float distortion = noise(vec3(uv * 5.0, iTime));\\n\\n  float proteinR = 0.2; \\n  float yolkR    = 0.1;\\n\\n  float protein = 1.0 - step(0.0, distance(center, uv) - proteinR);\\n  float yolk    = 1.0 - step(0.0, distance(center, uv) - yolkR);\\n  \\n  vec3 egg = vec3(1.0) * protein - vec3(0.0, 0.2, 1.0) * yolk;\\n  \\n  gl_FragColor = vec4(egg, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"Signed Distance Fields (SDF) represent shapes where each point’s value indicates the distance to the nearest boundary of the shape. Here you can learn more about SDF: [Signed Distance Field Module](https://shader-learning.com/module-view/3).\\n\\n<br>\\n\\nWe can add noise to the SDF value to distort the shape’s boundaries. This can be done by adding the noise value to the result of the SDF function:\\n\\n```\\ndistortedSDF = SDF + noise * strength;\\n```\\n\\nBy changing the noise multiplier you can control the strength of the shape distortion.\\n\\n### Task\\nTwo circles are given. You need to add to the white circle (squirrel) a distortion with strength of **0.4**, and to the yellow circle (yolk) a distortion with stength of **0.1**.","hints":[],"restrictions":[],"order":8,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":100,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvec3 random3(vec3 st){\\n  float d1 = dot(st, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(st, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(st, vec3(78.9, 98.7, 87.9));\\n  \\n  st = vec3(d1, d2, d3);\\n  return fract(sin(st) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  float result = mix(m1, m2, u.z);\\n  result = result * 0.5 + 0.5;\\n  \\n  return result;\\n}\\n\\nvoid main() {\\n  vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  uv *= aspect;\\n  vec2 center = vec2(0.5) * aspect;\\n  \\n  float distortion = noise(vec3(uv * 5.0, iTime));\\n\\n  float proteinR = 0.2; \\n  float yolkR    = 0.1;\\n\\n  float protein = 1.0 - step(0.0, distance(center, uv) - proteinR);\\n  float yolk    = 1.0 - step(0.0, distance(center, uv) - yolkR);\\n  \\n  vec3 egg = vec3(1.0) * protein - vec3(0.0, 0.2, 1.0) * yolk;\\n  \\n  gl_FragColor = vec4(egg, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nvec3 random3(vec3 st){\\n  float d1 = dot(st, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(st, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(st, vec3(78.9, 98.7, 87.9));\\n  \\n  st = vec3(d1, d2, d3);\\n  return fract(sin(st) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  float result = mix(m1, m2, u.z);\\n  result = result * 0.5 + 0.5;\\n  \\n  return result;\\n}\\n\\nvoid main() {\\n  vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  uv *= aspect;\\n  vec2 center = vec2(0.5) * aspect;\\n  \\n  float distortion = noise(vec3(uv * 5.0, iTime));\\n\\n  float proteinR = 0.2; \\n  float yolkR    = 0.1;\\n\\n  float protein = 1.0 - step(0.0, distance(center, uv) - proteinR);\\n  float yolk    = 1.0 - step(0.0, distance(center, uv) - yolkR);\\n  \\n  vec3 egg = vec3(1.0) * protein - vec3(0.0, 0.2, 1.0) * yolk;\\n  \\n  gl_FragColor = vec4(egg, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":180,"slug":"noise-texture","moduleId":8,"name":"Noise Texture","order":9,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":180,"slug":"noise-texture","moduleId":8,"name":"Noise Texture","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n  vec2 d = abs(pos - center) - size;\\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nvoid main() {\\n  vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float time = iTime * 0.25;\\n  \\n  float distortion = texture(iChannel0, fract(uv - vec2(0.0, time))).r;\\n  distortion *= uv.y;\\n  distortion *= 0.4;\\n\\n  vec2 center = vec2(0.5, 0.4);\\n  float shape = sdfBox(center * aspect, vec2(0.5, 0.15), uv * aspect);\\n  shape = max(shape - distortion, 0.0);\\n  \\n  float t = 1.0 - smoothstep(0.0, 0.1, shape);\\n  vec3 color = vec3(1.5, 1.0, 0.25) * t * (distortion + 0.6);\\n  \\n  gl_FragColor = vec4(color * color, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n  vec2 d = abs(pos - center) - size;\\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nvoid main() {\\n  vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float time = iTime * 0.25;\\n  \\n  float distortion = 0.0; // sample noise value\\n  distortion *= uv.y;\\n  distortion *= 0.4;\\n\\n  vec2 center = vec2(0.5, 0.4);\\n  float shape = sdfBox(center * aspect, vec2(0.5, 0.15), uv * aspect);\\n  shape = max(shape - distortion, 0.0);\\n  \\n  float t = 1.0 - smoothstep(0.0, 0.1, shape);\\n  vec3 color = vec3(1.5, 1.0, 0.25) * t * (distortion + 0.6);\\n  \\n  gl_FragColor = vec4(color * color, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"By saving noise to a texture and using texture scrolling, you can create dynamic and animated effects efficiently.\\n\\n<br>\\n\\n### Texture Scrolling\\n\\n<br>\\n\\nTexture scrolling involves offsetting the texture coordinates over time to create a moving effect. This can be achieved by modifying the UV coordinates based on a time variable:\\n\\n```\\n// scroll texture horizontally\\ntexture(iChannel0, fract(uv - vec2(time, 0.0)))\\n\\n// scroll texture vertically\\ntexture(iChannel0, fract(uv - vec2(0.0, time)))\\n```\\n\\n### Efficiency Considerations\\n\\n<br>\\n\\nUsing texture sampling to read precomputed noise values is much more efficient than generating noise values on-the-fly in the fragment shader. This is because:\\n\\n1. **Texture Sampling**: Modern GPUs are highly optimized for texture sampling. Accessing a value from a texture is a fast operation, often supported by dedicated hardware units within the GPU.\\n\\n\\n2. **Noise Generation**: Generating noise values in the shader involves complex mathematical operations, which can be computationally expensive and slow down rendering, especially when done for every fragment.\\n\\n### Task\\nYou are given a shader program that needs to be edited to achieve the following:\\n\\n1. **Sample a Noise Texture**: use a precomputed noise texture to obtain noise values.\\n2. **Implement Vertical Texture Scrolling**: modify the uv coordinates to scroll the texture vertically over time.\\n3. **Distortion Value**: use the sampled noise as a distortion value.","hints":[],"restrictions":[],"order":9,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":10,"animationStepTime":100,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n  vec2 d = abs(pos - center) - size;\\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nvoid main() {\\n  vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float time = iTime * 0.25;\\n  \\n  float distortion = 0.0; // sample noise value\\n  distortion *= uv.y;\\n  distortion *= 0.4;\\n\\n  vec2 center = vec2(0.5, 0.4);\\n  float shape = sdfBox(center * aspect, vec2(0.5, 0.15), uv * aspect);\\n  shape = max(shape - distortion, 0.0);\\n  \\n  float t = 1.0 - smoothstep(0.0, 0.1, shape);\\n  vec3 color = vec3(1.5, 1.0, 0.25) * t * (distortion + 0.6);\\n  \\n  gl_FragColor = vec4(color * color, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nfloat sdfBox(vec2 center, vec2 size, vec2 pos) {\\n  vec2 d = abs(pos - center) - size;\\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\\n}\\n\\nvoid main() {\\n  vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float time = iTime * 0.25;\\n  \\n  float distortion = 0.0; // sample noise value\\n  distortion *= uv.y;\\n  distortion *= 0.4;\\n\\n  vec2 center = vec2(0.5, 0.4);\\n  float shape = sdfBox(center * aspect, vec2(0.5, 0.15), uv * aspect);\\n  shape = max(shape - distortion, 0.0);\\n  \\n  float t = 1.0 - smoothstep(0.0, 0.1, shape);\\n  vec3 color = vec3(1.5, 1.0, 0.25) * t * (distortion + 0.6);\\n  \\n  gl_FragColor = vec4(color * color, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":66,"slug":"cellular-noise","moduleId":8,"name":"Cellular Noise","order":12,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":66,"slug":"cellular-noise","moduleId":8,"name":"Cellular Noise","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"float m_dist = 1.0;\\n  \\n  for (int i = 0; i < 9; i++) {\\n    float dist = distance(uv, getPoint(i));\\n    m_dist = min(m_dist, dist);\\n  }\\n  \\n  gl_FragColor = vec4(0.0, m_dist * 2.25, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec2 points[9];\\n\\nvoid init() {\\n  points[0] = vec2(0.05,0.15);\\n  points[1] = vec2(0.35,0.27);\\n  points[2] = vec2(0.78,0.04);\\n  \\n  points[3] =  vec2(0.25,0.46);\\n  points[4] = vec2(0.50,0.55);\\n  points[5] = vec2(0.91,0.37);\\n  \\n  points[6] = vec2(0.28,0.67);\\n  points[7] =  vec2(0.53,0.76);\\n  points[8] = vec2(0.73,0.75); \\n}\\n\\nvec2 getPoint(int index) {\\n  return sin(points[index] * 6.28 + iTime / 3.0) * 0.5 + 0.5;\\n}\\n\\nvoid main() {\\n  init();\\n  \\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  float m_dist = 1.0;\\n  \\n  gl_FragColor = vec4(0.0, m_dist * 2.25, 0.0, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Cellular Noise is based on distance fields, the distance to the closest one of a set of feature points.\\n\\n### Task\\nIterate through all the points, compute their distances to the current pixel and store the value for the one that is closest. Use the resulting distance as the green output channel.","hints":[],"restrictions":[],"order":12,"cost":10,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec2 points[9];\\n\\nvoid init() {\\n  points[0] = vec2(0.05,0.15);\\n  points[1] = vec2(0.35,0.27);\\n  points[2] = vec2(0.78,0.04);\\n  \\n  points[3] =  vec2(0.25,0.46);\\n  points[4] = vec2(0.50,0.55);\\n  points[5] = vec2(0.91,0.37);\\n  \\n  points[6] = vec2(0.28,0.67);\\n  points[7] =  vec2(0.53,0.76);\\n  points[8] = vec2(0.73,0.75); \\n}\\n\\nvec2 getPoint(int index) {\\n  return sin(points[index] * 6.28 + iTime / 3.0) * 0.5 + 0.5;\\n}\\n\\nvoid main() {\\n  init();\\n  \\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  float m_dist = 1.0;\\n  \\n  gl_FragColor = vec4(0.0, m_dist * 2.25, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec2 points[9];\\n\\nvoid init() {\\n  points[0] = vec2(0.05,0.15);\\n  points[1] = vec2(0.35,0.27);\\n  points[2] = vec2(0.78,0.04);\\n  \\n  points[3] =  vec2(0.25,0.46);\\n  points[4] = vec2(0.50,0.55);\\n  points[5] = vec2(0.91,0.37);\\n  \\n  points[6] = vec2(0.28,0.67);\\n  points[7] =  vec2(0.53,0.76);\\n  points[8] = vec2(0.73,0.75); \\n}\\n\\nvec2 getPoint(int index) {\\n  return sin(points[index] * 6.28 + iTime / 3.0) * 0.5 + 0.5;\\n}\\n\\nvoid main() {\\n  init();\\n  \\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  float m_dist = 1.0;\\n  \\n  gl_FragColor = vec4(0.0, m_dist * 2.25, 0.0, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":67,"slug":"tiling","moduleId":8,"name":"Tiling","order":14,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":67,"slug":"tiling","moduleId":8,"name":"Tiling","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec2 points[100];\\n\\nvoid init() {\\n  for (int i = 0; i < 100; i++) {\\n    points[i] = vec2(sin(float(i)), cos(float(i)));  \\n  }\\n}\\n\\nvec2 getPoint(int index) {\\n  return sin(iTime + points[index] * 6.28) * 0.5 + 0.5;\\n}\\n\\nvoid main() {\\n  init();\\n  \\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  uv *= 10.0;\\n  vec2 uv_i = floor(uv);\\n  \\n  float m_dist = 1.0;\\n  \\n  for (int y= -1; y <= 1; y++) {\\n    for (int x= -1; x <= 1; x++) {\\n      float index_f = uv_i.x + uv_i.y * 10.0 + float(x) + float(y) * 10.0;\\n      index_f = mod(index_f + 100.0, 100.0);\\n      int index = int(index_f);\\n      \\n      vec2 point = getPoint(index) ; \\n      point = point + vec2(float(x), float(y)) + uv_i;\\n      \\n      float dist = distance(uv, point);\\n      m_dist = min(m_dist, dist);\\n    }\\n  }\\n\\n  gl_FragColor = vec4(0.0, m_dist, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec2 points[100];\\n\\nvoid init() {\\n  for (int i = 0; i < 100; i++) {\\n    points[i] = vec2(sin(float(i)), cos(float(i)));  \\n  }\\n}\\n\\nvec2 getPoint(int index) {\\n  return sin(iTime + points[index] * 6.28) * 0.5 + 0.5;\\n}\\n\\nvoid main() {\\n  init();\\n  \\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Iterating through a lot of instances reduces the performance of your shader significantly. To get around this problem, we can divide the space into tiles. As a result, each pixel only needs to check nine positions: its own cell point and points in 8 cells around it.\\n\\n### Task\\nSubdivide the screen into 100 tiles. For each pixel calculate the distance to the point in their own tile and the surrounding 8 tiles. Store the closest distance. Use the resulting distance as the green output channel.","hints":[],"restrictions":[],"order":14,"cost":10,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec2 points[100];\\n\\nvoid init() {\\n  for (int i = 0; i < 100; i++) {\\n    points[i] = vec2(sin(float(i)), cos(float(i)));  \\n  }\\n}\\n\\nvec2 getPoint(int index) {\\n  return sin(iTime + points[index] * 6.28) * 0.5 + 0.5;\\n}\\n\\nvoid main() {\\n  init();\\n  \\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec2 points[100];\\n\\nvoid init() {\\n  for (int i = 0; i < 100; i++) {\\n    points[i] = vec2(sin(float(i)), cos(float(i)));  \\n  }\\n}\\n\\nvec2 getPoint(int index) {\\n  return sin(iTime + points[index] * 6.28) * 0.5 + 0.5;\\n}\\n\\nvoid main() {\\n  init();\\n  \\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":68,"slug":"sine-wave","moduleId":8,"name":"Sine Wave","order":15,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":68,"slug":"sine-wave","moduleId":8,"name":"Sine Wave","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nfloat sinPlot(float x) {\\n  float _x = (iResolution.x * 0.5 - x) / 20.0;\\n  float _y =sin(_x) * 0.05 * iResolution.y;\\n  return _y;\\n}\\n\\nfloat fbm(float x) {\\n  return sinPlot(x * 2.0 - iTime * 100.0) * 5.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float y =  iResolution.y * 0.5 - fbm(gl_FragCoord.x);\\n  float dx = dFdx(y);\\n  \\n  float stroke = 3.0;\\n  float t = smoothstep(0.0, stroke * max(1.0, abs(dx)), abs(gl_FragCoord.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nfloat sinPlot(float x) {\\n  float _x = (iResolution.x * 0.5 - x) / 20.0;\\n  float _y =sin(_x) * 0.05 * iResolution.y;\\n  return _y;\\n}\\n\\nfloat fbm(float x) {\\n  return sinPlot(x);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float y =  iResolution.y * 0.5 - fbm(gl_FragCoord.x);\\n  float dx = dFdx(y);\\n  \\n  float stroke = 3.0;\\n  float t = smoothstep(0.0, stroke * max(1.0, abs(dx)), abs(gl_FragCoord.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"General form:\\n\\n```\\ny(x, t) = A * sin(x * F + W * t)\\n```\\n**A** - amplitude is the peak deviation of the function from zero. **F** - frequency controls the number of oscillations (cycles). **W** - linear speed (speed of propagation) of wave.\\n\\n### Task\\nFind the `fbm` method. Change the frequency of the sine plot by 2 times and the amplitude by 5. Add wave propagation with 100.0 speed.","hints":[],"restrictions":[],"order":15,"cost":5,"threshold":99,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":5,"animationStepTime":100,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nfloat sinPlot(float x) {\\n  float _x = (iResolution.x * 0.5 - x) / 20.0;\\n  float _y =sin(_x) * 0.05 * iResolution.y;\\n  return _y;\\n}\\n\\nfloat fbm(float x) {\\n  return sinPlot(x);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float y =  iResolution.y * 0.5 - fbm(gl_FragCoord.x);\\n  float dx = dFdx(y);\\n  \\n  float stroke = 3.0;\\n  float t = smoothstep(0.0, stroke * max(1.0, abs(dx)), abs(gl_FragCoord.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nfloat sinPlot(float x) {\\n  float _x = (iResolution.x * 0.5 - x) / 20.0;\\n  float _y =sin(_x) * 0.05 * iResolution.y;\\n  return _y;\\n}\\n\\nfloat fbm(float x) {\\n  return sinPlot(x);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float y =  iResolution.y * 0.5 - fbm(gl_FragCoord.x);\\n  float dx = dFdx(y);\\n  \\n  float stroke = 3.0;\\n  float t = smoothstep(0.0, stroke * max(1.0, abs(dx)), abs(gl_FragCoord.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":69,"slug":"wave-superposition","moduleId":8,"name":"Wave Superposition","order":16,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":69,"slug":"wave-superposition","moduleId":8,"name":"Wave Superposition","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nfloat sinPlot(float x) {\\n  float _x = (iResolution.x * 0.5 - x)* 0.05;\\n  float _y =sin(_x) * 0.05 * iResolution.y;\\n  return _y;\\n}\\n\\nfloat fbm(float x) {\\n  float t = 0.0;\\n  for (int i = 1; i <= 4; i *= 2) {\\n    float frequency = 1.0 / float(i);\\n    float amplitude = 1.0 * float(i);\\n    t += sinPlot(x * frequency - iTime * 100.0) * amplitude;\\n  }\\n  \\n  return t;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float y = iResolution.y * 0.5 - fbm(gl_FragCoord.x);\\n    \\n  float dx =dFdx(y);\\n  \\n  float stroke = 3.0;\\n  float t = smoothstep(0.0, stroke * max(1.0, abs(dx)), abs(gl_FragCoord.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nfloat sinPlot(float x) {\\n  float _x = (iResolution.x * 0.5 - x)* 0.05;\\n  float _y =sin(_x) * 0.05 * iResolution.y;\\n  return _y;\\n}\\n\\nfloat fbm(float x) {\\n  return sinPlot(x - iTime * 100.0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float y = iResolution.y * 0.5 - fbm(gl_FragCoord.x);\\n    \\n  float dx =dFdx(y);\\n  \\n  float stroke = 3.0;\\n  float t = smoothstep(0.0, stroke * max(1.0, abs(dx)), abs(gl_FragCoord.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Superposition is the ability of waves to add up. The resulting wave displacement may be written as:\\n\\n```\\ny(x, t) = A1 * sin(F1 * x + W1 * t) + ... + An * sin(Fn * x + Wn * t)\\n```\\n\\n### Task\\nFind the `fbm` method. Try to combine three sine waves with the following parameters:\\n1. Amplitude 1.0, Frequency 1.0\\n2. Amplitude 2.0, Frequency 0.5\\n3. Amplitude 4.0, Frequency 0.25\\n","hints":[],"restrictions":[],"order":16,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":5,"animationStepTime":500,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nfloat sinPlot(float x) {\\n  float _x = (iResolution.x * 0.5 - x)* 0.05;\\n  float _y =sin(_x) * 0.05 * iResolution.y;\\n  return _y;\\n}\\n\\nfloat fbm(float x) {\\n  return sinPlot(x - iTime * 100.0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float y = iResolution.y * 0.5 - fbm(gl_FragCoord.x);\\n    \\n  float dx =dFdx(y);\\n  \\n  float stroke = 3.0;\\n  float t = smoothstep(0.0, stroke * max(1.0, abs(dx)), abs(gl_FragCoord.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nfloat sinPlot(float x) {\\n  float _x = (iResolution.x * 0.5 - x)* 0.05;\\n  float _y =sin(_x) * 0.05 * iResolution.y;\\n  return _y;\\n}\\n\\nfloat fbm(float x) {\\n  return sinPlot(x - iTime * 100.0);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float y = iResolution.y * 0.5 - fbm(gl_FragCoord.x);\\n    \\n  float dx =dFdx(y);\\n  \\n  float stroke = 3.0;\\n  float t = smoothstep(0.0, stroke * max(1.0, abs(dx)), abs(gl_FragCoord.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":70,"slug":"fbm","moduleId":8,"name":"FBM","order":17,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":70,"slug":"fbm","moduleId":8,"name":"FBM","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nfloat fbm(float x) {\\n  const int octaves = 30;\\n  float lacunarity = 2.0;\\n  float gain = 0.5;\\n  \\n  float amplitude = 0.5;\\n  float frequency = 6.28;\\n  \\n  float y = 0.0;\\n  for (int i = 0; i < octaves; i++) {\\n    y += amplitude * sin(frequency * x);\\n    frequency *= lacunarity;\\n    amplitude *= gain;\\n  }\\n  \\n  return y;\\n}\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float z = 33.0 + (sin(iTime * 0.25) * 8000.0 + 8000.0);\\n  float center = 0.5;\\n  float x = (uv.x - center) / z + center + 0.049201;\\n  float y = (fbm(x) - 0.123436) * z + 0.5;\\n  \\n  float stroke = 5.0;\\n  float t = step(stroke / iResolution.y, abs(uv.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nbool animate = false;\\n\\nfloat fbm(float x) { \\n  float amplitude = 0.5;\\n  float frequency = 6.28;\\n  \\n  return amplitude * sin(frequency * x);\\n}\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float z = 1.0;\\n  float center = 0.5;\\n  float x = 0.0;\\n  float y = 0.0;\\n  \\n  if (animate) {\\n    z = 33.0 + (sin(iTime * 0.25) * 8000.0 + 8000.0);\\n    x = (uv.x - center) / z + center + 0.049201;\\n    y = (fbm(x) - 0.123436) * z + 0.5;\\n  } else {\\n    x = (uv.x - center) / z + center;\\n    y = fbm(x) * z + 0.5;\\n  }\\n  \\n  float stroke = 5.0;\\n  float t = step(stroke / iResolution.y, abs(uv.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"By adding different iterations of sine waves (**octaves**), where we increase the frequencies step by step (multiply by **lacunarity**) and decrease the amplitude (multiply by **gain**) of the wave, we can achieve finer detail in the result. This technique is called **fractal Brownian motion** (fBM) or simply **fractal noise**.\\n\\n<br>\\n\\nIf we zoom the curve, the smaller part will look about the same as the whole wave. Theoretically, we will get a real mathematical fractal if we add an infinite number of wave components\\n\\n### Task\\nFind the `fbm` method in the code. Try iteratively combining 30 sine waves. With each iteration, increase the frequency of the wave by 2 times, decrease the amplitude by 2 times. After that, find the `animate` flag in the code and switch it to true.","hints":[],"restrictions":[],"order":17,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":2000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nbool animate = false;\\n\\nfloat fbm(float x) { \\n  float amplitude = 0.5;\\n  float frequency = 6.28;\\n  \\n  return amplitude * sin(frequency * x);\\n}\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float z = 1.0;\\n  float center = 0.5;\\n  float x = 0.0;\\n  float y = 0.0;\\n  \\n  if (animate) {\\n    z = 33.0 + (sin(iTime * 0.25) * 8000.0 + 8000.0);\\n    x = (uv.x - center) / z + center + 0.049201;\\n    y = (fbm(x) - 0.123436) * z + 0.5;\\n  } else {\\n    x = (uv.x - center) / z + center;\\n    y = fbm(x) * z + 0.5;\\n  }\\n  \\n  float stroke = 5.0;\\n  float t = step(stroke / iResolution.y, abs(uv.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nbool animate = false;\\n\\nfloat fbm(float x) { \\n  float amplitude = 0.5;\\n  float frequency = 6.28;\\n  \\n  return amplitude * sin(frequency * x);\\n}\\n\\nfloat grid(float size) {\\n  vec2 center = iResolution.xy * 0.5;\\n  vec2 dist = abs(center - gl_FragCoord.xy);\\n  vec2 posInCell = fract(dist / size);\\n  \\n  float stroke = 1.0 / size;\\n  float t = step(stroke, posInCell.x);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.x);\\n  t *= step(stroke, posInCell.y);\\n  t *= 1.0 - step(1.0 - stroke, posInCell.y);\\n   \\n  return 1.0 - t;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float smallGrid = grid(20.0);\\n  float bigGrid = grid(80.0);\\n  \\n  vec3 color = vec3(1.0);\\n  color = mix(color, vec3(0.9, 0.9, 0.9), smallGrid);\\n  color = mix(color, vec3(0.75, 0.75, 0.75), bigGrid);\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.x, abs(uv.x - 0.5)));\\n  color = mix(vec3(0.0, 0.0, 0.0), color, step(1.0 / iResolution.y, abs(uv.y - 0.5)));\\n  \\n  float z = 1.0;\\n  float center = 0.5;\\n  float x = 0.0;\\n  float y = 0.0;\\n  \\n  if (animate) {\\n    z = 33.0 + (sin(iTime * 0.25) * 8000.0 + 8000.0);\\n    x = (uv.x - center) / z + center + 0.049201;\\n    y = (fbm(x) - 0.123436) * z + 0.5;\\n  } else {\\n    x = (uv.x - center) / z + center;\\n    y = fbm(x) * z + 0.5;\\n  }\\n  \\n  float stroke = 5.0;\\n  float t = step(stroke / iResolution.y, abs(uv.y - y));\\n  color = mix(vec3(1.0, 0.0, 0.0), color, t);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":80,"slug":"fractal-noise","moduleId":8,"name":"Fractal noise","order":18,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":80,"slug":"fractal-noise","moduleId":8,"name":"Fractal noise","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat fbm(vec3 st) { \\n  const int octaves = 5;\\n  float lacunarity = 2.0;\\n  float gain = 0.5;\\n  \\n  float amplitude = 1.0;\\n  float frequency = 1.0;\\n  \\n  float y = 0.0;\\n  for (int i = 0; i < octaves; i++) {\\n    y += amplitude * noise(frequency * st);\\n    frequency *= lacunarity;\\n    amplitude *= gain;\\n  }\\n  \\n  return y;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = fbm(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat fbm(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = fbm(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"So let\'s now try to generate 2D fractal noise using the FBM function from the previous lesson, but instead of the sine, we will use the gradient noise as an octave.\\n\\n### Task\\nFind the `fbm` method declaration and implement its body. Use the following configurations: initial *amplitude* and *frequency* - `1.0`, *octaves* - `5`, *lacunarity* - `2.0`, *gain* - `0.5`.","hints":[],"restrictions":[],"order":18,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat fbm(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = fbm(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat fbm(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = fbm(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  noiseValue = noiseValue * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":81,"slug":"turbulence","moduleId":8,"name":"Turbulence","order":19,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":81,"slug":"turbulence","moduleId":8,"name":"Turbulence","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat turbulence(vec3 st) { \\n  const int octaves = 5;\\n  float lacunarity = 2.0;\\n  float gain = 0.5;\\n  \\n  float amplitude = 1.0;\\n  float frequency = 1.0;\\n  \\n  float y = 0.0;\\n  for (int i = 0; i < octaves; i++) {\\n    y += amplitude * abs(noise(frequency * st));\\n    frequency *= lacunarity;\\n    amplitude *= gain;\\n  }\\n  \\n  return y;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = turbulence(vec3(uv * ratio * 2.0 , iTime * 0.1));\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat turbulence(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = turbulence(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"Turbulence is a function built on the same principle as the fractal Brownian motion. However, instead of using the noise function directly for each layer, we will use the absolute value of the signed noise.\\n\\n<br>\\n\\nThis technique with a 2D noise can produce patterns suitable to simulate fire, smoke, or clouds.\\n\\n### Task\\nFind the `turbulence` method declaration and implement its body. Use the following configurations: initial *amplitude* and *frequency* - `1.0`, *octaves* - `5`, *lacunarity* - `2.0`, *gain* - `0.5`.","hints":[],"restrictions":[],"order":19,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat turbulence(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = turbulence(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat turbulence(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = turbulence(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":113,"slug":"marble-texture","moduleId":8,"name":"Marble Texture","order":22,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":113,"slug":"marble-texture","moduleId":8,"name":"Marble Texture","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat turbulence(vec3 st) { \\n  const int octaves = 5;\\n  float lacunarity = 2.0;\\n  float gain = 0.5;\\n  \\n  float amplitude = 1.0;\\n  float frequency = 1.0;\\n  \\n  float y = 0.0;\\n  for (int i = 0; i < octaves; i++) {\\n    y += amplitude * abs(noise(frequency * st));\\n    frequency *= lacunarity;\\n    amplitude *= gain;\\n  }\\n  \\n  return y;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = turbulence(vec3(uv * ratio , iTime * 0.1));\\n  \\n  float t = (uv.x + noiseValue * 0.25) * 6.28 * 4.0;\\n  float result = sin(t) * 0.5 + 0.5;\\n  \\n  gl_FragColor = vec4(vec3(result), 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat turbulence(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = turbulence(vec3(uv * ratio , iTime * 0.1));\\n  \\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"A marble texture can be created by distorting the phase of some periodic function with a noise or a fractal sum.\\n\\n### Task\\nLet\'s shift the phase of the sine with the turbulence noise. \\n\\n<br>\\n\\nUse the following configurations for the turbulence noise: initial *amplitude* and *frequency* - `1.0`, *octaves* - `5`, *lacunarity* - `2.0`, *gain* - `0.5`.\\n\\n<br>\\n\\nDisplay 4 periods of the sine wave using the x-coordinate as an argument, but shift it using the noise value with a multiplier of `0.25`.","hints":[],"restrictions":[],"order":22,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat turbulence(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = turbulence(vec3(uv * ratio , iTime * 0.1));\\n  \\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat turbulence(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = turbulence(vec3(uv * ratio , iTime * 0.1));\\n  \\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":75,"slug":"ridget","moduleId":8,"name":"Ridget","order":23,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":75,"slug":"ridget","moduleId":8,"name":"Ridget","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat ridge(float h) {\\n  h = abs(h);\\n  h = 1.0 - h;\\n  h = h * h;\\n  return h;\\n}\\n\\nfloat ridget(vec3 st) { \\n  const int octaves = 5;\\n  float lacunarity = 2.0;\\n  float gain = 0.5;\\n  \\n  float amplitude = 1.0;\\n  float frequency = 1.0;\\n  \\n  float y = 0.0;\\n  float normalization = 0.0;\\n  for (int i = 0; i < octaves; i++) {\\n    y += amplitude * ridge(noise(frequency * st));\\n    normalization += amplitude;\\n    frequency *= lacunarity;\\n    amplitude *= gain;\\n  }\\n  \\n  return y / normalization;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = ridget(vec3(uv * ratio * 2.0, iTime * 0.1));\\n\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat ridget(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = ridget(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"The algorithm for generating ridged fractal noise involves iterating over multiple octaves of noise, each with increasing frequency and decreasing amplitude. At each octave, the noise is modified by taking the absolute value and subtracting it from one, which creates sharp ridges in the output. The resulting noise values are then multiplied by the current amplitude and added to a running total. The maximum possible value is also tracked to normalize the final output. Finally, the total is divided by the maximum possible value to adjust the range of the output values.\\n\\n### Task\\nFind the `ridget` method declaration and implement its body. Use the following configurations: initial *amplitude* and *frequency* - `1.0`, *octaves* - `5`, *lacunarity* - `2.0`, *gain* - `0.5`.","hints":[],"restrictions":[],"order":23,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat ridget(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = ridget(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 random3(vec3 point){\\n  float d1 = dot(point, vec3(12.3, 32.1, 21.3));\\n  float d2 = dot(point, vec3(45.6, 65.4, 54.6));\\n  float d3 = dot(point, vec3(78.9, 98.7, 87.9));\\n  \\n  point = vec3(d1, d2, d3);\\n  return fract(sin(point) * 14.7) * 2.0 - 1.0;\\n}\\n\\nfloat noise(vec3 st) {\\n  vec3 i = floor(st);\\n  vec3 f = fract(st);\\n\\n  vec3 u = smoothstep(0.0, 1.0, f);\\n  \\n  float d1 = dot(random3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));\\n  float d2 = dot(random3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));\\n  float d3 = dot(random3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));\\n  float d4 = dot(random3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));\\n  \\n  float d5 = dot(random3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));\\n  float d6 = dot(random3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));\\n  float d7 = dot(random3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));\\n  float d8 = dot(random3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));\\n  \\n  float m1 = mix(mix(d1, d2, u.x), mix(d3, d4, u.x), u.y);\\n  float m2 = mix(mix(d5, d6, u.x), mix(d7, d8, u.x), u.y);\\n  \\n  return mix(m1, m2, u.z);\\n}\\n\\nfloat ridget(vec3 st) { \\n  return 0.0;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\\n  \\n  float noiseValue = ridget(vec3(uv * ratio * 2.0, iTime * 0.1));\\n  gl_FragColor = vec4(vec3(noiseValue), 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for users who want to learn how to generate random values in shaders and explore various noise algorithms. You will study different types of noise and their applications in creating visual effects. Each topic includes theoretical material and practical tasks that can be completed directly on the website.","skillsDesc":"how to generate random values in shaders.<br>various noise algorithms, including value noise, gradient noise, FBM, turbulence, and ridged noise.<br>apply these noise algorithms to create realistic and complex visual effects.","importanceDesc":"Noise functions are essential for creating natural and complex visual effects in computer graphics. Understanding how to generate and manipulate noise allows developers to simulate a wide range of phenomena such as textures, terrains, clouds, and fire. Mastery of these techniques is crucial for advanced graphics applications in games, simulations, and visual effects.","certifiable":false,"images":["img-6.png","img-1.png","img-2.png","img-3.png","img-4.png","img-5.png"]}},{"id":10,"slug":"ray-tracing","name":"Ray Tracing","description":"Create highly realistic images by simulating the physical behavior of light.","tasks":5,"acceptedTasks":0,"isOpen":false,"order":8,"locked":false,"cover":true,"child":{"id":10,"slug":"ray-tracing","name":"Ray Tracing","description":"Create highly realistic images by simulating the physical behavior of light.","order":8,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":117,"slug":"ray","moduleId":10,"name":"Ray","order":0,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":117,"slug":"ray","moduleId":10,"name":"Ray","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 getRayOrigin() {\\n  // we move the ray origin around the circle\\n  // to create the animation.\\n  return vec3(cos(iTime) * 0.5, sin(iTime) * 0.5, 0.1);\\n}\\n\\nvoid main() {\\n  vec2 uv = vec2(gl_FragCoord.xy / iResolution);\\n  uv = uv * 2.0 - 1.0;\\n\\n  vec3 rayOrigin = getRayOrigin();\\n\\n  vec3 ratio = vec3(iResolution.x / iResolution.y, 1.0, 1.0);\\n  rayOrigin *= ratio;\\n  \\n  vec3 curPos = vec3(uv, 0.0) * ratio;\\n  vec3 rayDir = normalize(curPos - rayOrigin);\\n  float t = (rayOrigin.z) / abs(rayDir.z);\\n  \\n  float dist = length(rayDir.xyz * t);\\n  \\n  gl_FragColor = vec4(1.0 - dist, 0.0, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 getRayOrigin() {\\n  // we move the ray origin around the circle\\n  // to create the animation.\\n  return vec3(cos(iTime) * 0.5, sin(iTime) * 0.5, 0.1);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 rayOrigin = getRayOrigin();\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"A ray is a line having an origin point **O** and extending to infinity in a given direction **D**:\\n\\n<br>\\n\\n![](/files/ray.png)\\n\\n```\\nP(t) = O + D * t\\n```\\n\\nwhere **t** is allowed to be greater than or equal to zero.\\n\\n\\n### Task\\nLet\'s assume that the lower left corner of the screen corresponds to `(-1.0, -1.0)` and the upper right corner is `(1.0, 1.0)`. The *z* coordinate is `0.0`:\\n\\n<br>\\n\\n![](/files/ray-screen.png)\\n\\n<br>\\n\\nA ray extends from the origin **O** to the point with coordinates of the current fragment:\\n\\n<br>\\n\\n![](/files/ray-to-fragment.png)\\n\\n<br>\\n\\nCalculate the length of the ray for each fragment and output the value as the red color channel. Consider the aspect ratio of the screen.","hints":[],"restrictions":[],"order":0,"cost":5,"threshold":98,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 getRayOrigin() {\\n  // we move the ray origin around the circle\\n  // to create the animation.\\n  return vec3(cos(iTime) * 0.5, sin(iTime) * 0.5, 0.1);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 rayOrigin = getRayOrigin();\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nvec3 getRayOrigin() {\\n  // we move the ray origin around the circle\\n  // to create the animation.\\n  return vec3(cos(iTime) * 0.5, sin(iTime) * 0.5, 0.1);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 rayOrigin = getRayOrigin();\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":116,"slug":"ray-plane-intersection","moduleId":10,"name":"Ray-plane intersection","order":1,"cost":20,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":116,"slug":"ray-plane-intersection","moduleId":10,"name":"Ray-plane intersection","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor = vec3(1.0, 0.3, 0.3);\\n\\nvec3 rotateY(vec3 position, float angle) {\\n  float x = +position.x * cos(angle) + position.z * sin(angle);\\n  float z = -position.x * sin(angle) + position.z * cos(angle);\\n  return vec3(x, position.y, z);\\n}\\n\\nvoid main() {\\n  vec2 uv = vec2(gl_FragCoord.xy / iResolution);\\n  uv = uv * 2.0 - 1.0;\\n  uv.x *= iResolution.x / iResolution.y;\\n  \\n  vec4 rayOrigin = vec4(0.0, 0.0, 2.0, 1.0);\\n  vec4 rayDir = vec4(normalize(vec3(uv, -1.0)), 0.0);\\n  \\n  vec3 N = normalize(rotateY(vec3(0.0, 0.0, 1.0), iTime));\\n  vec3 P = rotateY(vec3(-1.0, 1.0, 0.0), iTime);\\n\\n  float D = - dot(P, N);\\n  vec4 L = vec4(N, D);\\n  float t = - (dot(L, rayOrigin) / dot(L, rayDir));\\n  \\n  vec3 point = rayOrigin.xyz + rayDir.xyz * t;\\n  point = rotateY(point, -iTime);\\n\\n  vec3 color = shapeColor;\\n  color *= step(-1.0, point.x);\\n  color *= 1.0 - step(1.0, point.x);\\n  color *= step(-1.0, point.y);\\n  color *= 1.0 - step(1.0, point.y);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor = vec3(1.0, 0.3, 0.3);\\n\\nvec3 rotateY(vec3 position, float angle) {\\n  float x = +position.x * cos(angle) + position.z * sin(angle);\\n  float z = -position.x * sin(angle) + position.z * cos(angle);\\n  return vec3(x, position.y, z);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 rayOrigin = vec3(0.0, 0.0, 2.0);\\n\\n  // Plane normal\\n  vec3 N = normalize(rotateY(vec3(0.0, 0.0, 1.0), iTime));\\n  \\n  // Point on the plane\\n  vec3 P = rotateY(vec3(-1.0, 1.0, 0.0), iTime);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"Given a 3D point **P** and a normal vector **N**, the plane passing through the point **P** and perpendicular to the direction **N** can be defined as the set of points **Q** \\n\\n<br>\\n\\n![](/files/ray-plane-intersection-plane.png)\\n\\n<br>\\n\\nsuch that: \\n\\n```\\nN * (Q - P) = 0\\n```\\n\\nWe can find the point where the ray intersects the plane\\n\\n<br>\\n\\n![](/files/ray-plane-intersection-ray.png)\\n\\n<br>\\n\\nby solving the equation:\\n\\n```\\nN * (P(t) - P) = 0\\n```\\n\\n### Task\\nLet\'s assume that the lower left corner of the screen corresponds to the (-1.0, -1.0), the upper right is (1.0, 1.0). The *z* coordinate is 1. And there is a ray from the `rayOrigin` to the point with coordinates of the current fragment:\\n\\n<br>\\n\\n![](/files/ray-plane-intersection-task.png)\\n\\n<br>\\n\\nGiven a plane defined by the point `P` and the normal vector `N`.\\n\\n<br>\\n\\nCalculate the point of the ray-plane intersection (take into account the aspect ratio). Display only that part of the plane that is within -1 and 1 on the X and Y axes in the plane space. \\n\\n<br>\\n\\n**Hint**: After you find the point where the ray intersects the plane in world space, you will need to translate its position to the local plane space. To do this, apply to the point the inverse transformation that was applied to the plane. In this task we only rotate the plane along the Y axis.","hints":[],"restrictions":[],"order":1,"cost":20,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":6,"animationStepTime":1000,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor = vec3(1.0, 0.3, 0.3);\\n\\nvec3 rotateY(vec3 position, float angle) {\\n  float x = +position.x * cos(angle) + position.z * sin(angle);\\n  float z = -position.x * sin(angle) + position.z * cos(angle);\\n  return vec3(x, position.y, z);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 rayOrigin = vec3(0.0, 0.0, 2.0);\\n\\n  // Plane normal\\n  vec3 N = normalize(rotateY(vec3(0.0, 0.0, 1.0), iTime));\\n  \\n  // Point on the plane\\n  vec3 P = rotateY(vec3(-1.0, 1.0, 0.0), iTime);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec3 shapeColor = vec3(1.0, 0.3, 0.3);\\n\\nvec3 rotateY(vec3 position, float angle) {\\n  float x = +position.x * cos(angle) + position.z * sin(angle);\\n  float z = -position.x * sin(angle) + position.z * cos(angle);\\n  return vec3(x, position.y, z);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec3 rayOrigin = vec3(0.0, 0.0, 2.0);\\n\\n  // Plane normal\\n  vec3 N = normalize(rotateY(vec3(0.0, 0.0, 1.0), iTime));\\n  \\n  // Point on the plane\\n  vec3 P = rotateY(vec3(-1.0, 1.0, 0.0), iTime);\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":114,"slug":"barycentric-coordinates","moduleId":10,"name":"Barycentric coordinates","order":2,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":114,"slug":"barycentric-coordinates","moduleId":10,"name":"Barycentric coordinates","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvoid main() {\\n  vec3 P = vec3(gl_FragCoord.xy / iResolution, 1.0);\\n  \\n  vec3 P0 = vec3(0.25, 0.25, 1.0);\\n  vec3 P1 = vec3(0.50, 0.75, 1.0);\\n  vec3 P2 = vec3(0.75, 0.25, 1.0);\\n  \\t\\t\\n  mat3 m = mat3(P0, P1, P2);\\n  \\n  vec3 w = inverse(m) * P;\\n  float w_sum = w.x + w.y + w.z;\\n  \\n  vec3 color = vec3(1.0, 0.0, 0.0);\\n  color *= (1.0 - step(1.0 + c_Epsilon, w_sum)) * step(c_Epsilon, w_sum);\\n  color *= step(0.0, w.x);\\n  color *= step(0.0, w.y);\\n  color *= step(0.0, w.z);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvoid main() {\\n  vec3 P = vec3(gl_FragCoord.xy / iResolution, 1.0);\\n  \\n  vec3 P0 = vec3(0.25, 0.25, 1.0);\\n  vec3 P1 = vec3(0.50, 0.75, 1.0);\\n  vec3 P2 = vec3(0.75, 0.25, 1.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"The *barycentric coordinates* represent a weighted average of the triangle\'s vertices and are expressed as the scalars *w0*, *w1*, *w2* such that:\\n\\n```\\nP = (w0 * P0) + (w1 * P1) + (w2 * P2)\\n```\\n\\nWe can rewrite the first equation as a matrix equation:\\n\\n```\\n[ P0.x P1.x P2.x ] [ w0 ]   [ P.x ]\\n[ P0.y P1.y P2.y ] [ w1 ] = [ P.y ]\\n[ P0.z P1.z P2.z ] [ w2 ]   [ P.z ]\\n```\\n\\nWe can solve for *w0*, *w1*, and *w2* using matrix inversion:\\n\\n```\\n[ w0 ]          [[ P0.x P1.x P2.x ]] [ P.x ]\\n[ w1 ] = inverse[[ P0.y P1.y P2.y ]] [ P.y ]\\n[ w2 ]          [[ P0.z P1.z P2.z ]] [ P.z ]\\n```\\nThe point **P** lies inside the triangle if and only if all three weights are non-negative and their sum is 1.\\n\\n### Task\\nFor each fragment on the screen, determine whether it lies inside a triangle defined by three vertices:\\n\\n```\\nP0 = (0.25, 0.25, 1.0);\\nP1 = (0.50, 0.75, 1.0);\\nP2 = (0.75, 0.25, 1.0);\\n```\\n\\nIf the fragment is inside the triangle, paint it red. Use 1.0 value for *z* coordinate and `c_Epsilon` constant for value comparisons.","hints":[],"restrictions":[],"order":2,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvoid main() {\\n  vec3 P = vec3(gl_FragCoord.xy / iResolution, 1.0);\\n  \\n  vec3 P0 = vec3(0.25, 0.25, 1.0);\\n  vec3 P1 = vec3(0.50, 0.75, 1.0);\\n  vec3 P2 = vec3(0.75, 0.25, 1.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvoid main() {\\n  vec3 P = vec3(gl_FragCoord.xy / iResolution, 1.0);\\n  \\n  vec3 P0 = vec3(0.25, 0.25, 1.0);\\n  vec3 P1 = vec3(0.50, 0.75, 1.0);\\n  vec3 P2 = vec3(0.75, 0.25, 1.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":115,"slug":"interpolation-in-barycentric-coordinates","moduleId":10,"name":"Interpolation in barycentric coordinates","order":3,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":115,"slug":"interpolation-in-barycentric-coordinates","moduleId":10,"name":"Interpolation in barycentric coordinates","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvoid main() {\\n  vec3 P = vec3(gl_FragCoord.xy / iResolution, 1.0);\\n  \\n  vec3 P1 = vec3(0.25, 0.25, 1.0);\\n  vec3 P2 = vec3(0.50, 0.75, 1.0);\\n  vec3 P3 = vec3(0.75, 0.25, 1.0);\\n  \\n  vec3 C1 = vec3(1.0, 0.0, 0.0);\\n  vec3 C2 = vec3(0.0, 1.0, 0.0);\\n  vec3 C3 = vec3(0.0, 0.0, 1.0);\\n  \\t\\t\\n  mat3 m = mat3(P1, P2, P3);\\n  \\n  vec3 w = inverse(m) * P;\\n  float w_sum = w.x + w.y + w.z;\\n  \\n  vec3 color = C1 * w.x + C2 * w.y + C3 * w.z;\\n  \\n  color *= (1.0 - step(1.0 + c_Epsilon, w_sum)) * step(c_Epsilon, w_sum);\\n  color *= step(0.0, w.x);\\n  color *= step(0.0, w.y);\\n  color *= step(0.0, w.z);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvoid main() {\\n  vec3 P = vec3(gl_FragCoord.xy / iResolution, 1.0);\\n  \\n  vec3 P1 = vec3(0.25, 0.25, 1.0);\\n  vec3 P2 = vec3(0.50, 0.75, 1.0);\\n  vec3 P3 = vec3(0.75, 0.25, 1.0);\\n  \\n  vec3 C1 = vec3(1.0, 0.0, 0.0);\\n  vec3 C2 = vec3(0.0, 1.0, 0.0);\\n  vec3 C3 = vec3(0.0, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"### Task\\nThe triangle is defined by three vertices:\\n\\n```\\nP0 = (0.25, 0.25, 1.0);\\nP1 = (0.50, 0.75, 1.0);\\nP2 = (0.75, 0.25, 1.0);\\n```\\n\\nEach vertex of the triangle has a specific color:\\n\\n```\\nvec3 C1 = vec3(1.0, 0.0, 0.0);\\nvec3 C2 = vec3(0.0, 1.0, 0.0);\\nvec3 C3 = vec3(0.0, 0.0, 1.0);\\n```\\n\\nUsing barycentric weights, interpolate the color over the entire area of the triangle.","hints":[],"restrictions":[],"order":3,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvoid main() {\\n  vec3 P = vec3(gl_FragCoord.xy / iResolution, 1.0);\\n  \\n  vec3 P1 = vec3(0.25, 0.25, 1.0);\\n  vec3 P2 = vec3(0.50, 0.75, 1.0);\\n  vec3 P3 = vec3(0.75, 0.25, 1.0);\\n  \\n  vec3 C1 = vec3(1.0, 0.0, 0.0);\\n  vec3 C2 = vec3(0.0, 1.0, 0.0);\\n  vec3 C3 = vec3(0.0, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvoid main() {\\n  vec3 P = vec3(gl_FragCoord.xy / iResolution, 1.0);\\n  \\n  vec3 P1 = vec3(0.25, 0.25, 1.0);\\n  vec3 P2 = vec3(0.50, 0.75, 1.0);\\n  vec3 P3 = vec3(0.75, 0.25, 1.0);\\n  \\n  vec3 C1 = vec3(1.0, 0.0, 0.0);\\n  vec3 C2 = vec3(0.0, 1.0, 0.0);\\n  vec3 C3 = vec3(0.0, 0.0, 1.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":118,"slug":"ray-triangle-intersection","moduleId":10,"name":"Ray-triangle intersection","order":4,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":118,"slug":"ray-triangle-intersection","moduleId":10,"name":"Ray-triangle intersection","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvec3 rotateY(vec3 position)\\n{\\n  float angle = sin(iTime * 0.5) * 3.14;\\n  \\n  float x = position.x * cos(angle) + position.z * sin(angle);\\n  float z = -position.x * sin(angle) + position.z * cos(angle);\\n  \\n  return vec3(x, position.y, z);\\n}\\n\\nvoid main() {\\n  vec2 uv = vec2(gl_FragCoord.xy / iResolution);\\n  \\n  vec3 P0 = vec3(0.0, -1.0, -0.5) + rotateY(vec3(-0.5, 0.0, 0.0));\\n  vec3 P1 = vec3(0.0,  1.0, -0.5);\\n  vec3 P2 = vec3(0.0, -1.0, -0.5) + rotateY(vec3(0.5, 0.0, 0.0));\\n  \\n  vec4 RayOrigin = vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 RayDir = vec4(normalize(vec3(uv * 2.0 - 1.0, -1.0)), 0.0);\\n  \\n  vec3 N = cross(P1 - P0, P2 - P0);\\n  vec4 L = vec4(N, -dot(N, P1));\\n  float t = - (dot(L, RayOrigin) / dot(L, RayDir));\\n  \\n  vec3 P = RayOrigin.xyz + RayDir.xyz * t;\\n  float dist = abs(RayDir.z * t);\\n  \\t\\t\\n  mat3 m = mat3(P0, P1, P2);\\n  \\n  vec3 w = inverse(m) * P;\\n  float w_sum = w.x + w.y + w.z;\\n  \\n  vec3 color = vec3(2.0 - dist, 0.0, 0.0);\\n  color *= (1.0 - step(1.0 + c_Epsilon, w_sum)) * step(c_Epsilon, w_sum);\\n  color *= step(0.0, w.x);\\n  color *= step(0.0, w.y);\\n  color *= step(0.0, w.z);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvec3 rotateY(vec3 position)\\n{\\n  float angle = sin(iTime * 0.5) * 3.14;\\n  \\n  float x = position.x * cos(angle) + position.z * sin(angle);\\n  float z = -position.x * sin(angle) + position.z * cos(angle);\\n  \\n  return vec3(x, position.y, z);\\n}\\n\\nvoid main() {\\n  vec2 uv = vec2(gl_FragCoord.xy / iResolution);\\n  \\n  vec3 P0 = vec3(0.0, -1.0, -0.5) + rotateY(vec3(-0.5, 0.0, 0.0));\\n  vec3 P1 = vec3(0.0,  1.0, -0.5);\\n  vec3 P2 = vec3(0.0, -1.0, -0.5) + rotateY(vec3(0.5, 0.0, 0.0));\\n  \\n  vec4 RayOrigin = vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 RayDir = vec4(normalize(vec3(uv * 2.0 - 1.0, -1.0)), 0.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FFFFFF\\",\\"background\\":16777215}","description":"A triangle is described by three vertices **P0**, **P1**, **P2**. We determine the plane in which the triangle lies by calculating the normal vector **N**:\\n\\n```\\nN = (P1 - P0) X (P2 - P0)\\n```\\n\\nThe ray intersects the plane by solving the equation:\\n\\n```\\nN * (P(t) - P0) = 0\\n```\\n\\nNext, we need to determine whether the found intersection point lies inside the triangle using *barycentric coordinates*.\\n\\n### Task\\nLet\'s assume that the lower left corner of the screen corresponds to the *(-1.0, -1.0)*, the upper right is *(1.0, 1.0)*. The *z* coordinate is 0.\\n\\n<br>\\n\\nThere is a ray from the *(0.0, 0.0, 1.0)* to the point with coordinates of the current fragment.\\n\\n<br>\\n\\nFor each fragment on the screen, determine whether its ray intersects with a triangle defined by three vertices *P0*, *P1* and *P3*. Determine the possible values for the distance to the triangle, cast it to [0.0, 1.0] interval, and output the value  as the red color channel.","hints":[],"restrictions":[],"order":4,"cost":5,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvec3 rotateY(vec3 position)\\n{\\n  float angle = sin(iTime * 0.5) * 3.14;\\n  \\n  float x = position.x * cos(angle) + position.z * sin(angle);\\n  float z = -position.x * sin(angle) + position.z * cos(angle);\\n  \\n  return vec3(x, position.y, z);\\n}\\n\\nvoid main() {\\n  vec2 uv = vec2(gl_FragCoord.xy / iResolution);\\n  \\n  vec3 P0 = vec3(0.0, -1.0, -0.5) + rotateY(vec3(-0.5, 0.0, 0.0));\\n  vec3 P1 = vec3(0.0,  1.0, -0.5);\\n  vec3 P2 = vec3(0.0, -1.0, -0.5) + rotateY(vec3(0.5, 0.0, 0.0));\\n  \\n  vec4 RayOrigin = vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 RayDir = vec4(normalize(vec3(uv * 2.0 - 1.0, -1.0)), 0.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float c_Epsilon = 0.001;\\n\\nvec3 rotateY(vec3 position)\\n{\\n  float angle = sin(iTime * 0.5) * 3.14;\\n  \\n  float x = position.x * cos(angle) + position.z * sin(angle);\\n  float z = -position.x * sin(angle) + position.z * cos(angle);\\n  \\n  return vec3(x, position.y, z);\\n}\\n\\nvoid main() {\\n  vec2 uv = vec2(gl_FragCoord.xy / iResolution);\\n  \\n  vec3 P0 = vec3(0.0, -1.0, -0.5) + rotateY(vec3(-0.5, 0.0, 0.0));\\n  vec3 P1 = vec3(0.0,  1.0, -0.5);\\n  vec3 P2 = vec3(0.0, -1.0, -0.5) + rotateY(vec3(0.5, 0.0, 0.0));\\n  \\n  vec4 RayOrigin = vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 RayDir = vec4(normalize(vec3(uv * 2.0 - 1.0, -1.0)), 0.0);\\n  \\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for users who want to learn how to create highly realistic images by simulating the physical behavior of light. You will explore the principles of ray tracing, including how light interacts with surfaces to produce effects such reflections and refractions. Each topic includes theoretical material and practical tasks that can be completed directly on the website.","skillsDesc":"algorithms for detecting intersections between rays and surfaces<br>simulating how light bounces off surfaces and passes through transparent materials.<br>statistical methods for simulating complex lighting scenarios (Monte Carlo Methods).<br>techniques to remove noise from rendered images (Denoising).","importanceDesc":"Ray tracing is a powerful technique for generating photorealistic images in computer graphics. By accurately simulating the behavior of light, developers can create scenes with unparalleled realism.","certifiable":false,"images":[]}},{"id":4,"slug":"water","name":"Water","description":"Explore techniques for visualising realistic waves, reflections and refractions.","tasks":8,"acceptedTasks":0,"isOpen":false,"order":9,"locked":false,"cover":true,"child":{"id":4,"slug":"water","name":"Water","description":"Explore techniques for visualising realistic waves, reflections and refractions.","order":9,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":41,"slug":"distortion","moduleId":4,"name":"Distortion","order":0,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":41,"slug":"distortion","moduleId":4,"name":"Distortion","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 5.0;\\nconst float amplitude = 0.1;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  float distortion = sin(uv.x * PI * frequency + iTime) * amplitude;\\n  vec2 texCoords = vec2(uv.x, uv.y + distortion);\\n  \\n  vec3 color = texture(iChannel0, texCoords).rgb;\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 5.0;\\nconst float amplitude = 0.1;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Sine distortion is a technique used to create wave-like effects in graphics and animation. It involves applying a sinusoidal function to the coordinates of a texture, which results in a wavy, distorted appearance.\\n\\n<br>\\n\\nThe sine function has a period of 2π, which means that it repeats itself every 2π units. By multiplying the sine argument by a factor of 2π, we can create a wave pattern.\\n\\n<br>\\n\\nThe resulting formula for creating a wave distortion effect might look something like this:\\n\\n```\\ndistortion = amplitude * sin(2 * PI * distance * frequency)\\n```\\n\\nIn this formula, amplitude and frequency are variables that can be adjusted to control the intensity and number of the waves. Adding `iTime` to the sine period allows for the creation of wave animations that evolve over time.\\n\\n<br>\\n\\nTo create the distorted texture coordinates, you can just add the distortion value to the X or/and Y texture coordinates.\\n\\n\\n### Task\\nCreate a shader that animates vertical waves moving horizontally across an image. Implement the wave distortion by applying the sine function to the texture coordinates, using `amplitude` and `frequency` variables. To animate the waves over time, use the `iTime` value.","hints":[],"restrictions":[],"order":0,"cost":10,"threshold":95,"likes":7,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 5.0;\\nconst float amplitude = 0.1;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"\\nuniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 5.0;\\nconst float amplitude = 0.1;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":42,"slug":"circle-waves","moduleId":4,"name":"Circle Waves","order":1,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":42,"slug":"circle-waves","moduleId":4,"name":"Circle Waves","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 5.0;\\nconst float amplitude = 0.25;\\n\\nvec2 getDistortion(vec2 pos, vec2 origin) {\\n  float distanceToOrigin = distance(pos, origin);\\n  float t = distanceToOrigin * PI * frequency - iTime * 2.0;\\n  float distortion = sin(t) * amplitude;\\n  return vec2(distortion);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 distortion = getDistortion(uv, vec2(0.5));  \\n  vec2 texCoords = uv + distortion;\\n  vec3 color = texture(iChannel0, texCoords).rgb;\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 5.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To generate the circular wave distortion effect, we can leverage the pixel-to-center texture distance. By multiplying this distance value by 2π and subsequently passing it through the sine function, we can produce a wave pattern that varies in intensity based on the distance from the center.\\n\\n### Task\\nCreate a shader that animates circular waves emanating from the center of an image. Implement the wave distortion using the sine function with `amplitude` and `frequency` variables. To animate the waves over time, use `iTime` times 2 value.","hints":[],"restrictions":[],"order":1,"cost":10,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 5.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 5.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":46,"slug":"attenuation","moduleId":4,"name":"Attenuation","order":2,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":46,"slug":"attenuation","moduleId":4,"name":"Attenuation","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvec2 getDistortion(vec2 pos, vec2 origin) {\\n  float distanceToOrigin = distance(pos, origin);\\n  float A = mix(amplitude, 0.0, clamp(distanceToOrigin * 2.0, 0.0, 1.0));\\n  float t = distanceToOrigin * PI * frequency - iTime * 2.0;\\n  float distortion = sin(t) * A;\\n  return vec2(distortion);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 distortion = getDistortion(uv, vec2(0.5));   \\n  vec2 texCoords = uv + distortion;\\n  vec3 color = texture(iChannel0, texCoords).rgb;\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"Interpolation can be used to create an attenuation effect for circular waves emanating from the center of an image. This is achieved by calculating the distance of each pixel from the center point and using this distance to interpolate the amplitude value of the wave.\\n\\n### Task\\nCreate a shader that animates circular waves emanating from the center of an image, with an attenuation effect.\\n\\n<br>\\n\\nUse the sine function with `amplitude` and `frequency` variables to create the wave distortion. \\n\\n<br>\\n\\nThe amplitude of the waves should linearly decrease as they move further away from the center point. It should be 0 at a distance from the center equal to 0.5 and beyond.\\n\\n<br>\\n\\nTo animate the waves over time, multiply `iTime` by 2.\\n\\n\\n","hints":[],"restrictions":[],"order":2,"cost":10,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":43,"slug":"interference","moduleId":4,"name":"Interference","order":3,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":43,"slug":"interference","moduleId":4,"name":"Interference","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 16.0;\\nconst float amplitude = 0.25;\\n\\nvec2 getDistortion(vec2 pos, vec2 origin) {\\n  float distanceToOrigin = distance(pos, origin);\\n  float A = mix(amplitude, 0.0, clamp(distanceToOrigin * 2.0, 0.0, 1.0));\\n  float distortion = sin(distanceToOrigin * PI * frequency - iTime * 3.0) * A;\\n  return vec2(distortion);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 distortion = getDistortion(uv, vec2(0.3));\\n  distortion += getDistortion(uv, vec2(0.7));\\n    \\n  vec2 texCoords = uv + distortion;\\n  \\n  vec3 color = texture(iChannel0, texCoords).rgb;\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 16.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"implementing interference of circular waves using sine function involves generating waveforms for each wave, adding them together to obtain the resulting waveform, and visualizing the interference pattern.\\n\\n### Task \\nCreate a shader that animates circular waves with the attenuation effect coming from two sources at (0.3, 0.3) and (0.7, 0.7). The shader should demonstrate the interference of circular waves.\\n\\n<br>\\n\\nUse the sine function with `amplitude` and `frequency` variables to create the wave distortion.\\n\\n<br>\\n\\nThe amplitude of the waves should linearly decrease as they move further away from the source point. It should be 0 at a distance from the source equal to 0.5 and beyond.\\n\\n<br>\\n\\nTo animate the waves over time, multiply `iTime` by 3.","hints":[],"restrictions":[],"order":3,"cost":10,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":200,"animationStepTime":5,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 16.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 16.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":12,"slug":"surface-and-bottom","moduleId":4,"name":"Surface and Bottom","order":4,"cost":20,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":12,"slug":"surface-and-bottom","moduleId":4,"name":"Surface and Bottom","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvec2 getDistortion(vec2 pos, vec2 origin) {\\n  float distanceToOrigin = distance(pos, origin);\\n  float A = mix(amplitude, 0.0, clamp(distanceToOrigin * 2.0, 0.0, 1.0));\\n  float distortion = sin(distanceToOrigin * PI * frequency - iTime * 3.0) * A;\\n  return vec2(distortion);\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 distortion = getDistortion(uv, vec2(0.3));\\n  distortion += getDistortion(uv, vec2(0.7));\\n    \\n  vec2 reflectionCoords = uv + distortion;\\n  vec2 refractionCoords = uv + distortion * 0.2;\\n  \\n  float refractFactor = 0.3;\\n   \\n  vec3 reflection = texture(iChannel0, reflectionCoords).rgb;\\n  vec3 refraction = texture(iChannel1, refractionCoords).rgb;\\n  \\n  vec3 color = mix(reflection, refraction, refractFactor);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"### Task \\nCreate a shader that animates circular waves with the attenuation effect coming from two sources at (0.3, 0.3) and (0.7, 0.7).\\n\\n<br>\\n\\nUse the sine function with `amplitude` and `frequency` variables to create the wave distortion.\\n\\n<br>\\n\\nThe amplitude of the waves should linearly decrease as they move further away from the source point. It should be 0 at a distance from the source equal to 0.5 and beyond.\\n\\n<br>\\n\\nTo animate the waves over time, multiply `iTime` by 3.\\n\\n<br>\\n\\nTo create the effect of water with a surface and a bottom, use the second texture as the bottom layer. Apply the same distortion effect as the surface of the water, but with a reduced strength of 5 times. Finally, blend the colors of the surface and bottom layers together using a mix parameter of 0.3.","hints":[],"restrictions":[],"order":4,"cost":20,"threshold":95,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1}],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":121,"slug":"surface-normal","moduleId":4,"name":"Surface Normal","order":5,"cost":10,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":121,"slug":"surface-normal","moduleId":4,"name":"Surface Normal","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 2.0;\\n\\nconst vec2 w1 = vec2(0.3);\\nconst vec2 w2 = vec2(0.7);\\n\\nfloat getX(vec2 pos, vec2 origin) {\\n  float distanceToCenter = distance(pos, origin);\\n  float x = distanceToCenter * PI * frequency - iTime * 3.0;\\n  return x;\\n}\\n\\nfloat getAmplitude(vec2 pos, vec2 origin) {\\n  float distanceToOrigin = distance(pos, origin);\\n  return mix(amplitude, 0.0, clamp(distanceToOrigin * 2.0, 0.0, 1.0));\\n}\\n\\nvec2 getNormal(vec2 pos, vec2 origin) {\\n  float x = getX(pos, origin);\\n  float A = getAmplitude(pos, origin);\\n  vec2 normal = normalize(vec2(-1.0 * A * cos(x), 1.0));\\n  return normal;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  vec2 normal = normalize(getNormal(uv, w1) + getNormal(uv, w2));\\n  normal.x = normal.x * 0.5 + 0.5;\\n\\n  gl_FragColor = vec4(normal, 0.0, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 2.0;\\n\\nconst vec2 w1 = vec2(0.3);\\nconst vec2 w2 = vec2(0.7);\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"To find the unit normal vector of a two-dimensional curve, we first need to find the unit tangent vector by taking the derivative of the curve and dividing it by its magnitude. After this, we can rotate the tangent vector counterclockwise by 90 degrees to get the unit normal vector.\\n\\n<br>\\n\\nFor the sine curve\\n\\n```\\nY = sin(x)\\n```\\n\\nthe derivative is \\n\\n```\\nY\' = cos(x)\\n```\\n\\nThis derivative represents the rate of change of **Y** with respect to `x` at any given point on the curve.\\n\\n<br>\\n\\nThe tangent vector at any point *(x, y)* on the sine curve is\\n\\n```\\nT = |(1, cos(x))|\\n```\\n\\nHere, the x-component of the tangent vector represents the change in **X** for a unit change in the parameter. Since the parameter change expression is simply `x`:\\n\\n```\\nX = x\\n```\\n\\nthe derivative of this expression is 1:\\n```\\nX\' = 1\\n```\\n\\nTo get the unit normal vector, we need to rotate **T** counterclockwise by 90 degrees:\\n\\n```\\nN = |(-cos(x)), 1|\\n```\\n\\n### Task\\nCreate a shader that animates circular waves with the attenuation effect coming from two sources at (0.3, 0.3) and (0.7, 0.7). The shader should demonstrate the interference of circular waves and utilize the surface normal vector for the resulting output. Represent the `x` component as red and the `y` component as green, and bring the values of the vector components to a range of 0 to 1 for visualization purposes.\\n\\n<br>\\n\\nUse the sine function with `amplitude` and `frequency` variables to create the wave distortion.\\n\\n<br>\\n\\nThe amplitude of the waves should linearly decrease as they move further away from the source point. It should be 0 at a distance from the source equal to 0.5 and beyond.\\n\\n<br>\\n\\nTo animate the waves over time, multiply `iTime` by 3.","hints":[],"restrictions":[],"order":5,"cost":10,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 2.0;\\n\\nconst vec2 w1 = vec2(0.3);\\nconst vec2 w2 = vec2(0.7);\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 2.0;\\n\\nconst vec2 w1 = vec2(0.3);\\nconst vec2 w2 = vec2(0.7);\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":45,"slug":"fresnel","moduleId":4,"name":"Fresnel","order":6,"cost":20,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":45,"slug":"fresnel","moduleId":4,"name":"Fresnel","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nconst vec2 viewDir = normalize(vec2(0.5, 1.0));\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nfloat getX(vec2 pos, vec2 origin) {\\n  float distanceToCenter = distance(pos, origin);\\n  float x = distanceToCenter * PI * frequency - iTime * 3.0;\\n  return x;\\n}\\n\\nfloat getAmplitude(vec2 pos, vec2 origin) {\\n  float distanceToOrigin = distance(pos, origin);\\n  return mix(amplitude, 0.0, clamp(distanceToOrigin * 2.0, 0.0, 1.0));\\n}\\n\\nvec2 getDistortion(vec2 pos, vec2 origin) {\\n  float distortion = sin(getX(pos, origin)) * getAmplitude(pos, origin);\\n  return vec2(distortion);\\n}\\n\\nvec2 getNormal(vec2 pos, vec2 origin) {\\n  float x = getX(pos, origin);\\n  float A = getAmplitude(pos, origin);\\n  vec2 normal = normalize(vec2(-1.0 * A * cos(x), 1.0));\\n  return normal;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 w1 = vec2(0.3);\\n  vec2 w2 = vec2(0.7);\\n\\n  vec2 distortion = getDistortion(uv, w1) + getDistortion(uv, w2);\\n\\n  vec2 reflectCoord = uv + distortion;\\n  vec2 refractCoord = uv + distortion * 0.2;\\n\\n  vec2 normal = normalize(getNormal(uv, w1) + getNormal(uv, w2));\\n  float reflectance = dot(viewDir, normal);\\n\\n  vec3 reflection = texture2D(iChannel0, reflectCoord).rgb;\\n  vec3 refraction = texture2D(iChannel1, refractCoord).rgb;\\n\\n  vec3 color = mix(refraction, reflection, pow(reflectance, 5.0));\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec2 viewDir = normalize(vec2(0.5, 1.0));\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"object\\":{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1},\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250}","description":"According to the Fresnel law, the amount of light reflected off a water surface varies with the angle of incidence or the view direction. When light hits the surface of water at a perpendicular angle only a small amount of light is reflected back, and most of it is transmitted through the water. However, as the angle of incidence increases, more and more light is reflected off the surface, and less is transmitted through it.\\n\\n<br>\\n\\nTo use the Fresnel law to mix water surface and bottom in a shader, you can calculate the reflection coefficient of the water surface based on the angle between the view direction and the surface normal vector. This reflection coefficient can then be used to blend between the water surface and the bottom color or texture.\\n\\n```\\nReflectance = dot(ViewDir, Normal)\\n```\\n\\n### Task\\nCreate a shader that animates circular waves with the attenuation effect coming from two sources at (0.3, 0.3) and (0.7, 0.7). The shader should demonstrate the interference of circular waves. Compute the water surface reflectance based on the surface normal vector and view direction in accordance with the Fresnel law. Utilize the water surface reflectance to blend water surface and bottom textures, raising the reflectance to the power of 5 for a more realistic look.\\n\\n<br>\\n\\nUse the sine function with `amplitude` and `frequency` variables to create the wave distortion.\\n\\n<br>\\n\\nThe amplitude of the waves should linearly decrease as they move further away from the source point. It should be 0 at a distance from the source equal to 0.5 and beyond.\\n\\n<br>\\n\\nTo animate the waves over time, multiply `iTime` by 3.","hints":[],"restrictions":[],"order":6,"cost":20,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1}],"animated":true,"animationSteps":5,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec2 viewDir = normalize(vec2(0.5, 1.0));\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec2 viewDir = normalize(vec2(0.5, 1.0));\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":44,"slug":"light","moduleId":4,"name":"Light","order":7,"cost":30,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":44,"slug":"light","moduleId":4,"name":"Light","vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\nuniform sampler2D iChannel0;\\nuniform sampler2D iChannel1;\\n\\nconst vec2 viewPos = vec2(-3.0, 7.0);\\nconst vec2 lightDir = normalize(vec2(0.25, 1.0));\\nconst float shininess = 128.0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nfloat getX(vec2 pos, vec2 origin) {\\n  float distanceToCenter = distance(pos, origin);\\n  float x = distanceToCenter * PI * frequency - iTime * 3.0;\\n  return x;\\n}\\n\\nfloat getAmplitude(vec2 pos, vec2 origin) {\\n  float distanceToOrigin = distance(pos, origin);\\n  return mix(amplitude, 0.0, clamp(distanceToOrigin * 2.0, 0.0, 1.0));\\n}\\n\\nvec2 getDistortion(vec2 pos, vec2 origin) {\\n  float distortion = sin(getX(pos, origin)) * getAmplitude(pos, origin);\\n  return vec2(distortion);\\n}\\n\\nvec2 getNormal(vec2 pos, vec2 origin) {\\n  float x = getX(pos, origin);\\n  float A = getAmplitude(pos, origin);\\n  vec2 normal = normalize(vec2(-1.0 * A * cos(x), 1.0));\\n  return normal;\\n}\\n\\nfloat getLight(vec2 normal, vec2 viewDir) {\\n  vec2 reflectDir = reflect(-lightDir, normal);  \\n  float specular = (max(dot(viewDir, reflectDir), 0.0));\\n  specular = pow(specular, shininess);\\n\\n  return 1.0 + specular;\\n}\\n\\nvoid main() {\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n  \\n  vec2 w1 = vec2(0.3);\\n  vec2 w2 = vec2(0.7);\\n\\n  vec2 distortion = getDistortion(uv, w1) + getDistortion(uv, w2);\\n\\n  vec2 reflectCoord = uv + distortion;\\n  vec2 refractCoord = uv + distortion * 0.2;\\n\\n  vec2 viewDir = normalize(viewPos - reflectCoord);\\n\\n  vec2 normal = normalize(getNormal(uv, w1) + getNormal(uv, w2));\\n  float reflectance = pow(dot(viewDir, normal), 5.0);\\n\\n  vec3 reflection = texture2D(iChannel0, reflectCoord).rgb;\\n  vec3 refraction = texture2D(iChannel1, refractCoord).rgb;\\n\\n  vec3 color = mix(refraction, reflection, reflectance);\\n  color *= getLight(normal, viewDir);\\n\\n  gl_FragColor = vec4(color, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec2 viewPos = vec2(-3.0, 7.0);\\nconst vec2 lightDir = normalize(vec2(0.25, 1.0));\\nconst float shininess = 128.0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":false,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":-0.5,\\"y\\":-0.5,\\"z\\":1},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":true,\\"near\\":0.1,\\"far\\":100,\\"fov\\":75,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":1,\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"FAFAFA\\",\\"background\\":16448250,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"### Specular Light\\n\\n<br>\\n\\nFirst, we need to determine the view direction vector. For this, we have the observer\'s position and the surface coordinates `uv`. However, using `uv` to calculate the view direction vector is incorrect, as we need to apply lighting to the curved surface of the water:\\n\\n<br>\\n\\n![](/files/water-light-view-dir.png)\\n\\n<br>\\n\\nTo get specular light component we need to calculate a reflection vector **L\'** by reflecting the light direction **L** around the object\'s normal vector **N**:\\n\\n<br>\\n\\n![](/files/specular-lighting-reflect.png)\\n\\n<br>\\n\\nThen we calculate the angular distance between the reflection vector **L\'** and the view direction **V** (make sure it\'s not negative):\\n\\n<br>\\n\\n![](/files/specular-lighting-eye.png)\\n\\n<br>\\n\\n```\\nspecular = dot(V, L`)\\n```\\n\\nThe closer the angle between **L\'** and **V**, the greater the impact of the specular light.\\n\\n<br>\\n\\n### Shininess \\n\\n<br>\\n\\nThe higher the shininess value of an object, the more it properly reflects the light instead of scattering it all around and thus the smaller the highlight becomes. To apply shininess first calculate specular component, then raise it to the power of `shininess`:\\n```\\nspecular = pow(specular, shininess);\\n```\\n\\n### Task\\nCreate a shader that animates circular waves with the attenuation effect coming from two sources at (0.3, 0.3) and (0.7, 0.7). The shader should demonstrate the interference of circular waves. \\n\\n<br>\\n\\nCompute the water surface reflectance based on the surface normal vector and view direction in accordance with the Fresnel law. To calculate view direction, use `viewPos` and surface coordinates. Utilize the water surface reflectance to blend water surface and bottom textures, raising the reflectance to the power of 5 for a more realistic appearance. \\n\\n<br>\\n\\nUse the sine function with `amplitude` and `frequency` variables to create the wave distortion.\\n\\n<br>\\n\\nThe amplitude of the waves should linearly decrease as they move further away from the source point. It should be 0 at a distance from the source equal to 0.5 and beyond.\\n\\n<br>\\n\\nTo animate the waves over time, multiply `iTime` by 3.\\n\\n<br>\\n\\nAdditionally, incorporate Blinn-Phong specular light into the water surface using `viewPos`, `lightDir` and `shininess`.","hints":[],"restrictions":[],"order":7,"cost":30,"threshold":95,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0},{"index":1}],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","fragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec2 viewPos = vec2(-3.0, 7.0);\\nconst vec2 lightDir = normalize(vec2(0.25, 1.0));\\nconst float shininess = 128.0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n","defaultFragmentShader":"uniform vec2 iResolution;\\nuniform float iTime;\\n\\nconst vec2 viewPos = vec2(-3.0, 7.0);\\nconst vec2 lightDir = normalize(vec2(0.25, 1.0));\\nconst float shininess = 128.0;\\n\\nconst float PI = 6.28;\\nconst float frequency = 10.0;\\nconst float amplitude = 0.25;\\n\\nvoid main() {\\n  // Normalized pixel coordinates (from 0 to 1)\\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\\n\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for users who want to learn how to visualize water effects in computer graphics. You will explore different techniques for simulating water surface using fragment shader. Each topic includes theoretical material and practical tasks that can be completed directly on the website.","skillsDesc":"how to use fragment shaders to create wave patterns and animations.<br>techniques for simulating water surfaces.<br>explore the physics of wave interference and how it affects water simulation.<br>understand and apply the Fresnel law to simulate realistic reflections and refractions.","importanceDesc":"A solid grasp of different simulation techniques and the physical laws behind them is fundamental for creating high-quality, realistic, and efficient visual effects in computer graphics. It empowers developers to produce visually stunning and technically sound work, enhancing both their projects and their professional capabilities.","certifiable":false,"images":["img-1.png","img-2.png","img-3.png"]}},{"id":13,"slug":"grass","name":"Grass","description":"Exploration of hight-quality grass rendering techniques","tasks":9,"acceptedTasks":1,"isOpen":false,"order":10,"locked":false,"cover":true,"child":{"id":13,"slug":"grass","name":"Grass","description":"Exploration of hight-quality grass rendering techniques","order":10,"createdBy":{"id":3,"name":"Alexander"},"locked":false,"tasks":[{"id":202,"slug":"grass-blade","moduleId":13,"name":"Grass - Blade","order":0,"cost":5,"score":0,"accepted":true,"rejected":false,"match":0,"locked":false,"premiumLock":0,"premium":false,"child":{"task":{"id":202,"slug":"grass-blade","moduleId":13,"name":"Grass - Blade","vertexShader":"attribute int index;\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  \\n  vec3 pos = vec3(sideX * mix(0.05, 0.0, h * h), h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"attribute int index;\\n\\nvoid main() {\\n  vec3 pos = vec3(0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.55,\\"z\\":1.4},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"16\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"In a mesh consisting of 20 vertices, 9 adjacent rectangles are formed, stacked on top of each other. The height increases every two vertices, so to determine the current height, you need to identify the pair number first and then divide it by the number of rectangles to find the height of the pair.\\n\\n<br>\\n\\n![](/files/grass-mesh-axis.png)\\n\\n<br>\\n\\nFurthermore, it can be noted that all even vertices are on the left, while odd vertices are on the right. Therefore, the parity of the vertex index can be used to determine the direction of the shift along the X-axis.\\n\\n<br>\\n\\nThe width should vary quadratically based on the current height. This means that the width will decrease parabolically from 0.1 at the base to 0 at the top.\\n\\n<br>\\n\\nThe formula for calculating the width can look like this:\\n```\\nwidth = 0.1 * (1.0 - height * height)\\n```\\n\\n### Task \\n\\nGiven a mesh consisting of 20 vertices, initially all vertices are located at the origin. You need to move the vertices using their index to form a block on the screen with a total height of 1, consisting of 9 equal rectangular segments.\\n\\n<br>\\n\\n![](/files/grass-mesh-axis.png)\\n\\n<br>\\n\\nThen change the width quadratically based on the current height, starting from 0.1 at the base and decreasing to 0 at the top.","hints":[],"restrictions":[],"order":0,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":false,"animationSteps":null,"animationStepTime":null,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":false},"vertexShader":"attribute int index;\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  \\n  vec3 pos = vec3(sideX * mix(0.05, 0.0, h * h), h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"attribute int index;\\n\\nvoid main() {\\n  vec3 pos = vec3(0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":true,"answerViewed":true,"submissions":[{"score":5,"accepted":true,"vertexShader":"attribute int index;\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  \\n  vec3 pos = vec3(sideX * mix(0.05, 0.0, h * h), h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","at":"2025-03-14T03:11:17.000Z"}]}},{"id":203,"slug":"grass-bending","moduleId":13,"name":"Grass - Bending","order":1,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":false,"premiumLock":false,"premium":true,"child":{"task":{"id":203,"slug":"grass-bending","moduleId":13,"name":"Grass - Bending","vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec2 bezier(vec2 p0, vec2 p1, vec2 p2, float t) {\\n  float u = 1.0 - t;\\n  float tt = t * t;\\n  float uu = u * u;\\n\\n  vec2 p = uu * p0;\\n  p += 2.0 * u * t * p1;\\n  p += tt * p2;\\n  \\n  return p;\\n}\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  float bend = cos(iTime) * 0.5;\\n  \\n  vec2 curve = bezier(\\n    vec2(0.0, 0.0),\\n    vec2(0.0, 0.5),\\n    vec2(sin(bend), cos(bend)),\\n    h\\n  );\\n\\n  float dw = mix(0.05, 0.0, h * h);\\n  vec3 pos = vec3(curve.x + sideX * dw, curve.y, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec2 bezier(vec2 p0, vec2 p1, vec2 p2, float t) {\\n  float u = 1.0 - t;\\n  float tt = t * t;\\n  float uu = u * u;\\n\\n  vec2 p = uu * p0;\\n  p += 2.0 * u * t * p1;\\n  p += tt * p2;\\n  \\n  return p;\\n}\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  float bend = cos(iTime) * 0.5;\\n  \\n  vec2 curve = bezier(\\n    vec2(0.0, 0.0),\\n    vec2(0.0, 0.5),\\n    vec2(sin(bend), cos(bend)),\\n    h\\n  );\\n\\n  float dw = mix(0.05, 0.0, h * h);\\n  vec3 pos = vec3(sideX * dw, h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":0,\\"y\\":0.55,\\"z\\":1.4},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"16\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"Using **Bezier curves** to deform a mesh over time is a powerful method that allows for smooth and controlled animations.\\n\\n<br>\\n\\n### Define the Bezier Curve\\n\\n<br>\\n\\nA Bezier curve is defined by a set of control points. For simplicity, let\'s consider a quadratic Bezier curve, which is defined by three control points **P0**, **P1**, and **P2**.\\n\\n<br>\\n\\n![](/files/grass-bezier-demo.png)\\n\\n<br>\\n\\nThe formula for a quadratic Bezier curve is:\\n\\n```\\nB(t) = (1 − t)^2 * P0 + 2 * (1 − t) * t * P1 + t^2 * P2\\n```\\n\\nwhere **t** ranges from 0 to 1.\\n\\n<br>\\n\\nHere you can find more theory: [Bezier Curve](https://javascript.info/bezier-curve).\\n\\n<br>\\n\\n### Animate the Curve Over Time\\n\\n<br>\\n\\nTo create an animation over time, you can change the positions of the control points **P0**, **P1**, and **P2** based on time. For example, you can make them move according to a sine function or any other function that creates the desired effect.\\n\\n<br>\\n\\n### Apply the Curve to the Mesh\\n\\n<br>\\n\\nTo deform the mesh, you need to apply the Bezier curve to each vertex of the mesh. This can be done in the vertex shader.\\n\\n### Task \\n\\nApply the given Bezier curve to each vertex of the mesh to perform the mesh bending animation.","hints":[],"restrictions":[],"order":1,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec2 bezier(vec2 p0, vec2 p1, vec2 p2, float t) {\\n  float u = 1.0 - t;\\n  float tt = t * t;\\n  float uu = u * u;\\n\\n  vec2 p = uu * p0;\\n  p += 2.0 * u * t * p1;\\n  p += tt * p2;\\n  \\n  return p;\\n}\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  float bend = cos(iTime) * 0.5;\\n  \\n  vec2 curve = bezier(\\n    vec2(0.0, 0.0),\\n    vec2(0.0, 0.5),\\n    vec2(sin(bend), cos(bend)),\\n    h\\n  );\\n\\n  float dw = mix(0.05, 0.0, h * h);\\n  vec3 pos = vec3(sideX * dw, h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec2 bezier(vec2 p0, vec2 p1, vec2 p2, float t) {\\n  float u = 1.0 - t;\\n  float tt = t * t;\\n  float uu = u * u;\\n\\n  vec2 p = uu * p0;\\n  p += 2.0 * u * t * p1;\\n  p += tt * p2;\\n  \\n  return p;\\n}\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  float bend = cos(iTime) * 0.5;\\n  \\n  vec2 curve = bezier(\\n    vec2(0.0, 0.0),\\n    vec2(0.0, 0.5),\\n    vec2(sin(bend), cos(bend)),\\n    h\\n  );\\n\\n  float dw = mix(0.05, 0.0, h * h);\\n  vec3 pos = vec3(sideX * dw, h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":204,"slug":"grass-3d-blade","moduleId":13,"name":"Grass - 3D Blade","order":2,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":204,"slug":"grass-3d-blade","moduleId":13,"name":"Grass - 3D Blade","vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvoid main() {\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 1.5;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  float dw = mix(0.1, 0.0, h * h);\\n  vec3 pos = curve + vec3(sideX * dw, 0.0, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 1.5;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  float dw = mix(0.1, 0.0, h * h);\\n  vec3 pos = vec3(sideX * dw, h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":1.45,\\"y\\":0.55,\\"z\\":0.9},\\"rotation\\":{\\"x\\":0,\\"y\\":1,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"15\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"In 3D space, we need the grass blade to be two-sided so that it doesn\'t disappear when viewed from the other side. To achieve this, we need to double the number of vertices per blade, and reverse the clock ordering of the back part in the index buffer:\\n\\n<br>\\n\\n![](/files/grass-mesh-double-sided.png)\\n\\n<br>\\n\\nThe Bezier function works the same for both two-dimensional and three-dimensional points. The main difference is that in three-dimensional space, an additional coordinate **z** is added, which allows describing curves in three dimensions. Otherwise, the mathematical principles and algorithms remain the same.\\n\\n### Task \\n\\nIn this task, you need to fix the drawing of the blade of grass, ensuring that its back part is also drawn. We are going to use 20 vertices for the front side and 20 vertices for the back. Additionally, apply the Bezier curve to the mesh to perform the bending animation.","hints":[],"restrictions":[],"order":2,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 1.5;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  float dw = mix(0.1, 0.0, h * h);\\n  vec3 pos = vec3(sideX * dw, h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvoid main() {\\n  float h = float(index / 2) / 9.0;\\n  float sideX = mod(float(index), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 1.5;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  float dw = mix(0.1, 0.0, h * h);\\n  vec3 pos = vec3(sideX * dw, h, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":205,"slug":"grass-more-blades","moduleId":13,"name":"Grass - More Blades","order":3,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":205,"slug":"grass-more-blades","moduleId":13,"name":"Grass - More Blades","vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY  = rotationYMatrix(instanceHash * 3.14);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve + vec3(sideX * mix(0.05, 0.0, h * h), 0.0, 0.0);\\n  pos = rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nvoid main() {\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 0.2;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve + vec3(sideX * mix(0.05, 0.0, h * h), 0.0, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":3,\\"y\\":4,\\"z\\":4},\\"rotation\\":{\\"x\\":-0.75,\\"y\\":0.7,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"17\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"To increase the number of grass blades, we need to extend our vertex buffer for one grass blade of size **N** by the number of grass blades **K** we plan to draw.\\n\\n<br>\\n\\nBy knowing the number of vertices **N** used for one blade, we can use the vertex index to determine the blade instance index:\\n\\n```\\nInstanceIndex = VertexIndex / N\\n```\\n\\nThis instance index will be the same for all vertices of that blade, allowing us to apply a common transformation to its vertices.\\n\\n<br>\\n\\nTo determine the local index number of a vertex within a single blade instance, we take the global vertex index value modulo the number of vertices in one instance **N**:\\n\\n```\\nInstanceVertexIndex = VertexIndex % N\\n```\\n\\nWe can use this local vertex index to draw the blade the old way.\\n\\n### Task \\n\\nThe grass buffer has been extended by N times. One blade uses 40 vertices (20 for the front side and 20 for the back side). Determine the instance index of the blade and use it as an argument to the `random` and `random2` functions to set:\\n\\n1. random position of the blade within [-3.0; 3.0];\\n2. random rotation in [-3.14, 3.14] around the Y axis;\\n3. random bending phase shift in [-3.14, 3.14].\\n\\nUse the `rotationYMatrix` function to get the rotation matrix. Draw all grass blades.","hints":[],"restrictions":[],"order":3,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nvoid main() {\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 0.2;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve + vec3(sideX * mix(0.05, 0.0, h * h), 0.0, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nvoid main() {\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 0.2;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve + vec3(sideX * mix(0.05, 0.0, h * h), 0.0, 0.0);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":206,"slug":"grass-color","moduleId":13,"name":"Grass - Color","order":4,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":206,"slug":"grass-color","moduleId":13,"name":"Grass - Color","vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout float vH;\\nout float vX;\\nout float vRand;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.3;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  vRand = instanceHash;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"in float vH;\\nin float vX;\\nin float vRand;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.6, 0.8, 0.0), vec3(0.8, 0.9, 0.3), vRand * 0.5 + 0.5);\\n  color = mix(vec3(0.1, 0.2, 0.0), color, vH);\\n  color *= mix(0.8, 1.0, vX * vX);\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}\\n","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.3;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":3,\\"y\\":4,\\"z\\":4},\\"rotation\\":{\\"x\\":-0.75,\\"y\\":0.7,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"17\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"### Random Color Blending\\n\\n<br>\\n\\nTo give grass blades a more natural look, you can use random color blending. Each instance of a grass blade is assigned a random value based on its instance index. This value is used to blend the base color of the blade with an additional color.\\n\\n<br>\\n\\n### Shading the Base Color\\n\\n<br>\\n\\nGrass blades are usually darker at the base because less light reaches there. To account for this, you can shade the color closer to the base of the blade. For example:\\n```\\nbladeColor = mix(bladeBase, bladeColor, heightFactor);\\n```\\n\\n### Adding Volume\\n\\n<br>\\n\\nTo give the grass blade volume, you can use linear interpolation to shade or lighten the color closer to the blade center. Example formula:\\n```\\nfloat innerFactor = 0.8; // coefficient for the center\\nfloat outerFactor = 1.0; // coefficient for the edges\\n\\nbladeColor *= mix(innerFactor, outerFactor, distanceToBladeCenter ^ 2);\\n```\\nwhere distanceToBladeCenter is in the range [-1.0, 1.0].\\n\\n### Task \\n\\nEnhance grass rendering with color:\\n\\n1. blend the blade color between `(0.6, 0.8, 0.0)` and `(0.8, 0.9, 0.3)` using the `instanceHash` value;\\n2. linearly blend the blade color with `(0.1, 0.2, 0.0)` based on the distance to the base of the blade;\\n3. darken the color of the grass blade closer to the center quadratically so that the center color is 20% darker than the edges.","hints":[],"restrictions":[],"order":4,"cost":5,"threshold":99,"likes":1,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.3;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.3;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.6, 0.8, 0.2, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":207,"slug":"grass-wind","moduleId":13,"name":"Grass - Wind","order":5,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":207,"slug":"grass-wind","moduleId":13,"name":"Grass - Wind","vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout float vH;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.2;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n\\n  float windStength = sin(worldPos.y * 0.5 + iTime * 2.0) * h;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"in float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.2), vH);\\n  color *= 0.9 + vX * vX * 0.1;\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout float vH;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.2;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n\\n  float windStength = sin(worldPos.y * 0.5 + iTime * 2.0);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"in float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.2), vH);\\n  color *= 0.9 + vX * vX * 0.1;\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":3,\\"y\\":4,\\"z\\":4},\\"rotation\\":{\\"x\\":-0.75,\\"y\\":0.7,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"17\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"To simulate the wind effect on grass blades, we can use a rotation matrix because it is relatively simple and effective. The rotation matrix allows easy control of the angle and strength of the rotation, making this method convenient for implementation and calculations:\\n\\n```\\nbladePos = windRotationMatrix * bladePos\\n```\\n\\nIf the base of the blade is at position `(0, 0, 0)`, the rotation matrix will naturally have no effect at the base, as the rotation will be zero. However, reducing the rotation strength along the height of the blade can be useful for creating a smoother and more realistic wind effect, especially if the base is not exactly at `(0, 0, 0)` or if you want more detailed control over the blade\'s movement:\\n\\n```\\nangle *= bladeHeightFactor;\\n\\n// Rotation matrix around the X-axis\\n                 | 1   0          0           | \\nrotationMatrix = | 0   cos(angle) -sin(angle) |\\n                 | 0   sin(angle) cos(angle)  |\\n```\\n\\nRotation angle can also be controlled by a function based on time and the grass position in the world. This helps simulate wind movement across the field, making the animation more dynamic and realistic:\\n\\n```\\nangle *= sin(worldPos.y + iTime);\\n```\\n\\nRotation matrix helps control the angle and strength of the movement, making it look like the wind is blowing. However, if you need more precise and realistic simulation, you might consider using Bezier curves.\\n\\n### Task \\n\\nUse the `windStrength` value to simulate the wind effect on grass blades. The `windStrength` should control the angle of the blade\'s movement along the X-axis, making it look like the wind is blowing. The rotation strength should decrease as it gets closer to the base of the blade, so the top part of the blade sways in the wind while the bottom remains stationary.\\n\\n<br>\\n\\nYou can use `rotationXMatrix` function to get the rotation matrix.","hints":[],"restrictions":[],"order":5,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout float vH;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.2;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n\\n  float windStength = sin(worldPos.y * 0.5 + iTime * 2.0);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"in float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.2), vH);\\n  color *= 0.9 + vX * vX * 0.1;\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout float vH;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime + instanceHash * 3.14) * 0.2;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n\\n  float windStength = sin(worldPos.y * 0.5 + iTime * 2.0);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"in float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.2), vH);\\n  color *= 0.9 + vX * vX * 0.1;\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":208,"slug":"grass-wind-with-noise","moduleId":13,"name":"Grass - Wind with Noise","order":6,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":208,"slug":"grass-wind-with-noise","moduleId":13,"name":"Grass - Wind with Noise","vertexShader":"uniform float iTime;\\nuniform sampler2D iChannel0; \\n\\nattribute int index;\\n\\nout float vH;\\nout vec3 vNormal;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nfloat noise(vec3 st) {\\n  vec2 offset = vec2(st.z, 0.0);\\n  return texture(iChannel0, fract(st.xy + offset)).r * 2.0 - 1.0;\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n\\n  float windStength = noise(vec3(worldPos * 0.05, 0.0) + iTime * 0.1) * h * 4.0;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"in float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.2), vH);\\n  color *= 1.0 - abs(vX) * 0.1;\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\nuniform sampler2D iChannel0; \\n\\nattribute int index;\\n\\nout float vH;\\nout vec3 vNormal;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nfloat noise(vec3 st) {\\n  vec2 offset = vec2(st.z, 0.0);\\n  return texture(iChannel0, fract(st.xy + offset)).r * 2.0 - 1.0;\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n\\n  float windStength = noise(vec3(worldPos * 0.02, 0.0) + iTime * 0.1) * h;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"in float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.2), vH);\\n  color *= 1.0 - abs(vX) * 0.1;\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":3,\\"y\\":4,\\"z\\":4},\\"rotation\\":{\\"x\\":-0.75,\\"y\\":0.7,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"17\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"To create a more natural and random wind effect, we can use Perlin noise. For efficiency, we can store the noise in a texture and scroll it. This approach allows us to simulate wind movement across the grass blades dynamically and realistically. By adjusting the texture coordinates over time, we can create the illusion of wind blowing through the grass:\\n\\n```\\nwindStrength = texture(noiseTexture, fract(xy + vec2(0.0, time))).r\\n```\\n\\nYou can change the scale of the noise by multiplying the `xy` coordinates, which allows you to control the nature of the wind movement, making it smoother or more chaotic depending on your needs.\\n\\n### Task \\n\\nTo simulate a more chaotic wind effect on grass blades, you need to adjust the blade coordinates multiplier and increase the wind strength. Specifically, change the blade coordinates multiplier to `0.05` to enhance the randomness of the wind effect. Additionally, increase the wind strength by a factor of `4.0` to make the wind effect more pronounced.","hints":[],"restrictions":[],"order":6,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[{"index":0}],"animated":true,"animationSteps":10,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\nuniform sampler2D iChannel0; \\n\\nattribute int index;\\n\\nout float vH;\\nout vec3 vNormal;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nfloat noise(vec3 st) {\\n  vec2 offset = vec2(st.z, 0.0);\\n  return texture(iChannel0, fract(st.xy + offset)).r * 2.0 - 1.0;\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n\\n  float windStength = noise(vec3(worldPos * 0.02, 0.0) + iTime * 0.1) * h;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"in float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.2), vH);\\n  color *= 1.0 - abs(vX) * 0.1;\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\nuniform sampler2D iChannel0; \\n\\nattribute int index;\\n\\nout float vH;\\nout vec3 vNormal;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nfloat noise(vec3 st) {\\n  vec2 offset = vec2(st.z, 0.0);\\n  return texture(iChannel0, fract(st.xy + offset)).r * 2.0 - 1.0;\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float bend = sin(iTime) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n\\n  float windStength = noise(vec3(worldPos * 0.02, 0.0) + iTime * 0.1) * h;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"in float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 color = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.2), vH);\\n  color *= 1.0 - abs(vX) * 0.1;\\n  \\n  gl_FragColor = vec4(color, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":209,"slug":"grass-blade-normal","moduleId":13,"name":"Grass - Blade Normal","order":7,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":209,"slug":"grass-blade-normal","moduleId":13,"name":"Grass - Blade Normal","vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout vec3 vNormal;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec3 bezierGradient3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    vec3 gradient = 2.0 * u * (p1 - p0) + 2.0 * t * (p2 - p1);\\n    return gradient;\\n}\\n\\nvoid main() {\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float sideZ = (index / 20 == 1) ? 1.0 : -1.0;\\n  float bend = sin(iTime) * 1.5;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 grad = bezierGradient3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.1, 0.0, h * h);\\n\\n  vNormal = normalize(sideZ * vec3(0.0, grad.z, -grad.y));\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"in vec3 vNormal;\\n\\nvoid main() {\\n  gl_FragColor = vec4(normalize(vNormal), 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec3 bezierGradient3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    vec3 gradient = 2.0 * u * (p1 - p0) + 2.0 * t * (p2 - p1);\\n    return gradient;\\n}\\n\\nvoid main() {\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float sideZ = (index / 20 == 1) ? 1.0 : -1.0;\\n  float bend = sin(iTime) * 1.5;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.1, 0.0, h * h);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":1.45,\\"y\\":0.55,\\"z\\":0.9},\\"rotation\\":{\\"x\\":0,\\"y\\":1,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"15\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"To determine the normal on the surface of a grass blade when using a double-sided mesh and a Bézier curve for bending it, you need to follow these steps:\\n\\n<br>\\n\\n1\\\\. Determine the first derivative of the Bézier curve at each point. This will give you the tangent to the curve at that point:\\n\\n```\\nB′(t) = 3(1 − t)^2 * (P1 − P0) + 6(1 − t) * t * (P2 − P1) + 3t^2 * (P3 − P2)\\n```\\n\\n2\\\\. Use the tangent to calculate the normal. Since we are bending the curve only in the YZ plane, we just need to rotate the tangent by 90 degrees:\\n\\n```\\nN = (0.0, B′.z, -B′.y)\\n```\\n\\n3\\\\. Determine the current side of the grass blade. If you have information about the number of vertices used for each side of the grass blade, you can determine the current side by checking the vertex index. For example, if each side of the grass blade consists of **N** vertices, then vertices with indices from **0** to **N-1** will belong to one side, and vertices with indices from **N** to **2N-1** will belong to the other side:\\n\\n```\\nN *= side\\n```\\n\\n\\n### Task \\n\\nYour task is to determine the normal of a grass blade using the provided `bezierGradient3D` function and output the normal as a color. The grass blade is represented by a double-sided mesh and bent using a Bézier curve.","hints":[],"restrictions":[],"order":7,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec3 bezierGradient3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    vec3 gradient = 2.0 * u * (p1 - p0) + 2.0 * t * (p2 - p1);\\n    return gradient;\\n}\\n\\nvoid main() {\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float sideZ = (index / 20 == 1) ? 1.0 : -1.0;\\n  float bend = sin(iTime) * 1.5;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.1, 0.0, h * h);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec3 bezierGradient3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    vec3 gradient = 2.0 * u * (p1 - p0) + 2.0 * t * (p2 - p1);\\n    return gradient;\\n}\\n\\nvoid main() {\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float sideZ = (index / 20 == 1) ? 1.0 : -1.0;\\n  float bend = sin(iTime) * 1.5;\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.1, 0.0, h * h);\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"void main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}},{"id":210,"slug":"grass-light","moduleId":13,"name":"Grass - Light","order":8,"cost":5,"score":0,"accepted":false,"rejected":false,"match":0,"locked":true,"premiumLock":false,"premium":true,"child":{"task":{"id":210,"slug":"grass-light","moduleId":13,"name":"Grass - Light","vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout vec3 vNormal;\\nout float vH;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec3 bezierGradient3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    vec3 gradient = 2.0 * u * (p1 - p0) + 2.0 * t * (p2 - p1);\\n    return gradient;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float sideZ = ((index % 40) / 20 == 1) ? 1.0 : -1.0;\\n  float bend = sin(iTime) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n\\n  float windStength = sin(worldPos.y * 0.5 + iTime * 2.0) * h;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 grad = bezierGradient3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vNormal = normalize(windRot * rotateY * sideZ * vec3(0.0, grad.z, -grad.y));\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"in vec3 vNormal;\\nin float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 fragColor = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.4), vH);\\n  vec3 fragNormal = normalize(vNormal);\\n  vec3 lightDir   = normalize(vec3(0.0, -1.0, 1.0));\\n\\n  float diffuse = max(0.0, dot(fragNormal, lightDir));\\n\\n  vec3 result = (diffuse + 0.5) * fragColor.rgb;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout vec3 vPos;\\nout vec3 vNormal;\\nout float vH;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec3 bezierGradient3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    vec3 gradient = 2.0 * u * (p1 - p0) + 2.0 * t * (p2 - p1);\\n    return gradient;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float sideZ = ((index % 40) / 20 == 1) ? 1.0 : -1.0;\\n  float bend = sin(iTime) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n\\n  float windStength = sin(worldPos.y * 0.5 + iTime * 2.0) * h;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 grad = bezierGradient3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vNormal = normalize(windRot * rotateY * sideZ * vec3(0.0, grad.z, -grad.y));\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"in vec3 vNormal;\\nin float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 fragColor = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.4), vH);\\n  vec3 lightDir  = normalize(vec3(0.0, -1.0, 1.0));\\n\\n  vec3 result = fragColor.rgb;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","vertexCodeEditable":true,"fragmentCodeEditable":true,"postProcessCodeEditable":false,"propertiesEditable":false,"sceneSettings":"{\\"camera\\":{\\"position\\":{\\"x\\":3,\\"y\\":4,\\"z\\":4},\\"rotation\\":{\\"x\\":-0.75,\\"y\\":0.7,\\"z\\":0},\\"isOrthographic\\":false,\\"near\\":0.1,\\"far\\":100,\\"fov\\":45,\\"left\\":0,\\"right\\":1,\\"top\\":1,\\"bottom\\":0},\\"objects\\":[{\\"position\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"rotation\\":{\\"x\\":0,\\"y\\":0,\\"z\\":0},\\"scale\\":{\\"x\\":1,\\"y\\":1,\\"z\\":1},\\"geometry\\":\\"17\\",\\"model\\":null,\\"meshes\\":[{\\"name\\":\\"main\\",\\"materialId\\":0}],\\"colorRGBA\\":\\"FFFFFF\\",\\"color\\":null}],\\"materials\\":[],\\"actions\\":[],\\"backgroundRGBA\\":\\"506060\\",\\"background\\":5267552,\\"customDepthBufferTexture\\":false,\\"glslVersion\\":1}","description":"To add ambient lighting to the scene, we calculate the product of the light, the object color and the ambient light factor.\\n\\n```\\ncolor = ambient * object * light\\n```\\n\\nTo get diffuse light component we need calculate the angular distance between the light direction **L** and the plane normal **N**:\\n\\n```\\ndiffuse = dot(N, L)\\n```\\n\\nCombine ambient and diffuse lighting:\\n\\n```\\ncolor = (ambient+ diffuse ) * object * light\\n```\\n\\n### Task \\n\\nYour task is to add simple Phong diffuse lighting to the grass blades with an ambient light component of `0.5`.","hints":[],"restrictions":[],"order":8,"cost":5,"threshold":99,"likes":0,"dislikes":0,"visibility":true,"createdBy":{"id":3,"name":"Alexander"},"channels":[],"animated":true,"animationSteps":10,"animationStepTime":200,"rules":[{"id":1,"default":true,"keyword":"if","message":"Branching can slow down the speed of your program","severity":1}],"premium":true},"vertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout vec3 vPos;\\nout vec3 vNormal;\\nout float vH;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec3 bezierGradient3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    vec3 gradient = 2.0 * u * (p1 - p0) + 2.0 * t * (p2 - p1);\\n    return gradient;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float sideZ = ((index % 40) / 20 == 1) ? 1.0 : -1.0;\\n  float bend = sin(iTime) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n\\n  float windStength = sin(worldPos.y * 0.5 + iTime * 2.0) * h;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 grad = bezierGradient3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vNormal = normalize(windRot * rotateY * sideZ * vec3(0.0, grad.z, -grad.y));\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","fragmentShader":"in vec3 vNormal;\\nin float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 fragColor = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.4), vH);\\n  vec3 lightDir  = normalize(vec3(0.0, -1.0, 1.0));\\n\\n  vec3 result = fragColor.rgb;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","postProcessShader":"","properties":"","defaultVertexShader":"uniform float iTime;\\n\\nattribute int index;\\n\\nout vec3 vPos;\\nout vec3 vNormal;\\nout float vH;\\nout float vX;\\n\\nvec3 bezier3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    float tt = t * t;\\n    float uu = u * u;\\n\\n    vec3 p = uu * p0;\\n    p += 2.0 * u * t * p1;\\n    p += tt * p2;\\n\\n    return p;\\n}\\n\\nvec3 bezierGradient3D(vec3 p0, vec3 p1, vec3 p2, float t) {\\n    float u = 1.0 - t;\\n    vec3 gradient = 2.0 * u * (p1 - p0) + 2.0 * t * (p2 - p1);\\n    return gradient;\\n}\\n\\nvec2 random2(vec2 st){\\n  float d1 = dot(st, vec2(12.3, 32.1));\\n  float d2 = dot(st, vec2(45.6, 65.4));\\n  \\n  st = vec2(d1, d2);\\n  return fract(sin(st) * 78.9) * 2.0 - 1.0;\\n}\\n\\nfloat random(float x) {\\n  float r = fract(sin(x * 12.34) * 1234.5678);\\n  return r * 2.0 - 1.0;\\n}\\n\\nmat3 rotationYMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      vec3(cosAngle, 0, -sinAngle),\\n      vec3(0, 1, 0),\\n      vec3(sinAngle, 0, cosAngle)\\n    );\\n}\\n\\nmat3 rotationXMatrix(float angle) {\\n    float cosAngle = cos(angle);\\n    float sinAngle = sin(angle);\\n    return mat3(\\n      1.0, 0, 0,\\n      0, cosAngle, sinAngle,\\n      0, -sinAngle, cosAngle\\n    );\\n}\\n\\nvoid main() {\\n  int   instance = index / 40;\\n  float instanceHash = random(float(instance));\\n  int   localIndex = index % 20;\\n  float h = float(localIndex / 2) / 9.0;\\n  float sideX = mod(float(localIndex), 2.0) * 2.0 - 1.0;\\n  float sideZ = ((index % 40) / 20 == 1) ? 1.0 : -1.0;\\n  float bend = sin(iTime) * 0.2;\\n  vec2  worldPos = random2(vec2(instance)) * 3.0;\\n  mat3  rotateY = rotationYMatrix(instanceHash * 3.14);\\n\\n  float windStength = sin(worldPos.y * 0.5 + iTime * 2.0) * h;\\n  mat3  windRot = rotationXMatrix(windStength);\\n  \\n  vec3 curve = bezier3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 grad = bezierGradient3D(\\n    vec3(0.0, 0.0, 0.0),\\n    vec3(0.0, 0.5, 0.0),\\n    vec3(0.0, cos(bend), sin(bend)),\\n    h\\n  );\\n\\n  vec3 pos = curve;\\n  pos.x += sideX * mix(0.05, 0.0, h * h);\\n  pos = windRot * rotateY * pos;\\n  pos += vec3(worldPos.x, 0.0, worldPos.y);\\n\\n  vNormal = normalize(windRot * rotateY * sideZ * vec3(0.0, grad.z, -grad.y));\\n  vH = h;\\n  vX = sideX;\\n  \\n  gl_Position = projectionMatrix * viewMatrix * vec4(pos, 1.0);\\n}\\n","defaultFragmentShader":"in vec3 vNormal;\\nin float vH;\\nin float vX;\\n\\nvoid main() {\\n  vec3 fragColor = mix(vec3(0.1, 0.2, 0.0), vec3(0.6, 0.8, 0.4), vH);\\n  vec3 lightDir  = normalize(vec3(0.0, -1.0, 1.0));\\n\\n  vec3 result = fragColor.rgb;\\n  \\n  gl_FragColor = vec4(result, 1.0);\\n}","defaultPostProcessShader":"","defaultProperties":"","liked":false,"disliked":false,"accepted":false,"answerViewed":false,"submissions":[]}}],"cover":true,"pageHeaderImage":true,"fullDesc":"This module is designed for developers who want to master high-quality techniques for rendering grass fields","skillsDesc":"render large numbers of grass blades efficiently<br>use of Bezier curves to animate grass bending<br>how to simulate wind effects","importanceDesc":"Realistic grass rendering enhances the visual appeal of virtual environments, making them more immersive and engaging.","certifiable":false,"images":["img-1.png","img-2.png","img-3.png"]}}]'),Ef={navMain:Af},Fo=[];Ef.navMain.forEach(e=>{Fo.push({path:`/${e.slug}`,name:e.slug,redirect:`/${e.slug}/${e.child.tasks[0].slug}`}),e.child&&e.child.tasks&&e.child.tasks.length&&e.child.tasks.forEach(n=>{Fo.push({path:`/${e.slug}/${n.slug}`,name:n.slug,component:()=>_i(()=>import("./index-CdC5JksG.js").then(t=>t.i),__vite__mapDeps([0,1,2,3]))})})});const Nf=[{path:"/",name:"Dashboard",component:()=>_i(()=>import("./index-BtmIMkLc.js"),__vite__mapDeps([4,2,1])),redirect:Fo[0].path,children:Fo},{path:"/404",name:"NotFound",component:()=>_i(()=>import("./NotFound-CYfZzxL0.js"),__vite__mapDeps([5,2]))}],Vl=Vf({history:lf(),routes:Nf});Vl.beforeEach((e,n,t)=>{t()});const If=(e,n)=>{const t=e.__vccOpts||e;for(const[o,i]of n)t[o]=i;return t},Lf={};function Bf(e,n){const t=ad("RouterView");return At(),Co(t)}const Of=If(Lf,[["render",Bf]]);/*!
 * Viewer.js v1.11.7
 * https://fengyuanchen.github.io/viewerjs
 *
 * Copyright 2015-present Chen Fengyuan
 * Released under the MIT license
 *
 * Date: 2024-11-24T04:32:19.116Z
 */function Gf(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function ua(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,jl(o.key),o)}}function Uf(e,n,t){return n&&ua(e.prototype,n),t&&ua(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function $f(e,n,t){return(n=jl(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ma(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),t.push.apply(t,o)}return t}function ir(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{};n%2?ma(Object(t),!0).forEach(function(o){$f(e,o,t[o])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ma(Object(t)).forEach(function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))})}return e}function Hf(e,n){if(typeof e!="object"||!e)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var o=t.call(e,n);if(typeof o!="object")return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}function jl(e){var n=Hf(e,"string");return typeof n=="symbol"?n:n+""}function Mi(e){"@babel/helpers - typeof";return Mi=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Mi(e)}var ga={backdrop:!0,button:!0,navbar:!0,title:!0,toolbar:!0,className:"",container:"body",filter:null,fullscreen:!0,inheritedAttributes:["crossOrigin","decoding","isMap","loading","referrerPolicy","sizes","srcset","useMap"],initialCoverage:.9,initialViewIndex:0,inline:!1,interval:5e3,keyboard:!0,focus:!0,loading:!0,loop:!0,minWidth:200,minHeight:100,movable:!0,rotatable:!0,scalable:!0,zoomable:!0,zoomOnTouch:!0,zoomOnWheel:!0,slideOnTouch:!0,toggleOnDblclick:!0,tooltip:!0,transition:!0,zIndex:2015,zIndexInline:0,zoomRatio:.1,minZoomRatio:.01,maxZoomRatio:100,url:"src",ready:null,show:null,shown:null,hide:null,hidden:null,view:null,viewed:null,move:null,moved:null,rotate:null,rotated:null,scale:null,scaled:null,zoom:null,zoomed:null,play:null,stop:null},qf='<div class="viewer-container" tabindex="-1" touch-action="none"><div class="viewer-canvas"></div><div class="viewer-footer"><div class="viewer-title"></div><div class="viewer-toolbar"></div><div class="viewer-navbar"><ul class="viewer-list" role="navigation"></ul></div></div><div class="viewer-tooltip" role="alert" aria-hidden="true"></div><div class="viewer-button" data-viewer-action="mix" role="button"></div><div class="viewer-player"></div></div>',Xo=typeof window<"u"&&typeof window.document<"u",pn=Xo?window:{},st=Xo&&pn.document.documentElement?"ontouchstart"in pn.document.documentElement:!1,rr=Xo?"PointerEvent"in pn:!1,W="viewer",vo="move",Al="switch",wt="zoom",eo="".concat(W,"-active"),Xf="".concat(W,"-close"),uo="".concat(W,"-fade"),Di="".concat(W,"-fixed"),Yf="".concat(W,"-fullscreen"),ha="".concat(W,"-fullscreen-exit"),In="".concat(W,"-hide"),Wf="".concat(W,"-hide-md-down"),Kf="".concat(W,"-hide-sm-down"),Zf="".concat(W,"-hide-xs-down"),$e="".concat(W,"-in"),Rt="".concat(W,"-invisible"),lt="".concat(W,"-loading"),Qf="".concat(W,"-move"),pa="".concat(W,"-open"),Yn="".concat(W,"-show"),xe="".concat(W,"-transition"),ft="click",Vi="dblclick",xa="dragstart",ya="focusin",ba="keydown",He="load",Gn="error",Jf=st?"touchend touchcancel":"mouseup",ev=st?"touchmove":"mousemove",nv=st?"touchstart":"mousedown",wa=rr?"pointerdown":nv,Ca=rr?"pointermove":ev,Pa=rr?"pointerup pointercancel":Jf,Fa="resize",Ye="transitionend",ka="wheel",Sa="ready",_a="show",za="shown",Ta="hide",Ra="hidden",Ma="view",Ut="viewed",Da="move",Va="moved",ja="rotate",Aa="rotated",Ea="scale",Na="scaled",Ia="zoom",La="zoomed",Ba="play",Oa="stop",ko="".concat(W,"Action"),ar=/\s\s*/,no=["zoom-in","zoom-out","one-to-one","reset","prev","play","next","rotate-left","rotate-right","flip-horizontal","flip-vertical"];function $t(e){return typeof e=="string"}var tv=Number.isNaN||pn.isNaN;function pe(e){return typeof e=="number"&&!tv(e)}function Qn(e){return typeof e>"u"}function vt(e){return Mi(e)==="object"&&e!==null}var ov=Object.prototype.hasOwnProperty;function Jn(e){if(!vt(e))return!1;try{var n=e.constructor,t=n.prototype;return n&&t&&ov.call(t,"isPrototypeOf")}catch{return!1}}function le(e){return typeof e=="function"}function ue(e,n){if(e&&le(n))if(Array.isArray(e)||pe(e.length)){var t=e.length,o;for(o=0;o<t&&n.call(e,e[o],o,e)!==!1;o+=1);}else vt(e)&&Object.keys(e).forEach(function(i){n.call(e,e[i],i,e)});return e}var Oe=Object.assign||function(n){for(var t=arguments.length,o=new Array(t>1?t-1:0),i=1;i<t;i++)o[i-1]=arguments[i];return vt(n)&&o.length>0&&o.forEach(function(r){vt(r)&&Object.keys(r).forEach(function(a){n[a]=r[a]})}),n},iv=/^(?:width|height|left|top|marginLeft|marginTop)$/;function Ke(e,n){var t=e.style;ue(n,function(o,i){iv.test(i)&&pe(o)&&(o+="px"),t[i]=o})}function rv(e){return $t(e)?e.replace(/&(?!amp;|quot;|#39;|lt;|gt;)/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;"):e}function Zn(e,n){return!e||!n?!1:e.classList?e.classList.contains(n):e.className.indexOf(n)>-1}function q(e,n){if(!(!e||!n)){if(pe(e.length)){ue(e,function(o){q(o,n)});return}if(e.classList){e.classList.add(n);return}var t=e.className.trim();t?t.indexOf(n)<0&&(e.className="".concat(t," ").concat(n)):e.className=n}}function J(e,n){if(!(!e||!n)){if(pe(e.length)){ue(e,function(t){J(t,n)});return}if(e.classList){e.classList.remove(n);return}e.className.indexOf(n)>=0&&(e.className=e.className.replace(n,""))}}function Ht(e,n,t){if(n){if(pe(e.length)){ue(e,function(o){Ht(o,n,t)});return}t?q(e,n):J(e,n)}}var av=/([a-z\d])([A-Z])/g;function sr(e){return e.replace(av,"$1-$2").toLowerCase()}function et(e,n){return vt(e[n])?e[n]:e.dataset?e.dataset[n]:e.getAttribute("data-".concat(sr(n)))}function ji(e,n,t){vt(t)?e[n]=t:e.dataset?e.dataset[n]=t:e.setAttribute("data-".concat(sr(n)),t)}var El=function(){var e=!1;if(Xo){var n=!1,t=function(){},o=Object.defineProperty({},"once",{get:function(){return e=!0,n},set:function(r){n=r}});pn.addEventListener("test",t,o),pn.removeEventListener("test",t,o)}return e}();function ce(e,n,t){var o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},i=t;n.trim().split(ar).forEach(function(r){if(!El){var a=e.listeners;a&&a[r]&&a[r][t]&&(i=a[r][t],delete a[r][t],Object.keys(a[r]).length===0&&delete a[r],Object.keys(a).length===0&&delete e.listeners)}e.removeEventListener(r,i,o)})}function Y(e,n,t){var o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},i=t;n.trim().split(ar).forEach(function(r){if(o.once&&!El){var a=e.listeners,s=a===void 0?{}:a;i=function(){delete s[r][t],e.removeEventListener(r,i,o);for(var c=arguments.length,f=new Array(c),d=0;d<c;d++)f[d]=arguments[d];t.apply(e,f)},s[r]||(s[r]={}),s[r][t]&&e.removeEventListener(r,s[r][t],o),s[r][t]=i,e.listeners=s}e.addEventListener(r,i,o)})}function be(e,n,t,o){var i;return le(Event)&&le(CustomEvent)?i=new CustomEvent(n,ir({bubbles:!0,cancelable:!0,detail:t},o)):(i=document.createEvent("CustomEvent"),i.initCustomEvent(n,!0,!0,t)),e.dispatchEvent(i)}function sv(e){var n=e.getBoundingClientRect();return{left:n.left+(window.pageXOffset-document.documentElement.clientLeft),top:n.top+(window.pageYOffset-document.documentElement.clientTop)}}function mo(e){var n=e.rotate,t=e.scaleX,o=e.scaleY,i=e.translateX,r=e.translateY,a=[];pe(i)&&i!==0&&a.push("translateX(".concat(i,"px)")),pe(r)&&r!==0&&a.push("translateY(".concat(r,"px)")),pe(n)&&n!==0&&a.push("rotate(".concat(n,"deg)")),pe(t)&&t!==1&&a.push("scaleX(".concat(t,")")),pe(o)&&o!==1&&a.push("scaleY(".concat(o,")"));var s=a.length?a.join(" "):"none";return{WebkitTransform:s,msTransform:s,transform:s}}function lv(e){return $t(e)?decodeURIComponent(e.replace(/^.*\//,"").replace(/[?&#].*$/,"")):""}var fi=pn.navigator&&/Version\/\d+(\.\d+)+?\s+Safari/i.test(pn.navigator.userAgent);function Nl(e,n,t){var o=document.createElement("img");if(e.naturalWidth&&!fi)return t(e.naturalWidth,e.naturalHeight),o;var i=document.body||document.documentElement;return o.onload=function(){t(o.width,o.height),fi||i.removeChild(o)},ue(n.inheritedAttributes,function(r){var a=e.getAttribute(r);a!==null&&o.setAttribute(r,a)}),o.src=e.src,fi||(o.style.cssText="left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;",i.appendChild(o)),o}function to(e){switch(e){case 2:return Zf;case 3:return Kf;case 4:return Wf;default:return""}}function cv(e){var n=ir({},e),t=[];return ue(e,function(o,i){delete n[i],ue(n,function(r){var a=Math.abs(o.startX-r.startX),s=Math.abs(o.startY-r.startY),l=Math.abs(o.endX-r.endX),c=Math.abs(o.endY-r.endY),f=Math.sqrt(a*a+s*s),d=Math.sqrt(l*l+c*c),u=(d-f)/f;t.push(u)})}),t.sort(function(o,i){return Math.abs(o)<Math.abs(i)}),t[0]}function oo(e,n){var t=e.pageX,o=e.pageY,i={endX:t,endY:o};return n?i:ir({timeStamp:Date.now(),startX:t,startY:o},i)}function dv(e){var n=0,t=0,o=0;return ue(e,function(i){var r=i.startX,a=i.startY;n+=r,t+=a,o+=1}),n/=o,t/=o,{pageX:n,pageY:t}}var fv={render:function(){this.initContainer(),this.initViewer(),this.initList(),this.renderViewer()},initBody:function(){var n=this.element.ownerDocument,t=n.body||n.documentElement;this.body=t,this.scrollbarWidth=window.innerWidth-n.documentElement.clientWidth,this.initialBodyPaddingRight=t.style.paddingRight,this.initialBodyComputedPaddingRight=window.getComputedStyle(t).paddingRight},initContainer:function(){this.containerData={width:window.innerWidth,height:window.innerHeight}},initViewer:function(){var n=this.options,t=this.parent,o;n.inline&&(o={width:Math.max(t.offsetWidth,n.minWidth),height:Math.max(t.offsetHeight,n.minHeight)},this.parentData=o),(this.fulled||!o)&&(o=this.containerData),this.viewerData=Oe({},o)},renderViewer:function(){this.options.inline&&!this.fulled&&Ke(this.viewer,this.viewerData)},initList:function(){var n=this,t=this.element,o=this.options,i=this.list,r=[];i.innerHTML="",ue(this.images,function(a,s){var l=a.src,c=a.alt||lv(l),f=n.getImageURL(a);if(l||f){var d=document.createElement("li"),u=document.createElement("img");ue(o.inheritedAttributes,function(g){var p=a.getAttribute(g);p!==null&&u.setAttribute(g,p)}),o.navbar&&(u.src=l||f),u.alt=c,u.setAttribute("data-original-url",f||l),d.setAttribute("data-index",s),d.setAttribute("data-viewer-action","view"),d.setAttribute("role","button"),o.keyboard&&d.setAttribute("tabindex",0),d.appendChild(u),i.appendChild(d),r.push(d)}}),this.items=r,ue(r,function(a){var s=a.firstElementChild,l,c;ji(s,"filled",!0),o.loading&&q(a,lt),Y(s,He,l=function(d){ce(s,Gn,c),o.loading&&J(a,lt),n.loadImage(d)},{once:!0}),Y(s,Gn,c=function(){ce(s,He,l),o.loading&&J(a,lt)},{once:!0})}),o.transition&&Y(t,Ut,function(){q(i,xe)},{once:!0})},renderList:function(){var n=this.index,t=this.items[n];if(t){var o=t.nextElementSibling,i=parseInt(window.getComputedStyle(o||t).marginLeft,10),r=t.offsetWidth,a=r+i;Ke(this.list,Oe({width:a*this.length-i},mo({translateX:(this.viewerData.width-r)/2-a*n})))}},resetList:function(){var n=this.list;n.innerHTML="",J(n,xe),Ke(n,mo({translateX:0}))},initImage:function(n){var t=this,o=this.options,i=this.image,r=this.viewerData,a=this.footer.offsetHeight,s=r.width,l=Math.max(r.height-a,a),c=this.imageData||{},f;this.imageInitializing={abort:function(){f.onload=null}},f=Nl(i,o,function(d,u){var g=d/u,p=Math.max(0,Math.min(1,o.initialCoverage)),x=s,D=l;t.imageInitializing=!1,l*g>s?D=s/g:x=l*g,p=pe(p)?p:.9,x=Math.min(x*p,d),D=Math.min(D*p,u);var k=(s-x)/2,S=(l-D)/2,F={left:k,top:S,x:k,y:S,width:x,height:D,oldRatio:1,ratio:x/d,aspectRatio:g,naturalWidth:d,naturalHeight:u},T=Oe({},F);o.rotatable&&(F.rotate=c.rotate||0,T.rotate=0),o.scalable&&(F.scaleX=c.scaleX||1,F.scaleY=c.scaleY||1,T.scaleX=1,T.scaleY=1),t.imageData=F,t.initialImageData=T,n&&n()})},renderImage:function(n){var t=this,o=this.image,i=this.imageData;if(Ke(o,Oe({width:i.width,height:i.height,marginLeft:i.x,marginTop:i.y},mo(i))),n)if((this.viewing||this.moving||this.rotating||this.scaling||this.zooming)&&this.options.transition&&Zn(o,xe)){var r=function(){t.imageRendering=!1,n()};this.imageRendering={abort:function(){ce(o,Ye,r)}},Y(o,Ye,r,{once:!0})}else n()},resetImage:function(){var n=this.image;n&&(this.viewing&&this.viewing.abort(),n.parentNode.removeChild(n),this.image=null,this.title.innerHTML="")}},vv={bind:function(){var n=this.options,t=this.viewer,o=this.canvas,i=this.element.ownerDocument;Y(t,ft,this.onClick=this.click.bind(this)),Y(t,xa,this.onDragStart=this.dragstart.bind(this)),Y(o,wa,this.onPointerDown=this.pointerdown.bind(this)),Y(i,Ca,this.onPointerMove=this.pointermove.bind(this)),Y(i,Pa,this.onPointerUp=this.pointerup.bind(this)),Y(i,ba,this.onKeyDown=this.keydown.bind(this)),Y(window,Fa,this.onResize=this.resize.bind(this)),n.zoomable&&n.zoomOnWheel&&Y(t,ka,this.onWheel=this.wheel.bind(this),{passive:!1,capture:!0}),n.toggleOnDblclick&&Y(o,Vi,this.onDblclick=this.dblclick.bind(this))},unbind:function(){var n=this.options,t=this.viewer,o=this.canvas,i=this.element.ownerDocument;ce(t,ft,this.onClick),ce(t,xa,this.onDragStart),ce(o,wa,this.onPointerDown),ce(i,Ca,this.onPointerMove),ce(i,Pa,this.onPointerUp),ce(i,ba,this.onKeyDown),ce(window,Fa,this.onResize),n.zoomable&&n.zoomOnWheel&&ce(t,ka,this.onWheel,{passive:!1,capture:!0}),n.toggleOnDblclick&&ce(o,Vi,this.onDblclick)}},uv={click:function(n){var t=this.options,o=this.imageData,i=n.target,r=et(i,ko);switch(!r&&i.localName==="img"&&i.parentElement.localName==="li"&&(i=i.parentElement,r=et(i,ko)),st&&n.isTrusted&&i===this.canvas&&clearTimeout(this.clickCanvasTimeout),r){case"mix":this.played?this.stop():t.inline?this.fulled?this.exit():this.full():this.hide();break;case"hide":this.pointerMoved||this.hide();break;case"view":this.view(et(i,"index"));break;case"zoom-in":this.zoom(.1,!0);break;case"zoom-out":this.zoom(-.1,!0);break;case"one-to-one":this.toggle();break;case"reset":this.reset();break;case"prev":this.prev(t.loop);break;case"play":this.play(t.fullscreen);break;case"next":this.next(t.loop);break;case"rotate-left":this.rotate(-90);break;case"rotate-right":this.rotate(90);break;case"flip-horizontal":this.scaleX(-o.scaleX||-1);break;case"flip-vertical":this.scaleY(-o.scaleY||-1);break;default:this.played&&this.stop()}},dblclick:function(n){n.preventDefault(),this.viewed&&n.target===this.image&&(st&&n.isTrusted&&clearTimeout(this.doubleClickImageTimeout),this.toggle(n.isTrusted?n:n.detail&&n.detail.originalEvent))},load:function(){var n=this;this.timeout&&(clearTimeout(this.timeout),this.timeout=!1);var t=this.element,o=this.options,i=this.image,r=this.index,a=this.viewerData;J(i,Rt),o.loading&&J(this.canvas,lt),i.style.cssText="height:0;"+"margin-left:".concat(a.width/2,"px;")+"margin-top:".concat(a.height/2,"px;")+"max-width:none!important;position:relative;width:0;",this.initImage(function(){Ht(i,Qf,o.movable),Ht(i,xe,o.transition),n.renderImage(function(){n.viewed=!0,n.viewing=!1,le(o.viewed)&&Y(t,Ut,o.viewed,{once:!0}),be(t,Ut,{originalImage:n.images[r],index:r,image:i},{cancelable:!1})})})},loadImage:function(n){var t=n.target,o=t.parentNode,i=o.offsetWidth||30,r=o.offsetHeight||50,a=!!et(t,"filled");Nl(t,this.options,function(s,l){var c=s/l,f=i,d=r;r*c>i?a?f=r*c:d=i/c:a?d=i/c:f=r*c,Ke(t,Oe({width:f,height:d},mo({translateX:(i-f)/2,translateY:(r-d)/2})))})},keydown:function(n){var t=this.options;if(t.keyboard){var o=n.keyCode||n.which||n.charCode;switch(o){case 13:this.viewer.contains(n.target)&&this.click(n);break}if(this.fulled)switch(o){case 27:this.played?this.stop():t.inline?this.fulled&&this.exit():this.hide();break;case 32:this.played&&this.stop();break;case 37:this.played&&this.playing?this.playing.prev():this.prev(t.loop);break;case 38:n.preventDefault(),this.zoom(t.zoomRatio,!0);break;case 39:this.played&&this.playing?this.playing.next():this.next(t.loop);break;case 40:n.preventDefault(),this.zoom(-t.zoomRatio,!0);break;case 48:case 49:n.ctrlKey&&(n.preventDefault(),this.toggle());break}}},dragstart:function(n){n.target.localName==="img"&&n.preventDefault()},pointerdown:function(n){var t=this.options,o=this.pointers,i=n.buttons,r=n.button;if(this.pointerMoved=!1,!(!this.viewed||this.showing||this.viewing||this.hiding||(n.type==="mousedown"||n.type==="pointerdown"&&n.pointerType==="mouse")&&(pe(i)&&i!==1||pe(r)&&r!==0||n.ctrlKey))){n.preventDefault(),n.changedTouches?ue(n.changedTouches,function(s){o[s.identifier]=oo(s)}):o[n.pointerId||0]=oo(n);var a=t.movable?vo:!1;t.zoomOnTouch&&t.zoomable&&Object.keys(o).length>1?a=wt:t.slideOnTouch&&(n.pointerType==="touch"||n.type==="touchstart")&&this.isSwitchable()&&(a=Al),t.transition&&(a===vo||a===wt)&&J(this.image,xe),this.action=a}},pointermove:function(n){var t=this.pointers,o=this.action;!this.viewed||!o||(n.preventDefault(),n.changedTouches?ue(n.changedTouches,function(i){Oe(t[i.identifier]||{},oo(i,!0))}):Oe(t[n.pointerId||0]||{},oo(n,!0)),this.change(n))},pointerup:function(n){var t=this,o=this.options,i=this.action,r=this.pointers,a;n.changedTouches?ue(n.changedTouches,function(s){a=r[s.identifier],delete r[s.identifier]}):(a=r[n.pointerId||0],delete r[n.pointerId||0]),i&&(n.preventDefault(),o.transition&&(i===vo||i===wt)&&q(this.image,xe),this.action=!1,st&&i!==wt&&a&&Date.now()-a.timeStamp<500&&(clearTimeout(this.clickCanvasTimeout),clearTimeout(this.doubleClickImageTimeout),o.toggleOnDblclick&&this.viewed&&n.target===this.image?this.imageClicked?(this.imageClicked=!1,this.doubleClickImageTimeout=setTimeout(function(){be(t.image,Vi,{originalEvent:n})},50)):(this.imageClicked=!0,this.doubleClickImageTimeout=setTimeout(function(){t.imageClicked=!1},500)):(this.imageClicked=!1,o.backdrop&&o.backdrop!=="static"&&n.target===this.canvas&&(this.clickCanvasTimeout=setTimeout(function(){be(t.canvas,ft,{originalEvent:n})},50)))))},resize:function(){var n=this;if(!(!this.isShown||this.hiding)&&(this.fulled&&(this.close(),this.initBody(),this.open()),this.initContainer(),this.initViewer(),this.renderViewer(),this.renderList(),this.viewed&&this.initImage(function(){n.renderImage()}),this.played)){if(this.options.fullscreen&&this.fulled&&!(document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement)){this.stop();return}ue(this.player.getElementsByTagName("img"),function(t){Y(t,He,n.loadImage.bind(n),{once:!0}),be(t,He)})}},wheel:function(n){var t=this;if(this.viewed&&(n.preventDefault(),!this.wheeling)){this.wheeling=!0,setTimeout(function(){t.wheeling=!1},50);var o=Number(this.options.zoomRatio)||.1,i=1;n.deltaY?i=n.deltaY>0?1:-1:n.wheelDelta?i=-n.wheelDelta/120:n.detail&&(i=n.detail>0?1:-1),this.zoom(-i*o,!0,null,n)}}},mv={show:function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,t=this.element,o=this.options;if(o.inline||this.showing||this.isShown||this.showing)return this;if(!this.ready)return this.build(),this.ready&&this.show(n),this;if(le(o.show)&&Y(t,_a,o.show,{once:!0}),be(t,_a)===!1||!this.ready)return this;this.hiding&&this.transitioning.abort(),this.showing=!0,this.open();var i=this.viewer;if(J(i,In),i.setAttribute("role","dialog"),i.setAttribute("aria-labelledby",this.title.id),i.setAttribute("aria-modal",!0),i.removeAttribute("aria-hidden"),o.transition&&!n){var r=this.shown.bind(this);this.transitioning={abort:function(){ce(i,Ye,r),J(i,$e)}},q(i,xe),i.initialOffsetWidth=i.offsetWidth,Y(i,Ye,r,{once:!0}),q(i,$e)}else q(i,$e),this.shown();return this},hide:function(){var n=this,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,o=this.element,i=this.options;if(i.inline||this.hiding||!(this.isShown||this.showing))return this;if(le(i.hide)&&Y(o,Ta,i.hide,{once:!0}),be(o,Ta)===!1)return this;this.showing&&this.transitioning.abort(),this.hiding=!0,this.played?this.stop():this.viewing&&this.viewing.abort();var r=this.viewer,a=this.image,s=function(){J(r,$e),n.hidden()};if(i.transition&&!t){var l=function(d){d&&d.target===r&&(ce(r,Ye,l),n.hidden())},c=function(){Zn(r,xe)?(Y(r,Ye,l),J(r,$e)):s()};this.transitioning={abort:function(){n.viewed&&Zn(a,xe)?ce(a,Ye,c):Zn(r,xe)&&ce(r,Ye,l)}},this.viewed&&Zn(a,xe)?(Y(a,Ye,c,{once:!0}),this.zoomTo(0,!1,null,null,!0)):c()}else s();return this},view:function(){var n=this,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.options.initialViewIndex;if(t=Number(t)||0,this.hiding||this.played||t<0||t>=this.length||this.viewed&&t===this.index)return this;if(!this.isShown)return this.index=t,this.show();this.viewing&&this.viewing.abort();var o=this.element,i=this.options,r=this.title,a=this.canvas,s=this.items[t],l=s.querySelector("img"),c=et(l,"originalUrl"),f=l.getAttribute("alt"),d=document.createElement("img");if(ue(i.inheritedAttributes,function(D){var k=l.getAttribute(D);k!==null&&d.setAttribute(D,k)}),d.src=c,d.alt=f,le(i.view)&&Y(o,Ma,i.view,{once:!0}),be(o,Ma,{originalImage:this.images[t],index:t,image:d})===!1||!this.isShown||this.hiding||this.played)return this;var u=this.items[this.index];u&&(J(u,eo),u.removeAttribute("aria-selected")),q(s,eo),s.setAttribute("aria-selected",!0),i.focus&&s.focus(),this.image=d,this.viewed=!1,this.index=t,this.imageData={},q(d,Rt),i.loading&&q(a,lt),a.innerHTML="",a.appendChild(d),this.renderList(),r.innerHTML="";var g=function(){var k=n.imageData,S=Array.isArray(i.title)?i.title[1]:i.title;r.innerHTML=rv(le(S)?S.call(n,d,k):"".concat(f," (").concat(k.naturalWidth," × ").concat(k.naturalHeight,")"))},p,x;return Y(o,Ut,g,{once:!0}),this.viewing={abort:function(){ce(o,Ut,g),d.complete?n.imageRendering?n.imageRendering.abort():n.imageInitializing&&n.imageInitializing.abort():(d.src="",ce(d,He,p),n.timeout&&clearTimeout(n.timeout))}},d.complete?this.load():(Y(d,He,p=function(){ce(d,Gn,x),n.load()},{once:!0}),Y(d,Gn,x=function(){ce(d,He,p),n.timeout&&(clearTimeout(n.timeout),n.timeout=!1),J(d,Rt),i.loading&&J(n.canvas,lt)},{once:!0}),this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(function(){J(d,Rt),n.timeout=!1},1e3)),this},prev:function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,t=this.index-1;return t<0&&(t=n?this.length-1:0),this.view(t),this},next:function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,t=this.length-1,o=this.index+1;return o>t&&(o=n?0:t),this.view(o),this},move:function(n){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:n,o=this.imageData;return this.moveTo(Qn(n)?n:o.x+Number(n),Qn(t)?t:o.y+Number(t)),this},moveTo:function(n){var t=this,o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:n,i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,r=this.element,a=this.options,s=this.imageData;if(n=Number(n),o=Number(o),this.viewed&&!this.played&&a.movable){var l=s.x,c=s.y,f=!1;if(pe(n)?f=!0:n=l,pe(o)?f=!0:o=c,f){if(le(a.move)&&Y(r,Da,a.move,{once:!0}),be(r,Da,{x:n,y:o,oldX:l,oldY:c,originalEvent:i})===!1)return this;s.x=n,s.y=o,s.left=n,s.top=o,this.moving=!0,this.renderImage(function(){t.moving=!1,le(a.moved)&&Y(r,Va,a.moved,{once:!0}),be(r,Va,{x:n,y:o,oldX:l,oldY:c,originalEvent:i},{cancelable:!1})})}}return this},rotate:function(n){return this.rotateTo((this.imageData.rotate||0)+Number(n)),this},rotateTo:function(n){var t=this,o=this.element,i=this.options,r=this.imageData;if(n=Number(n),pe(n)&&this.viewed&&!this.played&&i.rotatable){var a=r.rotate;if(le(i.rotate)&&Y(o,ja,i.rotate,{once:!0}),be(o,ja,{degree:n,oldDegree:a})===!1)return this;r.rotate=n,this.rotating=!0,this.renderImage(function(){t.rotating=!1,le(i.rotated)&&Y(o,Aa,i.rotated,{once:!0}),be(o,Aa,{degree:n,oldDegree:a},{cancelable:!1})})}return this},scaleX:function(n){return this.scale(n,this.imageData.scaleY),this},scaleY:function(n){return this.scale(this.imageData.scaleX,n),this},scale:function(n){var t=this,o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:n,i=this.element,r=this.options,a=this.imageData;if(n=Number(n),o=Number(o),this.viewed&&!this.played&&r.scalable){var s=a.scaleX,l=a.scaleY,c=!1;if(pe(n)?c=!0:n=s,pe(o)?c=!0:o=l,c){if(le(r.scale)&&Y(i,Ea,r.scale,{once:!0}),be(i,Ea,{scaleX:n,scaleY:o,oldScaleX:s,oldScaleY:l})===!1)return this;a.scaleX=n,a.scaleY=o,this.scaling=!0,this.renderImage(function(){t.scaling=!1,le(r.scaled)&&Y(i,Na,r.scaled,{once:!0}),be(i,Na,{scaleX:n,scaleY:o,oldScaleX:s,oldScaleY:l},{cancelable:!1})})}}return this},zoom:function(n){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,o=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,i=arguments.length>3&&arguments[3]!==void 0?arguments[3]:null,r=this.imageData;return n=Number(n),n<0?n=1/(1-n):n=1+n,this.zoomTo(r.width*n/r.naturalWidth,t,o,i),this},zoomTo:function(n){var t=this,o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:null,a=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!1,s=this.element,l=this.options,c=this.pointers,f=this.imageData,d=f.x,u=f.y,g=f.width,p=f.height,x=f.naturalWidth,D=f.naturalHeight;if(n=Math.max(0,n),pe(n)&&this.viewed&&!this.played&&(a||l.zoomable)){if(!a){var k=Math.max(.01,l.minZoomRatio),S=Math.min(100,l.maxZoomRatio);n=Math.min(Math.max(n,k),S)}if(r)switch(r.type){case"wheel":l.zoomRatio>=.055&&n>.95&&n<1.05&&(n=1);break;case"pointermove":case"touchmove":case"mousemove":n>.99&&n<1.01&&(n=1);break}var F=x*n,T=D*n,B=F-g,j=T-p,O=f.ratio;if(le(l.zoom)&&Y(s,Ia,l.zoom,{once:!0}),be(s,Ia,{ratio:n,oldRatio:O,originalEvent:r})===!1)return this;if(this.zooming=!0,r){var K=sv(this.viewer),E=c&&Object.keys(c).length>0?dv(c):{pageX:r.pageX,pageY:r.pageY};f.x-=B*((E.pageX-K.left-d)/g),f.y-=j*((E.pageY-K.top-u)/p)}else Jn(i)&&pe(i.x)&&pe(i.y)?(f.x-=B*((i.x-d)/g),f.y-=j*((i.y-u)/p)):(f.x-=B/2,f.y-=j/2);f.left=f.x,f.top=f.y,f.width=F,f.height=T,f.oldRatio=O,f.ratio=n,this.renderImage(function(){t.zooming=!1,le(l.zoomed)&&Y(s,La,l.zoomed,{once:!0}),be(s,La,{ratio:n,oldRatio:O,originalEvent:r},{cancelable:!1})}),o&&this.tooltip()}return this},play:function(){var n=this,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;if(!this.isShown||this.played)return this;var o=this.element,i=this.options;if(le(i.play)&&Y(o,Ba,i.play,{once:!0}),be(o,Ba)===!1)return this;var r=this.player,a=this.loadImage.bind(this),s=[],l=0,c=0;if(this.played=!0,this.onLoadWhenPlay=a,t&&this.requestFullscreen(t),q(r,Yn),ue(this.items,function(u,g){var p=u.querySelector("img"),x=document.createElement("img");x.src=et(p,"originalUrl"),x.alt=p.getAttribute("alt"),x.referrerPolicy=p.referrerPolicy,l+=1,q(x,uo),Ht(x,xe,i.transition),Zn(u,eo)&&(q(x,$e),c=g),s.push(x),Y(x,He,a,{once:!0}),r.appendChild(x)}),pe(i.interval)&&i.interval>0){var f=function(){clearTimeout(n.playing.timeout),J(s[c],$e),c-=1,c=c>=0?c:l-1,q(s[c],$e),n.playing.timeout=setTimeout(f,i.interval)},d=function(){clearTimeout(n.playing.timeout),J(s[c],$e),c+=1,c=c<l?c:0,q(s[c],$e),n.playing.timeout=setTimeout(d,i.interval)};l>1&&(this.playing={prev:f,next:d,timeout:setTimeout(d,i.interval)})}return this},stop:function(){var n=this;if(!this.played)return this;var t=this.element,o=this.options;if(le(o.stop)&&Y(t,Oa,o.stop,{once:!0}),be(t,Oa)===!1)return this;var i=this.player;return clearTimeout(this.playing.timeout),this.playing=!1,this.played=!1,ue(i.getElementsByTagName("img"),function(r){ce(r,He,n.onLoadWhenPlay)}),J(i,Yn),i.innerHTML="",this.exitFullscreen(),this},full:function(){var n=this,t=this.options,o=this.viewer,i=this.image,r=this.list;return!this.isShown||this.played||this.fulled||!t.inline?this:(this.fulled=!0,this.open(),q(this.button,ha),t.transition&&(J(r,xe),this.viewed&&J(i,xe)),q(o,Di),o.setAttribute("role","dialog"),o.setAttribute("aria-labelledby",this.title.id),o.setAttribute("aria-modal",!0),o.removeAttribute("style"),Ke(o,{zIndex:t.zIndex}),t.focus&&this.enforceFocus(),this.initContainer(),this.viewerData=Oe({},this.containerData),this.renderList(),this.viewed&&this.initImage(function(){n.renderImage(function(){t.transition&&setTimeout(function(){q(i,xe),q(r,xe)},0)})}),this)},exit:function(){var n=this,t=this.options,o=this.viewer,i=this.image,r=this.list;return!this.isShown||this.played||!this.fulled||!t.inline?this:(this.fulled=!1,this.close(),J(this.button,ha),t.transition&&(J(r,xe),this.viewed&&J(i,xe)),t.focus&&this.clearEnforceFocus(),o.removeAttribute("role"),o.removeAttribute("aria-labelledby"),o.removeAttribute("aria-modal"),J(o,Di),Ke(o,{zIndex:t.zIndexInline}),this.viewerData=Oe({},this.parentData),this.renderViewer(),this.renderList(),this.viewed&&this.initImage(function(){n.renderImage(function(){t.transition&&setTimeout(function(){q(i,xe),q(r,xe)},0)})}),this)},tooltip:function(){var n=this,t=this.options,o=this.tooltipBox,i=this.imageData;return!this.viewed||this.played||!t.tooltip?this:(o.textContent="".concat(Math.round(i.ratio*100),"%"),this.tooltipping?clearTimeout(this.tooltipping):t.transition?(this.fading&&be(o,Ye),q(o,Yn),q(o,uo),q(o,xe),o.removeAttribute("aria-hidden"),o.initialOffsetWidth=o.offsetWidth,q(o,$e)):(q(o,Yn),o.removeAttribute("aria-hidden")),this.tooltipping=setTimeout(function(){t.transition?(Y(o,Ye,function(){J(o,Yn),J(o,uo),J(o,xe),o.setAttribute("aria-hidden",!0),n.fading=!1},{once:!0}),J(o,$e),n.fading=!0):(J(o,Yn),o.setAttribute("aria-hidden",!0)),n.tooltipping=!1},1e3),this)},toggle:function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;return this.imageData.ratio===1?this.zoomTo(this.imageData.oldRatio,!0,null,n):this.zoomTo(1,!0,null,n),this},reset:function(){return this.viewed&&!this.played&&(this.imageData=Oe({},this.initialImageData),this.renderImage()),this},update:function(){var n=this,t=this.element,o=this.options,i=this.isImg;if(i&&!t.parentNode)return this.destroy();var r=[];if(ue(i?[t]:t.querySelectorAll("img"),function(c){le(o.filter)?o.filter.call(n,c)&&r.push(c):n.getImageURL(c)&&r.push(c)}),!r.length)return this;if(this.images=r,this.length=r.length,this.ready){var a=[];if(ue(this.items,function(c,f){var d=c.querySelector("img"),u=r[f];u&&d?(u.src!==d.src||u.alt!==d.alt)&&a.push(f):a.push(f)}),Ke(this.list,{width:"auto"}),this.initList(),this.isShown)if(this.length){if(this.viewed){var s=a.indexOf(this.index);if(s>=0)this.viewed=!1,this.view(Math.max(Math.min(this.index-s,this.length-1),0));else{var l=this.items[this.index];q(l,eo),l.setAttribute("aria-selected",!0)}}}else this.image=null,this.viewed=!1,this.index=0,this.imageData={},this.canvas.innerHTML="",this.title.innerHTML=""}else this.build();return this},destroy:function(){var n=this.element,t=this.options;return n[W]?(this.destroyed=!0,this.ready?(this.played&&this.stop(),t.inline?(this.fulled&&this.exit(),this.unbind()):this.isShown?(this.viewing&&(this.imageRendering?this.imageRendering.abort():this.imageInitializing&&this.imageInitializing.abort()),this.hiding&&this.transitioning.abort(),this.hidden()):this.showing&&(this.transitioning.abort(),this.hidden()),this.ready=!1,this.viewer.parentNode.removeChild(this.viewer)):t.inline&&(this.delaying?this.delaying.abort():this.initializing&&this.initializing.abort()),t.inline||ce(n,ft,this.onStart),n[W]=void 0,this):this}},gv={getImageURL:function(n){var t=this.options.url;return $t(t)?t=n.getAttribute(t):le(t)?t=t.call(this,n):t="",t},enforceFocus:function(){var n=this;this.clearEnforceFocus(),Y(document,ya,this.onFocusin=function(t){var o=n.viewer,i=t.target;if(!(i===document||i===o||o.contains(i))){for(;i;){if(i.getAttribute("tabindex")!==null||i.getAttribute("aria-modal")==="true")return;i=i.parentElement}o.focus()}})},clearEnforceFocus:function(){this.onFocusin&&(ce(document,ya,this.onFocusin),this.onFocusin=null)},open:function(){var n=this.body;q(n,pa),this.scrollbarWidth>0&&(n.style.paddingRight="".concat(this.scrollbarWidth+(parseFloat(this.initialBodyComputedPaddingRight)||0),"px"))},close:function(){var n=this.body;J(n,pa),this.scrollbarWidth>0&&(n.style.paddingRight=this.initialBodyPaddingRight)},shown:function(){var n=this.element,t=this.options,o=this.viewer;this.fulled=!0,this.isShown=!0,this.render(),this.bind(),this.showing=!1,t.focus&&(o.focus(),this.enforceFocus()),le(t.shown)&&Y(n,za,t.shown,{once:!0}),be(n,za)!==!1&&this.ready&&this.isShown&&!this.hiding&&this.view(this.index)},hidden:function(){var n=this.element,t=this.options,o=this.viewer;t.fucus&&this.clearEnforceFocus(),this.close(),this.unbind(),q(o,In),o.removeAttribute("role"),o.removeAttribute("aria-labelledby"),o.removeAttribute("aria-modal"),o.setAttribute("aria-hidden",!0),this.resetList(),this.resetImage(),this.fulled=!1,this.viewed=!1,this.isShown=!1,this.hiding=!1,this.destroyed||(le(t.hidden)&&Y(n,Ra,t.hidden,{once:!0}),be(n,Ra,null,{cancelable:!1}))},requestFullscreen:function(n){var t=this.element.ownerDocument;if(this.fulled&&!(t.fullscreenElement||t.webkitFullscreenElement||t.mozFullScreenElement||t.msFullscreenElement)){var o=t.documentElement;o.requestFullscreen?Jn(n)?o.requestFullscreen(n):o.requestFullscreen():o.webkitRequestFullscreen?o.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT):o.mozRequestFullScreen?o.mozRequestFullScreen():o.msRequestFullscreen&&o.msRequestFullscreen()}},exitFullscreen:function(){var n=this.element.ownerDocument;this.fulled&&(n.fullscreenElement||n.webkitFullscreenElement||n.mozFullScreenElement||n.msFullscreenElement)&&(n.exitFullscreen?n.exitFullscreen():n.webkitExitFullscreen?n.webkitExitFullscreen():n.mozCancelFullScreen?n.mozCancelFullScreen():n.msExitFullscreen&&n.msExitFullscreen())},change:function(n){var t=this.options,o=this.pointers,i=o[Object.keys(o)[0]];if(i){var r=i.endX-i.startX,a=i.endY-i.startY;switch(this.action){case vo:(r!==0||a!==0)&&(this.pointerMoved=!0,this.move(r,a,n));break;case wt:this.zoom(cv(o),!1,null,n);break;case Al:{this.action="switched";var s=Math.abs(r);s>1&&s>Math.abs(a)&&(this.pointers={},r>1?this.prev(t.loop):r<-1&&this.next(t.loop));break}}ue(o,function(l){l.startX=l.endX,l.startY=l.endY})}},isSwitchable:function(){var n=this.imageData,t=this.viewerData;return this.length>1&&n.x>=0&&n.y>=0&&n.width<=t.width&&n.height<=t.height}},hv=pn.Viewer,pv=function(e){return function(){return e+=1,e}}(-1),ut=function(){function e(n){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(Gf(this,e),!n||n.nodeType!==1)throw new Error("The first argument is required and must be an element.");this.element=n,this.options=Oe({},ga,Jn(t)&&t),this.action=!1,this.fading=!1,this.fulled=!1,this.hiding=!1,this.imageClicked=!1,this.imageData={},this.index=this.options.initialViewIndex,this.isImg=!1,this.isShown=!1,this.length=0,this.moving=!1,this.played=!1,this.playing=!1,this.pointers={},this.ready=!1,this.rotating=!1,this.scaling=!1,this.showing=!1,this.timeout=!1,this.tooltipping=!1,this.viewed=!1,this.viewing=!1,this.wheeling=!1,this.zooming=!1,this.pointerMoved=!1,this.id=pv(),this.init()}return Uf(e,[{key:"init",value:function(){var t=this,o=this.element,i=this.options;if(!o[W]){o[W]=this,i.focus&&!i.keyboard&&(i.focus=!1);var r=o.localName==="img",a=[];if(ue(r?[o]:o.querySelectorAll("img"),function(c){le(i.filter)?i.filter.call(t,c)&&a.push(c):t.getImageURL(c)&&a.push(c)}),this.isImg=r,this.length=a.length,this.images=a,this.initBody(),Qn(document.createElement(W).style.transition)&&(i.transition=!1),i.inline){var s=0,l=function(){if(s+=1,s===t.length){var f;t.initializing=!1,t.delaying={abort:function(){clearTimeout(f)}},f=setTimeout(function(){t.delaying=!1,t.build()},0)}};this.initializing={abort:function(){ue(a,function(f){f.complete||(ce(f,He,l),ce(f,Gn,l))})}},ue(a,function(c){if(c.complete)l();else{var f,d;Y(c,He,f=function(){ce(c,Gn,d),l()},{once:!0}),Y(c,Gn,d=function(){ce(c,He,f),l()},{once:!0})}})}else Y(o,ft,this.onStart=function(c){var f=c.target;f.localName==="img"&&(!le(i.filter)||i.filter.call(t,f))&&t.view(t.images.indexOf(f))})}}},{key:"build",value:function(){if(!this.ready){var t=this.element,o=this.options,i=t.parentNode,r=document.createElement("div");r.innerHTML=qf;var a=r.querySelector(".".concat(W,"-container")),s=a.querySelector(".".concat(W,"-title")),l=a.querySelector(".".concat(W,"-toolbar")),c=a.querySelector(".".concat(W,"-navbar")),f=a.querySelector(".".concat(W,"-button")),d=a.querySelector(".".concat(W,"-canvas"));if(this.parent=i,this.viewer=a,this.title=s,this.toolbar=l,this.navbar=c,this.button=f,this.canvas=d,this.footer=a.querySelector(".".concat(W,"-footer")),this.tooltipBox=a.querySelector(".".concat(W,"-tooltip")),this.player=a.querySelector(".".concat(W,"-player")),this.list=a.querySelector(".".concat(W,"-list")),a.id="".concat(W).concat(this.id),s.id="".concat(W,"Title").concat(this.id),q(s,o.title?to(Array.isArray(o.title)?o.title[0]:o.title):In),q(c,o.navbar?to(o.navbar):In),Ht(f,In,!o.button),o.keyboard&&f.setAttribute("tabindex",0),o.backdrop&&(q(a,"".concat(W,"-backdrop")),!o.inline&&o.backdrop!=="static"&&ji(d,ko,"hide")),$t(o.className)&&o.className&&o.className.split(ar).forEach(function(F){q(a,F)}),o.toolbar){var u=document.createElement("ul"),g=Jn(o.toolbar),p=no.slice(0,3),x=no.slice(7,9),D=no.slice(9);g||q(l,to(o.toolbar)),ue(g?o.toolbar:no,function(F,T){var B=g&&Jn(F),j=g?sr(T):F,O=B&&!Qn(F.show)?F.show:F;if(!(!O||!o.zoomable&&p.indexOf(j)!==-1||!o.rotatable&&x.indexOf(j)!==-1||!o.scalable&&D.indexOf(j)!==-1)){var K=B&&!Qn(F.size)?F.size:F,E=B&&!Qn(F.click)?F.click:F,$=document.createElement("li");o.keyboard&&$.setAttribute("tabindex",0),$.setAttribute("role","button"),q($,"".concat(W,"-").concat(j)),le(E)||ji($,ko,j),pe(O)&&q($,to(O)),["small","large"].indexOf(K)!==-1?q($,"".concat(W,"-").concat(K)):j==="play"&&q($,"".concat(W,"-large")),le(E)&&Y($,ft,E),u.appendChild($)}}),l.appendChild(u)}else q(l,In);if(!o.rotatable){var k=l.querySelectorAll('li[class*="rotate"]');q(k,Rt),ue(k,function(F){l.appendChild(F)})}if(o.inline)q(f,Yf),Ke(a,{zIndex:o.zIndexInline}),window.getComputedStyle(i).position==="static"&&Ke(i,{position:"relative"}),i.insertBefore(a,t.nextSibling);else{q(f,Xf),q(a,Di),q(a,uo),q(a,In),Ke(a,{zIndex:o.zIndex});var S=o.container;$t(S)&&(S=t.ownerDocument.querySelector(S)),S||(S=this.body),S.appendChild(a)}if(o.inline&&(this.render(),this.bind(),this.isShown=!0),this.ready=!0,le(o.ready)&&Y(t,Sa,o.ready,{once:!0}),be(t,Sa)===!1){this.ready=!1;return}this.ready&&o.inline&&this.view(this.index)}}}],[{key:"noConflict",value:function(){return window.Viewer=hv,e}},{key:"setDefaults",value:function(t){Oe(ga,Jn(t)&&t)}}])}();Oe(ut.prototype,fv,vv,uv,mv,gv);/*!
 * v-viewer v3.0.11
 * https://github.com/mirari/v-viewer#readme
 *
 * Copyright 2022 mirari
 * Released under the MIT license
 *
 * Date: 2022-10-25T08:49:33.301Z
 */var io=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function xv(e){return e}var Il=xv;function yv(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}var bv=yv,wv=bv,Ga=Math.max;function Cv(e,n,t){return n=Ga(n===void 0?e.length-1:n,0),function(){for(var o=arguments,i=-1,r=Ga(o.length-n,0),a=Array(r);++i<r;)a[i]=o[n+i];i=-1;for(var s=Array(n+1);++i<n;)s[i]=o[i];return s[n]=t(a),wv(e,this,s)}}var Pv=Cv;function Fv(e){return function(){return e}}var kv=Fv,Sv=typeof io=="object"&&io&&io.Object===Object&&io,Ll=Sv,_v=Ll,zv=typeof self=="object"&&self&&self.Object===Object&&self,Tv=_v||zv||Function("return this")(),Yo=Tv,Rv=Yo,Mv=Rv.Symbol,Bl=Mv,Ua=Bl,Ol=Object.prototype,Dv=Ol.hasOwnProperty,Vv=Ol.toString,yt=Ua?Ua.toStringTag:void 0;function jv(e){var n=Dv.call(e,yt),t=e[yt];try{e[yt]=void 0;var o=!0}catch{}var i=Vv.call(e);return o&&(n?e[yt]=t:delete e[yt]),i}var Av=jv,Ev=Object.prototype,Nv=Ev.toString;function Iv(e){return Nv.call(e)}var Lv=Iv,$a=Bl,Bv=Av,Ov=Lv,Gv="[object Null]",Uv="[object Undefined]",Ha=$a?$a.toStringTag:void 0;function $v(e){return e==null?e===void 0?Uv:Gv:Ha&&Ha in Object(e)?Bv(e):Ov(e)}var Wo=$v;function Hv(e){var n=typeof e;return e!=null&&(n=="object"||n=="function")}var mt=Hv,qv=Wo,Xv=mt,Yv="[object AsyncFunction]",Wv="[object Function]",Kv="[object GeneratorFunction]",Zv="[object Proxy]";function Qv(e){if(!Xv(e))return!1;var n=qv(e);return n==Wv||n==Kv||n==Yv||n==Zv}var Gl=Qv,Jv=Yo,eu=Jv["__core-js_shared__"],nu=eu,vi=nu,qa=function(){var e=/[^.]+$/.exec(vi&&vi.keys&&vi.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function tu(e){return!!qa&&qa in e}var ou=tu,iu=Function.prototype,ru=iu.toString;function au(e){if(e!=null){try{return ru.call(e)}catch{}try{return e+""}catch{}}return""}var su=au,lu=Gl,cu=ou,du=mt,fu=su,vu=/[\\^$.*+?()[\]{}|]/g,uu=/^\[object .+?Constructor\]$/,mu=Function.prototype,gu=Object.prototype,hu=mu.toString,pu=gu.hasOwnProperty,xu=RegExp("^"+hu.call(pu).replace(vu,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function yu(e){if(!du(e)||cu(e))return!1;var n=lu(e)?xu:uu;return n.test(fu(e))}var bu=yu;function wu(e,n){return e==null?void 0:e[n]}var Cu=wu,Pu=bu,Fu=Cu;function ku(e,n){var t=Fu(e,n);return Pu(t)?t:void 0}var Su=ku,_u=Su,zu=function(){try{var e=_u(Object,"defineProperty");return e({},"",{}),e}catch{}}(),Tu=zu,Ru=kv,Xa=Tu,Mu=Il,Du=Xa?function(e,n){return Xa(e,"toString",{configurable:!0,enumerable:!1,value:Ru(n),writable:!0})}:Mu,Vu=Du,ju=800,Au=16,Eu=Date.now;function Nu(e){var n=0,t=0;return function(){var o=Eu(),i=Au-(o-t);if(t=o,i>0){if(++n>=ju)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}var Iu=Nu,Lu=Vu,Bu=Iu,Ou=Bu(Lu),Gu=Ou,Uu=Il,$u=Pv,Hu=Gu;function qu(e,n){return Hu($u(e,n,Uu),e+"")}var Xu=qu;function Yu(e,n){return e===n||e!==e&&n!==n}var Ul=Yu,Wu=9007199254740991;function Ku(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=Wu}var $l=Ku,Zu=Gl,Qu=$l;function Ju(e){return e!=null&&Qu(e.length)&&!Zu(e)}var Hl=Ju,em=9007199254740991,nm=/^(?:0|[1-9]\d*)$/;function tm(e,n){var t=typeof e;return n=n??em,!!n&&(t=="number"||t!="symbol"&&nm.test(e))&&e>-1&&e%1==0&&e<n}var ql=tm,om=Ul,im=Hl,rm=ql,am=mt;function sm(e,n,t){if(!am(t))return!1;var o=typeof n;return(o=="number"?im(t)&&rm(n,t.length):o=="string"&&n in t)?om(t[n],e):!1}var lm=sm;function cm(e,n){for(var t=-1,o=Array(e);++t<e;)o[t]=n(t);return o}var dm=cm;function fm(e){return e!=null&&typeof e=="object"}var Ko=fm,vm=Wo,um=Ko,mm="[object Arguments]";function gm(e){return um(e)&&vm(e)==mm}var hm=gm,Ya=hm,pm=Ko,Xl=Object.prototype,xm=Xl.hasOwnProperty,ym=Xl.propertyIsEnumerable,bm=Ya(function(){return arguments}())?Ya:function(e){return pm(e)&&xm.call(e,"callee")&&!ym.call(e,"callee")},wm=bm,Cm=Array.isArray,Pm=Cm,Ai={exports:{}};function Fm(){return!1}var km=Fm;(function(e,n){var t=Yo,o=km,i=n&&!n.nodeType&&n,r=i&&!0&&e&&!e.nodeType&&e,a=r&&r.exports===i,s=a?t.Buffer:void 0,l=s?s.isBuffer:void 0,c=l||o;e.exports=c})(Ai,Ai.exports);var Sm=Wo,_m=$l,zm=Ko,Tm="[object Arguments]",Rm="[object Array]",Mm="[object Boolean]",Dm="[object Date]",Vm="[object Error]",jm="[object Function]",Am="[object Map]",Em="[object Number]",Nm="[object Object]",Im="[object RegExp]",Lm="[object Set]",Bm="[object String]",Om="[object WeakMap]",Gm="[object ArrayBuffer]",Um="[object DataView]",$m="[object Float32Array]",Hm="[object Float64Array]",qm="[object Int8Array]",Xm="[object Int16Array]",Ym="[object Int32Array]",Wm="[object Uint8Array]",Km="[object Uint8ClampedArray]",Zm="[object Uint16Array]",Qm="[object Uint32Array]",ge={};ge[$m]=ge[Hm]=ge[qm]=ge[Xm]=ge[Ym]=ge[Wm]=ge[Km]=ge[Zm]=ge[Qm]=!0;ge[Tm]=ge[Rm]=ge[Gm]=ge[Mm]=ge[Um]=ge[Dm]=ge[Vm]=ge[jm]=ge[Am]=ge[Em]=ge[Nm]=ge[Im]=ge[Lm]=ge[Bm]=ge[Om]=!1;function Jm(e){return zm(e)&&_m(e.length)&&!!ge[Sm(e)]}var eg=Jm;function ng(e){return function(n){return e(n)}}var tg=ng,Ei={exports:{}};(function(e,n){var t=Ll,o=n&&!n.nodeType&&n,i=o&&!0&&e&&!e.nodeType&&e,r=i&&i.exports===o,a=r&&t.process,s=function(){try{var l=i&&i.require&&i.require("util").types;return l||a&&a.binding&&a.binding("util")}catch{}}();e.exports=s})(Ei,Ei.exports);var og=eg,ig=tg,Wa=Ei.exports,Ka=Wa&&Wa.isTypedArray,rg=Ka?ig(Ka):og,ag=rg,sg=dm,lg=wm,cg=Pm,dg=Ai.exports,fg=ql,vg=ag,ug=Object.prototype,mg=ug.hasOwnProperty;function gg(e,n){var t=cg(e),o=!t&&lg(e),i=!t&&!o&&dg(e),r=!t&&!o&&!i&&vg(e),a=t||o||i||r,s=a?sg(e.length,String):[],l=s.length;for(var c in e)(n||mg.call(e,c))&&!(a&&(c=="length"||i&&(c=="offset"||c=="parent")||r&&(c=="buffer"||c=="byteLength"||c=="byteOffset")||fg(c,l)))&&s.push(c);return s}var hg=gg,pg=Object.prototype;function xg(e){var n=e&&e.constructor,t=typeof n=="function"&&n.prototype||pg;return e===t}var yg=xg;function bg(e){var n=[];if(e!=null)for(var t in Object(e))n.push(t);return n}var wg=bg,Cg=mt,Pg=yg,Fg=wg,kg=Object.prototype,Sg=kg.hasOwnProperty;function _g(e){if(!Cg(e))return Fg(e);var n=Pg(e),t=[];for(var o in e)o=="constructor"&&(n||!Sg.call(e,o))||t.push(o);return t}var zg=_g,Tg=hg,Rg=zg,Mg=Hl;function Dg(e){return Mg(e)?Tg(e,!0):Rg(e)}var Vg=Dg,jg=Xu,Ag=Ul,Eg=lm,Ng=Vg,Yl=Object.prototype,Ig=Yl.hasOwnProperty,Lg=jg(function(e,n){e=Object(e);var t=-1,o=n.length,i=o>2?n[2]:void 0;for(i&&Eg(n[0],n[1],i)&&(o=1);++t<o;)for(var r=n[t],a=Ng(r),s=-1,l=a.length;++s<l;){var c=a[s],f=e[c];(f===void 0||Ag(f,Yl[c])&&!Ig.call(e,c))&&(e[c]=r[c])}return e}),Bg=Lg;const Og=typeof window<"u"&&window!==null;Hg();const Gg=Object.prototype.propertyIsEnumerable,Za=Object.getOwnPropertySymbols;function go(e){return typeof e=="function"||toString.call(e)==="[object Object]"}function Ug(e){return typeof e=="object"?e===null:typeof e!="function"}function $g(e){return e!=="__proto__"&&e!=="constructor"&&e!=="prototype"}function Hg(){return Og&&"IntersectionObserver"in window&&"IntersectionObserverEntry"in window&&"intersectionRatio"in window.IntersectionObserverEntry.prototype?("isIntersecting"in window.IntersectionObserverEntry.prototype||Object.defineProperty(window.IntersectionObserverEntry.prototype,"isIntersecting",{get(){return this.intersectionRatio>0}}),!0):!1}function qg(e,...n){if(!go(e))throw new TypeError("expected the first argument to be an object");if(n.length===0||typeof Symbol!="function"||typeof Za!="function")return e;for(const t of n){const o=Za(t);for(const i of o)Gg.call(t,i)&&(e[i]=t[i])}return e}function Wl(e,...n){let t=0;for(Ug(e)&&(e=n[t++]),e||(e={});t<n.length;t++)if(go(n[t])){for(const o of Object.keys(n[t]))$g(o)&&(go(e[o])&&go(n[t][o])?Wl(e[o],n[t][o]):e[o]=n[t][o]);qg(e,n[t])}return e}const Xg=({images:e=[],options:n})=>{n=Wl(n,{inline:!1});const t=document.createElement("div"),o=Lt("div",{style:{display:"none"},class:["__viewer-token"]},e.map(s=>Lt("img",typeof s=="string"?{src:s}:s)));Yr(o,t);const i=t.firstElementChild;document.body.appendChild(i);const r=new ut(i,n),a=r.destroy.bind(r);return r.destroy=function(){return a(),Yr(null,t),r},r.show(),i.addEventListener("hidden",function(){this.viewer===r&&r.destroy()}),r};var Yg=Yo,Wg=function(){return Yg.Date.now()},Kg=Wg,Zg=/\s/;function Qg(e){for(var n=e.length;n--&&Zg.test(e.charAt(n)););return n}var Jg=Qg,eh=Jg,nh=/^\s+/;function th(e){return e&&e.slice(0,eh(e)+1).replace(nh,"")}var oh=th,ih=Wo,rh=Ko,ah="[object Symbol]";function sh(e){return typeof e=="symbol"||rh(e)&&ih(e)==ah}var lh=sh,ch=oh,Qa=mt,dh=lh,Ja=NaN,fh=/^[-+]0x[0-9a-f]+$/i,vh=/^0b[01]+$/i,uh=/^0o[0-7]+$/i,mh=parseInt;function gh(e){if(typeof e=="number")return e;if(dh(e))return Ja;if(Qa(e)){var n=typeof e.valueOf=="function"?e.valueOf():e;e=Qa(n)?n+"":n}if(typeof e!="string")return e===0?e:+e;e=ch(e);var t=vh.test(e);return t||uh.test(e)?mh(e.slice(2),t?2:8):fh.test(e)?Ja:+e}var hh=gh,ph=mt,ui=Kg,es=hh,xh="Expected a function",yh=Math.max,bh=Math.min;function wh(e,n,t){var o,i,r,a,s,l,c=0,f=!1,d=!1,u=!0;if(typeof e!="function")throw new TypeError(xh);n=es(n)||0,ph(t)&&(f=!!t.leading,d="maxWait"in t,r=d?yh(es(t.maxWait)||0,n):r,u="trailing"in t?!!t.trailing:u);function g(j){var O=o,K=i;return o=i=void 0,c=j,a=e.apply(K,O),a}function p(j){return c=j,s=setTimeout(k,n),f?g(j):a}function x(j){var O=j-l,K=j-c,E=n-O;return d?bh(E,r-K):E}function D(j){var O=j-l,K=j-c;return l===void 0||O>=n||O<0||d&&K>=r}function k(){var j=ui();if(D(j))return S(j);s=setTimeout(k,x(j))}function S(j){return s=void 0,u&&o?g(j):(o=i=void 0,a)}function F(){s!==void 0&&clearTimeout(s),c=0,o=l=i=s=void 0}function T(){return s===void 0?a:S(ui())}function B(){var j=ui(),O=D(j);if(o=arguments,i=this,l=j,O){if(s===void 0)return p(l);if(d)return clearTimeout(s),s=setTimeout(k,n),g(l)}return s===void 0&&(s=setTimeout(k,n)),a}return B.cancel=F,B.flush=T,B}var Ch=wh;const Ph=({name:e="viewer",debug:n=!1}={})=>{async function t(d,u,g=!1,p=!1){await rt(),!(p&&!o(d))&&(g||!d[`$${e}`]?(a(d),d[`$${e}`]=new ut(d,u),c("Viewer created")):(d[`$${e}`].update(),c("Viewer updated")))}function o(d){const u=d.innerHTML.match(/<img([\w\W]+?)[\\/]?>/g),g=u?u.join(""):void 0;return d.__viewerImageDiffCache===g?(c("Element change detected, but image(s) has not changed"),!1):(c("Image change detected"),d.__viewerImageDiffCache=g,!0)}function i(d,u,g,p){s(d);const x=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;if(!x){c("Observer not supported");return}const D=new x(S=>{S.forEach(F=>{c(`Viewer mutation:${F.type}`),g(d,u,p,!0)})}),k={attributes:!0,childList:!0,characterData:!0,subtree:!0};D.observe(d,k),d.__viewerMutationObserver=D,c("Observer created")}function r(d,u,g,p){d.__viewerUnwatch=zn(()=>u.value,(x,D)=>{c("Change detected by watcher: ",u.value),p(d,x,!0,!1)},{deep:!0}),c("Watcher created, expression: ",u.value)}function a(d){d[`$${e}`]&&(d[`$${e}`].destroy(),delete d[`$${e}`],c("Viewer destroyed"))}function s(d){d.__viewerMutationObserver&&(d.__viewerMutationObserver.disconnect(),delete d.__viewerMutationObserver,c("observer destroyed"))}function l(d){d.__viewerUnwatch&&(d.__viewerUnwatch(),delete d.__viewerUnwatch,c("Watcher destroyed"))}function c(...d){n&&console.log(...d)}return{mounted(d,u,g){c("Viewer bind");const p=Ch(t,50);p(d,u.value),r(d,u,g,p),u.modifiers.static||i(d,u.value,p,u.modifiers.rebuild)},unmounted(d){c("Viewer unbind"),s(d),l(d),a(d)}}};var Fh=(e,n)=>{const t=e.__vccOpts||e;for(const[o,i]of n)t[o]=i;return t};const kh=Xi({name:"Viewer",props:{images:{type:Array,default:()=>[]},rebuild:{type:Boolean,default:!1},trigger:{type:Object,default:null},options:{type:Object,default:()=>null}},emits:["inited"],setup(e,{emit:n}){let t;const o=Hi();function i(){t=new ut(o.value,e.options),n("inited",t)}function r(){t&&t.destroy()}function a(){r(),i()}function s(){t?(t.update(),n("inited",t)):i()}function l(){e.rebuild?a():s()}const c={deep:!0};return zn(()=>e.images,()=>rt(()=>l()),c),zn(()=>e.trigger,()=>rt(()=>l()),c),zn(()=>e.options,()=>rt(()=>a()),c),Yi(()=>i()),Wi(()=>r()),{root:o,createViewer:i,rebuildViewer:a,updateViewer:s,destroyViewer:r}}}),Sh={ref:"root"};function _h(e,n,t,o,i,r){return At(),Id("div",Sh,[sd(e.$slots,"default",{images:e.images,options:e.options})],512)}var zh=Fh(kh,[["render",_h]]),Th={install(e,{name:n="viewer",debug:t=!1,defaultOptions:o}={}){o&&ut.setDefaults(o),e.config.globalProperties[`$${n}Api`]=Xg,e.component(n,Bg(zh,{name:n})),e.directive(n,Ph({name:n,debug:t}))},setDefaults(e){ut.setDefaults(e)}};const lr=S0(Of);lr.use(Vl);lr.use(Th,{defaultOptions:{zIndex:9999,toolbar:!1}});lr.mount("#app");export{Bd as $,Mc as A,dc as B,Dh as C,Vh as D,sd as E,Le as F,_s as G,jh as H,Mh as I,Yh as J,Ah as K,nr as L,rt as M,Eh as N,Bh as O,Lt as P,Gd as Q,ro as R,Xe as S,Qh as T,Nh as U,Lh as V,Eo as W,Wh as X,qh as Y,Rh as Z,_i as _,Xs as a,$h as a0,Hh as a1,De as a2,Od as a3,Jh as a4,Oh as a5,np as a6,ad as a7,Ef as a8,Xh as a9,Q as aa,ep as ab,Tn as ac,At as b,Id as c,Xi as d,If as e,Gh as f,ml as g,Uh as h,Qe as i,Zh as j,Ve as k,$c as l,Co as m,Do as n,Yi as o,Ih as p,We as q,Hi as r,Wi as s,cc as t,Bn as u,Kh as v,zn as w,Mo as x,Vl as y,so as z};
